/* Server_SoapH.h
   Generated by gSOAP 2.8.45 for source.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef Server_SoapH_H
#define Server_SoapH_H
#include "Server_SoapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 Server_Soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 Server_Soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 Server_Soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 Server_Soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__int_DEFINED
#define SOAP_TYPE_xsd__int_DEFINED

inline void soap_default_xsd__int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__int
	*a = SOAP_DEFAULT_xsd__int;
#else
	*a = (int)0;
#endif
}

#define soap_xsd__int2s soap_int2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const int *, const char*);

#define soap_s2xsd__int soap_s2int

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_xsd__int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap*, const int *, const char*, const char*);

inline int soap_write_xsd__int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__int(soap, p, "xsd:int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__int(soap, p, "xsd:int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__int(soap, p, "xsd:int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, int *, const char*, const char*);

inline int soap_read_xsd__int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__int(struct soap *soap, int *p)
{
	if (soap_read_xsd__int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_long_DEFINED
#define SOAP_TYPE_long_DEFINED

inline void soap_default_long(struct soap *soap, long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap*, const char*, int, const long *, const char*);
SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap*, const char*, long *, const char*);

SOAP_FMAC3 long * SOAP_FMAC4 soap_new_long(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap*, const long *, const char*, const char*);

inline int soap_write_long(struct soap *soap, long const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_long(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_long(struct soap *soap, const char *URL, long const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_long(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_long(struct soap *soap, const char *URL, long const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_long(soap, p, "long", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap*, long *, const char*, const char*);

inline int soap_read_long(struct soap *soap, long *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_long(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_long(struct soap *soap, const char *URL, long *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_long(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_long(struct soap *soap, long *p)
{
	if (soap_read_long(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__long_DEFINED
#define SOAP_TYPE_xsd__long_DEFINED

inline void soap_default_xsd__long(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__long
	*a = SOAP_DEFAULT_xsd__long;
#else
	*a = (LONG64)0;
#endif
}

#define soap_xsd__long2s soap_LONG642s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const LONG64 *, const char*);

#define soap_s2xsd__long soap_s2LONG64

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_xsd__long(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__long(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_xsd__long(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__long(soap, p, "xsd:long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__long(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__long(soap, p, "xsd:long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__long(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__long(soap, p, "xsd:long", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__long(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_xsd__long(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__long(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__long(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__long(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__long(struct soap *soap, LONG64 *p)
{
	if (soap_read_xsd__long(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED

inline void soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_LONG64(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_LONG64(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_LONG64(struct soap *soap, LONG64 *p)
{
	if (soap_read_LONG64(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__double_DEFINED
#define SOAP_TYPE_xsd__double_DEFINED

inline void soap_default_xsd__double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__double
	*a = SOAP_DEFAULT_xsd__double;
#else
	*a = (double)0;
#endif
}

#define soap_xsd__double2s soap_double2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const double *, const char*);

#define soap_s2xsd__double soap_s2double

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_xsd__double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap*, const double *, const char*, const char*);

inline int soap_write_xsd__double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__double(soap, p, "xsd:double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__double(soap, p, "xsd:double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__double(soap, p, "xsd:double", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, double *, const char*, const char*);

inline int soap_read_xsd__double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__double(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__double(struct soap *soap, double *p)
{
	if (soap_read_xsd__double(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_double(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (soap_read_double(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__dateTime_DEFINED
#define SOAP_TYPE_xsd__dateTime_DEFINED

inline void soap_default_xsd__dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__dateTime
	*a = SOAP_DEFAULT_xsd__dateTime;
#else
	*a = (time_t)0;
#endif
}

#define soap_xsd__dateTime2s soap_dateTime2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const time_t *, const char*);

#define soap_s2xsd__dateTime soap_s2dateTime

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_xsd__dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_xsd__dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__dateTime(soap, p, "xsd:dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__dateTime(soap, p, "xsd:dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__dateTime(soap, p, "xsd:dateTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_xsd__dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__dateTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__dateTime(struct soap *soap, time_t *p)
{
	if (soap_read_xsd__dateTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_dateTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__RequestType_DEFINED
#define SOAP_TYPE_ns__RequestType_DEFINED

inline void soap_default_ns__RequestType(struct soap *soap, enum ns__RequestType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__RequestType
	*a = SOAP_DEFAULT_ns__RequestType;
#else
	*a = (enum ns__RequestType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__RequestType(struct soap*, const char*, int, const enum ns__RequestType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__RequestType2s(struct soap*, enum ns__RequestType);
SOAP_FMAC3 enum ns__RequestType * SOAP_FMAC4 soap_in_ns__RequestType(struct soap*, const char*, enum ns__RequestType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__RequestType(struct soap*, const char*, enum ns__RequestType *);

SOAP_FMAC3 enum ns__RequestType * SOAP_FMAC4 soap_new_ns__RequestType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__RequestType(struct soap*, const enum ns__RequestType *, const char*, const char*);

inline int soap_write_ns__RequestType(struct soap *soap, enum ns__RequestType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns__RequestType(soap, p, "ns:RequestType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns__RequestType(struct soap *soap, const char *URL, enum ns__RequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns__RequestType(soap, p, "ns:RequestType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__RequestType(struct soap *soap, const char *URL, enum ns__RequestType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns__RequestType(soap, p, "ns:RequestType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns__RequestType * SOAP_FMAC4 soap_get_ns__RequestType(struct soap*, enum ns__RequestType *, const char*, const char*);

inline int soap_read_ns__RequestType(struct soap *soap, enum ns__RequestType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns__RequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__RequestType(struct soap *soap, const char *URL, enum ns__RequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__RequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__RequestType(struct soap *soap, enum ns__RequestType *p)
{
	if (soap_read_ns__RequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__DeviceModel_DEFINED
#define SOAP_TYPE_ns__DeviceModel_DEFINED

inline void soap_default_ns__DeviceModel(struct soap *soap, enum ns__DeviceModel *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__DeviceModel
	*a = SOAP_DEFAULT_ns__DeviceModel;
#else
	*a = (enum ns__DeviceModel)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceModel(struct soap*, const char*, int, const enum ns__DeviceModel *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__DeviceModel2s(struct soap*, enum ns__DeviceModel);
SOAP_FMAC3 enum ns__DeviceModel * SOAP_FMAC4 soap_in_ns__DeviceModel(struct soap*, const char*, enum ns__DeviceModel *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__DeviceModel(struct soap*, const char*, enum ns__DeviceModel *);

SOAP_FMAC3 enum ns__DeviceModel * SOAP_FMAC4 soap_new_ns__DeviceModel(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeviceModel(struct soap*, const enum ns__DeviceModel *, const char*, const char*);

inline int soap_write_ns__DeviceModel(struct soap *soap, enum ns__DeviceModel const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns__DeviceModel(soap, p, "ns:DeviceModel", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns__DeviceModel(struct soap *soap, const char *URL, enum ns__DeviceModel const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns__DeviceModel(soap, p, "ns:DeviceModel", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__DeviceModel(struct soap *soap, const char *URL, enum ns__DeviceModel const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns__DeviceModel(soap, p, "ns:DeviceModel", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns__DeviceModel * SOAP_FMAC4 soap_get_ns__DeviceModel(struct soap*, enum ns__DeviceModel *, const char*, const char*);

inline int soap_read_ns__DeviceModel(struct soap *soap, enum ns__DeviceModel *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns__DeviceModel(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__DeviceModel(struct soap *soap, const char *URL, enum ns__DeviceModel *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__DeviceModel(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__DeviceModel(struct soap *soap, enum ns__DeviceModel *p)
{
	if (soap_read_ns__DeviceModel(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SensorName_DEFINED
#define SOAP_TYPE_ns__SensorName_DEFINED

inline void soap_default_ns__SensorName(struct soap *soap, enum ns__SensorName *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__SensorName
	*a = SOAP_DEFAULT_ns__SensorName;
#else
	*a = (enum ns__SensorName)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SensorName(struct soap*, const char*, int, const enum ns__SensorName *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SensorName2s(struct soap*, enum ns__SensorName);
SOAP_FMAC3 enum ns__SensorName * SOAP_FMAC4 soap_in_ns__SensorName(struct soap*, const char*, enum ns__SensorName *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SensorName(struct soap*, const char*, enum ns__SensorName *);

SOAP_FMAC3 enum ns__SensorName * SOAP_FMAC4 soap_new_ns__SensorName(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SensorName(struct soap*, const enum ns__SensorName *, const char*, const char*);

inline int soap_write_ns__SensorName(struct soap *soap, enum ns__SensorName const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns__SensorName(soap, p, "ns:SensorName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns__SensorName(struct soap *soap, const char *URL, enum ns__SensorName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns__SensorName(soap, p, "ns:SensorName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SensorName(struct soap *soap, const char *URL, enum ns__SensorName const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns__SensorName(soap, p, "ns:SensorName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns__SensorName * SOAP_FMAC4 soap_get_ns__SensorName(struct soap*, enum ns__SensorName *, const char*, const char*);

inline int soap_read_ns__SensorName(struct soap *soap, enum ns__SensorName *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns__SensorName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SensorName(struct soap *soap, const char *URL, enum ns__SensorName *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SensorName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SensorName(struct soap *soap, enum ns__SensorName *p)
{
	if (soap_read_ns__SensorName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SensorType_DEFINED
#define SOAP_TYPE_ns__SensorType_DEFINED

inline void soap_default_ns__SensorType(struct soap *soap, enum ns__SensorType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__SensorType
	*a = SOAP_DEFAULT_ns__SensorType;
#else
	*a = (enum ns__SensorType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SensorType(struct soap*, const char*, int, const enum ns__SensorType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SensorType2s(struct soap*, enum ns__SensorType);
SOAP_FMAC3 enum ns__SensorType * SOAP_FMAC4 soap_in_ns__SensorType(struct soap*, const char*, enum ns__SensorType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SensorType(struct soap*, const char*, enum ns__SensorType *);

SOAP_FMAC3 enum ns__SensorType * SOAP_FMAC4 soap_new_ns__SensorType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SensorType(struct soap*, const enum ns__SensorType *, const char*, const char*);

inline int soap_write_ns__SensorType(struct soap *soap, enum ns__SensorType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns__SensorType(soap, p, "ns:SensorType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns__SensorType(struct soap *soap, const char *URL, enum ns__SensorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns__SensorType(soap, p, "ns:SensorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SensorType(struct soap *soap, const char *URL, enum ns__SensorType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns__SensorType(soap, p, "ns:SensorType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns__SensorType * SOAP_FMAC4 soap_get_ns__SensorType(struct soap*, enum ns__SensorType *, const char*, const char*);

inline int soap_read_ns__SensorType(struct soap *soap, enum ns__SensorType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns__SensorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SensorType(struct soap *soap, const char *URL, enum ns__SensorType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SensorType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SensorType(struct soap *soap, enum ns__SensorType *p)
{
	if (soap_read_ns__SensorType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__UserType_DEFINED
#define SOAP_TYPE_ns__UserType_DEFINED

inline void soap_default_ns__UserType(struct soap *soap, enum ns__UserType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__UserType
	*a = SOAP_DEFAULT_ns__UserType;
#else
	*a = (enum ns__UserType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UserType(struct soap*, const char*, int, const enum ns__UserType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__UserType2s(struct soap*, enum ns__UserType);
SOAP_FMAC3 enum ns__UserType * SOAP_FMAC4 soap_in_ns__UserType(struct soap*, const char*, enum ns__UserType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__UserType(struct soap*, const char*, enum ns__UserType *);

SOAP_FMAC3 enum ns__UserType * SOAP_FMAC4 soap_new_ns__UserType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__UserType(struct soap*, const enum ns__UserType *, const char*, const char*);

inline int soap_write_ns__UserType(struct soap *soap, enum ns__UserType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns__UserType(soap, p, "ns:UserType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns__UserType(struct soap *soap, const char *URL, enum ns__UserType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns__UserType(soap, p, "ns:UserType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__UserType(struct soap *soap, const char *URL, enum ns__UserType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns__UserType(soap, p, "ns:UserType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns__UserType * SOAP_FMAC4 soap_get_ns__UserType(struct soap*, enum ns__UserType *, const char*, const char*);

inline int soap_read_ns__UserType(struct soap *soap, enum ns__UserType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns__UserType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__UserType(struct soap *soap, const char *URL, enum ns__UserType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__UserType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__UserType(struct soap *soap, enum ns__UserType *p)
{
	if (soap_read_ns__UserType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SettingLevel_DEFINED
#define SOAP_TYPE_ns__SettingLevel_DEFINED

inline void soap_default_ns__SettingLevel(struct soap *soap, enum ns__SettingLevel *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__SettingLevel
	*a = SOAP_DEFAULT_ns__SettingLevel;
#else
	*a = (enum ns__SettingLevel)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SettingLevel(struct soap*, const char*, int, const enum ns__SettingLevel *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SettingLevel2s(struct soap*, enum ns__SettingLevel);
SOAP_FMAC3 enum ns__SettingLevel * SOAP_FMAC4 soap_in_ns__SettingLevel(struct soap*, const char*, enum ns__SettingLevel *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SettingLevel(struct soap*, const char*, enum ns__SettingLevel *);

SOAP_FMAC3 enum ns__SettingLevel * SOAP_FMAC4 soap_new_ns__SettingLevel(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SettingLevel(struct soap*, const enum ns__SettingLevel *, const char*, const char*);

inline int soap_write_ns__SettingLevel(struct soap *soap, enum ns__SettingLevel const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns__SettingLevel(soap, p, "ns:SettingLevel", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns__SettingLevel(struct soap *soap, const char *URL, enum ns__SettingLevel const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns__SettingLevel(soap, p, "ns:SettingLevel", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SettingLevel(struct soap *soap, const char *URL, enum ns__SettingLevel const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns__SettingLevel(soap, p, "ns:SettingLevel", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns__SettingLevel * SOAP_FMAC4 soap_get_ns__SettingLevel(struct soap*, enum ns__SettingLevel *, const char*, const char*);

inline int soap_read_ns__SettingLevel(struct soap *soap, enum ns__SettingLevel *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns__SettingLevel(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SettingLevel(struct soap *soap, const char *URL, enum ns__SettingLevel *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SettingLevel(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SettingLevel(struct soap *soap, enum ns__SettingLevel *p)
{
	if (soap_read_ns__SettingLevel(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__boolean_DEFINED
#define SOAP_TYPE_xsd__boolean_DEFINED

inline void soap_default_xsd__boolean(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__boolean
	*a = SOAP_DEFAULT_xsd__boolean;
#else
	*a = (bool)0;
#endif
}

#define soap_xsd__boolean2s soap_bool2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const bool *, const char*);

#define soap_s2xsd__boolean soap_s2bool

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_xsd__boolean(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap*, const bool *, const char*, const char*);

inline int soap_write_xsd__boolean(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__boolean(soap, p, "xsd:boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__boolean(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__boolean(soap, p, "xsd:boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__boolean(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__boolean(soap, p, "xsd:boolean", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, bool *, const char*, const char*);

inline int soap_read_xsd__boolean(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__boolean(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__boolean(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__boolean(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__boolean(struct soap *soap, bool *p)
{
	if (soap_read_xsd__boolean(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__AllCityLocatoins_DEFINED
#define SOAP_TYPE_ns__AllCityLocatoins_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AllCityLocatoins(struct soap*, const char*, int, const ns__AllCityLocatoins *, const char*);
SOAP_FMAC3 ns__AllCityLocatoins * SOAP_FMAC4 soap_in_ns__AllCityLocatoins(struct soap*, const char*, ns__AllCityLocatoins *, const char*);
SOAP_FMAC1 ns__AllCityLocatoins * SOAP_FMAC2 Server_Soap_instantiate_ns__AllCityLocatoins(struct soap*, int, const char*, const char*, size_t*);

inline ns__AllCityLocatoins * soap_new_ns__AllCityLocatoins(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__AllCityLocatoins(soap, n, NULL, NULL, NULL);
}

inline ns__AllCityLocatoins * soap_new_req_ns__AllCityLocatoins(
	struct soap *soap,
	const ns__ErrorCode& aclErr)
{
	ns__AllCityLocatoins *_p = soap_new_ns__AllCityLocatoins(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__AllCityLocatoins::aclErr = aclErr;
	}
	return _p;
}

inline ns__AllCityLocatoins * soap_new_set_ns__AllCityLocatoins(
	struct soap *soap,
	const std::vector<ns__CityLocation> & aclCityLocatoins,
	const ns__ErrorCode& aclErr)
{
	ns__AllCityLocatoins *_p = soap_new_ns__AllCityLocatoins(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__AllCityLocatoins::aclCityLocatoins = aclCityLocatoins;
		_p->ns__AllCityLocatoins::aclErr = aclErr;
	}
	return _p;
}

inline int soap_write_ns__AllCityLocatoins(struct soap *soap, ns__AllCityLocatoins const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:AllCityLocatoins", p->soap_type() == SOAP_TYPE_ns__AllCityLocatoins ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__AllCityLocatoins(struct soap *soap, const char *URL, ns__AllCityLocatoins const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:AllCityLocatoins", p->soap_type() == SOAP_TYPE_ns__AllCityLocatoins ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__AllCityLocatoins(struct soap *soap, const char *URL, ns__AllCityLocatoins const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:AllCityLocatoins", p->soap_type() == SOAP_TYPE_ns__AllCityLocatoins ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__AllCityLocatoins * SOAP_FMAC4 soap_get_ns__AllCityLocatoins(struct soap*, ns__AllCityLocatoins *, const char*, const char*);

inline int soap_read_ns__AllCityLocatoins(struct soap *soap, ns__AllCityLocatoins *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__AllCityLocatoins(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__AllCityLocatoins(struct soap *soap, const char *URL, ns__AllCityLocatoins *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__AllCityLocatoins(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__AllCityLocatoins(struct soap *soap, ns__AllCityLocatoins *p)
{
	if (soap_read_ns__AllCityLocatoins(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__CityLocation_DEFINED
#define SOAP_TYPE_ns__CityLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CityLocation(struct soap*, const char*, int, const ns__CityLocation *, const char*);
SOAP_FMAC3 ns__CityLocation * SOAP_FMAC4 soap_in_ns__CityLocation(struct soap*, const char*, ns__CityLocation *, const char*);
SOAP_FMAC1 ns__CityLocation * SOAP_FMAC2 Server_Soap_instantiate_ns__CityLocation(struct soap*, int, const char*, const char*, size_t*);

inline ns__CityLocation * soap_new_ns__CityLocation(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__CityLocation(soap, n, NULL, NULL, NULL);
}

inline ns__CityLocation * soap_new_req_ns__CityLocation(
	struct soap *soap,
	const ns__ErrorCode& clErr)
{
	ns__CityLocation *_p = soap_new_ns__CityLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__CityLocation::clErr = clErr;
	}
	return _p;
}

inline ns__CityLocation * soap_new_set_ns__CityLocation(
	struct soap *soap,
	const std::string& clCity,
	const std::vector<std::string> & clLocations,
	const ns__ErrorCode& clErr)
{
	ns__CityLocation *_p = soap_new_ns__CityLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__CityLocation::clCity = clCity;
		_p->ns__CityLocation::clLocations = clLocations;
		_p->ns__CityLocation::clErr = clErr;
	}
	return _p;
}

inline int soap_write_ns__CityLocation(struct soap *soap, ns__CityLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:CityLocation", p->soap_type() == SOAP_TYPE_ns__CityLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__CityLocation(struct soap *soap, const char *URL, ns__CityLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:CityLocation", p->soap_type() == SOAP_TYPE_ns__CityLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__CityLocation(struct soap *soap, const char *URL, ns__CityLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:CityLocation", p->soap_type() == SOAP_TYPE_ns__CityLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__CityLocation * SOAP_FMAC4 soap_get_ns__CityLocation(struct soap*, ns__CityLocation *, const char*, const char*);

inline int soap_read_ns__CityLocation(struct soap *soap, ns__CityLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__CityLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__CityLocation(struct soap *soap, const char *URL, ns__CityLocation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__CityLocation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__CityLocation(struct soap *soap, ns__CityLocation *p)
{
	if (soap_read_ns__CityLocation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__ServerOptions_DEFINED
#define SOAP_TYPE_ns__ServerOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ServerOptions(struct soap*, const char*, int, const ns__ServerOptions *, const char*);
SOAP_FMAC3 ns__ServerOptions * SOAP_FMAC4 soap_in_ns__ServerOptions(struct soap*, const char*, ns__ServerOptions *, const char*);
SOAP_FMAC1 ns__ServerOptions * SOAP_FMAC2 Server_Soap_instantiate_ns__ServerOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns__ServerOptions * soap_new_ns__ServerOptions(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__ServerOptions(soap, n, NULL, NULL, NULL);
}

inline ns__ServerOptions * soap_new_req_ns__ServerOptions(
	struct soap *soap,
	const ns__DataBase& soDataBase,
	const ns__ErrorCode& soErr)
{
	ns__ServerOptions *_p = soap_new_ns__ServerOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ServerOptions::soDataBase = soDataBase;
		_p->ns__ServerOptions::soErr = soErr;
	}
	return _p;
}

inline ns__ServerOptions * soap_new_set_ns__ServerOptions(
	struct soap *soap,
	const ns__DataBase& soDataBase,
	int soRepeat,
	const ns__ErrorCode& soErr)
{
	ns__ServerOptions *_p = soap_new_ns__ServerOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ServerOptions::soDataBase = soDataBase;
		_p->ns__ServerOptions::soRepeat = soRepeat;
		_p->ns__ServerOptions::soErr = soErr;
	}
	return _p;
}

inline int soap_write_ns__ServerOptions(struct soap *soap, ns__ServerOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ServerOptions", p->soap_type() == SOAP_TYPE_ns__ServerOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ServerOptions(struct soap *soap, const char *URL, ns__ServerOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ServerOptions", p->soap_type() == SOAP_TYPE_ns__ServerOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__ServerOptions(struct soap *soap, const char *URL, ns__ServerOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ServerOptions", p->soap_type() == SOAP_TYPE_ns__ServerOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__ServerOptions * SOAP_FMAC4 soap_get_ns__ServerOptions(struct soap*, ns__ServerOptions *, const char*, const char*);

inline int soap_read_ns__ServerOptions(struct soap *soap, ns__ServerOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__ServerOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ServerOptions(struct soap *soap, const char *URL, ns__ServerOptions *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__ServerOptions(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__ServerOptions(struct soap *soap, ns__ServerOptions *p)
{
	if (soap_read_ns__ServerOptions(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__DataBase_DEFINED
#define SOAP_TYPE_ns__DataBase_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DataBase(struct soap*, const char*, int, const ns__DataBase *, const char*);
SOAP_FMAC3 ns__DataBase * SOAP_FMAC4 soap_in_ns__DataBase(struct soap*, const char*, ns__DataBase *, const char*);
SOAP_FMAC1 ns__DataBase * SOAP_FMAC2 Server_Soap_instantiate_ns__DataBase(struct soap*, int, const char*, const char*, size_t*);

inline ns__DataBase * soap_new_ns__DataBase(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__DataBase(soap, n, NULL, NULL, NULL);
}

inline ns__DataBase * soap_new_req_ns__DataBase(
	struct soap *soap,
	const ns__ErrorCode& dbErr)
{
	ns__DataBase *_p = soap_new_ns__DataBase(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DataBase::dbErr = dbErr;
	}
	return _p;
}

inline ns__DataBase * soap_new_set_ns__DataBase(
	struct soap *soap,
	const std::string& dbServer,
	int bdPort,
	const std::string& dbUser,
	const std::string& dbPassWord,
	const ns__ErrorCode& dbErr)
{
	ns__DataBase *_p = soap_new_ns__DataBase(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DataBase::dbServer = dbServer;
		_p->ns__DataBase::bdPort = bdPort;
		_p->ns__DataBase::dbUser = dbUser;
		_p->ns__DataBase::dbPassWord = dbPassWord;
		_p->ns__DataBase::dbErr = dbErr;
	}
	return _p;
}

inline int soap_write_ns__DataBase(struct soap *soap, ns__DataBase const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DataBase", p->soap_type() == SOAP_TYPE_ns__DataBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__DataBase(struct soap *soap, const char *URL, ns__DataBase const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DataBase", p->soap_type() == SOAP_TYPE_ns__DataBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__DataBase(struct soap *soap, const char *URL, ns__DataBase const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DataBase", p->soap_type() == SOAP_TYPE_ns__DataBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__DataBase * SOAP_FMAC4 soap_get_ns__DataBase(struct soap*, ns__DataBase *, const char*, const char*);

inline int soap_read_ns__DataBase(struct soap *soap, ns__DataBase *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__DataBase(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__DataBase(struct soap *soap, const char *URL, ns__DataBase *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__DataBase(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__DataBase(struct soap *soap, ns__DataBase *p)
{
	if (soap_read_ns__DataBase(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__UserDevice_DEFINED
#define SOAP_TYPE_ns__UserDevice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UserDevice(struct soap*, const char*, int, const ns__UserDevice *, const char*);
SOAP_FMAC3 ns__UserDevice * SOAP_FMAC4 soap_in_ns__UserDevice(struct soap*, const char*, ns__UserDevice *, const char*);
SOAP_FMAC1 ns__UserDevice * SOAP_FMAC2 Server_Soap_instantiate_ns__UserDevice(struct soap*, int, const char*, const char*, size_t*);

inline ns__UserDevice * soap_new_ns__UserDevice(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__UserDevice(soap, n, NULL, NULL, NULL);
}

inline ns__UserDevice * soap_new_req_ns__UserDevice(
	struct soap *soap,
	const ns__User& udUser,
	const ns__ErrorCode& udErr)
{
	ns__UserDevice *_p = soap_new_ns__UserDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UserDevice::udUser = udUser;
		_p->ns__UserDevice::udErr = udErr;
	}
	return _p;
}

inline ns__UserDevice * soap_new_set_ns__UserDevice(
	struct soap *soap,
	const ns__User& udUser,
	const std::vector<ns__Device> & udDevs,
	const ns__ErrorCode& udErr)
{
	ns__UserDevice *_p = soap_new_ns__UserDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UserDevice::udUser = udUser;
		_p->ns__UserDevice::udDevs = udDevs;
		_p->ns__UserDevice::udErr = udErr;
	}
	return _p;
}

inline int soap_write_ns__UserDevice(struct soap *soap, ns__UserDevice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UserDevice", p->soap_type() == SOAP_TYPE_ns__UserDevice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__UserDevice(struct soap *soap, const char *URL, ns__UserDevice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UserDevice", p->soap_type() == SOAP_TYPE_ns__UserDevice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__UserDevice(struct soap *soap, const char *URL, ns__UserDevice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UserDevice", p->soap_type() == SOAP_TYPE_ns__UserDevice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__UserDevice * SOAP_FMAC4 soap_get_ns__UserDevice(struct soap*, ns__UserDevice *, const char*, const char*);

inline int soap_read_ns__UserDevice(struct soap *soap, ns__UserDevice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__UserDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__UserDevice(struct soap *soap, const char *URL, ns__UserDevice *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__UserDevice(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__UserDevice(struct soap *soap, ns__UserDevice *p)
{
	if (soap_read_ns__UserDevice(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__ErrorLog_DEFINED
#define SOAP_TYPE_ns__ErrorLog_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ErrorLog(struct soap*, const char*, int, const ns__ErrorLog *, const char*);
SOAP_FMAC3 ns__ErrorLog * SOAP_FMAC4 soap_in_ns__ErrorLog(struct soap*, const char*, ns__ErrorLog *, const char*);
SOAP_FMAC1 ns__ErrorLog * SOAP_FMAC2 Server_Soap_instantiate_ns__ErrorLog(struct soap*, int, const char*, const char*, size_t*);

inline ns__ErrorLog * soap_new_ns__ErrorLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__ErrorLog(soap, n, NULL, NULL, NULL);
}

inline ns__ErrorLog * soap_new_req_ns__ErrorLog(
	struct soap *soap,
	const ns__Device& elDevice,
	const ns__ErrorCode& elErr)
{
	ns__ErrorLog *_p = soap_new_ns__ErrorLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ErrorLog::elDevice = elDevice;
		_p->ns__ErrorLog::elErr = elErr;
	}
	return _p;
}

inline ns__ErrorLog * soap_new_set_ns__ErrorLog(
	struct soap *soap,
	time_t elDateTime,
	const ns__Device& elDevice,
	const ns__ErrorCode& elErr)
{
	ns__ErrorLog *_p = soap_new_ns__ErrorLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ErrorLog::elDateTime = elDateTime;
		_p->ns__ErrorLog::elDevice = elDevice;
		_p->ns__ErrorLog::elErr = elErr;
	}
	return _p;
}

inline int soap_write_ns__ErrorLog(struct soap *soap, ns__ErrorLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ErrorLog", p->soap_type() == SOAP_TYPE_ns__ErrorLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ErrorLog(struct soap *soap, const char *URL, ns__ErrorLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ErrorLog", p->soap_type() == SOAP_TYPE_ns__ErrorLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__ErrorLog(struct soap *soap, const char *URL, ns__ErrorLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ErrorLog", p->soap_type() == SOAP_TYPE_ns__ErrorLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__ErrorLog * SOAP_FMAC4 soap_get_ns__ErrorLog(struct soap*, ns__ErrorLog *, const char*, const char*);

inline int soap_read_ns__ErrorLog(struct soap *soap, ns__ErrorLog *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__ErrorLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ErrorLog(struct soap *soap, const char *URL, ns__ErrorLog *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__ErrorLog(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__ErrorLog(struct soap *soap, ns__ErrorLog *p)
{
	if (soap_read_ns__ErrorLog(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__DeviceStatus_DEFINED
#define SOAP_TYPE_ns__DeviceStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceStatus(struct soap*, const char*, int, const ns__DeviceStatus *, const char*);
SOAP_FMAC3 ns__DeviceStatus * SOAP_FMAC4 soap_in_ns__DeviceStatus(struct soap*, const char*, ns__DeviceStatus *, const char*);
SOAP_FMAC1 ns__DeviceStatus * SOAP_FMAC2 Server_Soap_instantiate_ns__DeviceStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns__DeviceStatus * soap_new_ns__DeviceStatus(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__DeviceStatus(soap, n, NULL, NULL, NULL);
}

inline ns__DeviceStatus * soap_new_req_ns__DeviceStatus(
	struct soap *soap,
	const ns__ReportRange& dsRange)
{
	ns__DeviceStatus *_p = soap_new_ns__DeviceStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatus::dsRange = dsRange;
	}
	return _p;
}

inline ns__DeviceStatus * soap_new_set_ns__DeviceStatus(
	struct soap *soap,
	const ns__ReportRange& dsRange,
	const std::vector<ns__Device> & dsDevice,
	const std::vector<std::string> & dsErr)
{
	ns__DeviceStatus *_p = soap_new_ns__DeviceStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatus::dsRange = dsRange;
		_p->ns__DeviceStatus::dsDevice = dsDevice;
		_p->ns__DeviceStatus::dsErr = dsErr;
	}
	return _p;
}

inline int soap_write_ns__DeviceStatus(struct soap *soap, ns__DeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DeviceStatus", p->soap_type() == SOAP_TYPE_ns__DeviceStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__DeviceStatus(struct soap *soap, const char *URL, ns__DeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DeviceStatus", p->soap_type() == SOAP_TYPE_ns__DeviceStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__DeviceStatus(struct soap *soap, const char *URL, ns__DeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DeviceStatus", p->soap_type() == SOAP_TYPE_ns__DeviceStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__DeviceStatus * SOAP_FMAC4 soap_get_ns__DeviceStatus(struct soap*, ns__DeviceStatus *, const char*, const char*);

inline int soap_read_ns__DeviceStatus(struct soap *soap, ns__DeviceStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__DeviceStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__DeviceStatus(struct soap *soap, const char *URL, ns__DeviceStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__DeviceStatus(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__DeviceStatus(struct soap *soap, ns__DeviceStatus *p)
{
	if (soap_read_ns__DeviceStatus(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__DeviceStatusLogList_DEFINED
#define SOAP_TYPE_ns__DeviceStatusLogList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceStatusLogList(struct soap*, const char*, int, const ns__DeviceStatusLogList *, const char*);
SOAP_FMAC3 ns__DeviceStatusLogList * SOAP_FMAC4 soap_in_ns__DeviceStatusLogList(struct soap*, const char*, ns__DeviceStatusLogList *, const char*);
SOAP_FMAC1 ns__DeviceStatusLogList * SOAP_FMAC2 Server_Soap_instantiate_ns__DeviceStatusLogList(struct soap*, int, const char*, const char*, size_t*);

inline ns__DeviceStatusLogList * soap_new_ns__DeviceStatusLogList(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__DeviceStatusLogList(soap, n, NULL, NULL, NULL);
}

inline ns__DeviceStatusLogList * soap_new_req_ns__DeviceStatusLogList(
	struct soap *soap,
	const ns__ErrorCode& dsllErr)
{
	ns__DeviceStatusLogList *_p = soap_new_ns__DeviceStatusLogList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatusLogList::dsllErr = dsllErr;
	}
	return _p;
}

inline ns__DeviceStatusLogList * soap_new_set_ns__DeviceStatusLogList(
	struct soap *soap,
	const std::vector<ns__DeviceStatusLog> & dsllStatus,
	const ns__ErrorCode& dsllErr)
{
	ns__DeviceStatusLogList *_p = soap_new_ns__DeviceStatusLogList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatusLogList::dsllStatus = dsllStatus;
		_p->ns__DeviceStatusLogList::dsllErr = dsllErr;
	}
	return _p;
}

inline int soap_write_ns__DeviceStatusLogList(struct soap *soap, ns__DeviceStatusLogList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DeviceStatusLogList", p->soap_type() == SOAP_TYPE_ns__DeviceStatusLogList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__DeviceStatusLogList(struct soap *soap, const char *URL, ns__DeviceStatusLogList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DeviceStatusLogList", p->soap_type() == SOAP_TYPE_ns__DeviceStatusLogList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__DeviceStatusLogList(struct soap *soap, const char *URL, ns__DeviceStatusLogList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DeviceStatusLogList", p->soap_type() == SOAP_TYPE_ns__DeviceStatusLogList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__DeviceStatusLogList * SOAP_FMAC4 soap_get_ns__DeviceStatusLogList(struct soap*, ns__DeviceStatusLogList *, const char*, const char*);

inline int soap_read_ns__DeviceStatusLogList(struct soap *soap, ns__DeviceStatusLogList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__DeviceStatusLogList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__DeviceStatusLogList(struct soap *soap, const char *URL, ns__DeviceStatusLogList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__DeviceStatusLogList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__DeviceStatusLogList(struct soap *soap, ns__DeviceStatusLogList *p)
{
	if (soap_read_ns__DeviceStatusLogList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__DeviceStatusLog_DEFINED
#define SOAP_TYPE_ns__DeviceStatusLog_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceStatusLog(struct soap*, const char*, int, const ns__DeviceStatusLog *, const char*);
SOAP_FMAC3 ns__DeviceStatusLog * SOAP_FMAC4 soap_in_ns__DeviceStatusLog(struct soap*, const char*, ns__DeviceStatusLog *, const char*);
SOAP_FMAC1 ns__DeviceStatusLog * SOAP_FMAC2 Server_Soap_instantiate_ns__DeviceStatusLog(struct soap*, int, const char*, const char*, size_t*);

inline ns__DeviceStatusLog * soap_new_ns__DeviceStatusLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__DeviceStatusLog(soap, n, NULL, NULL, NULL);
}

inline ns__DeviceStatusLog * soap_new_req_ns__DeviceStatusLog(
	struct soap *soap,
	const ns__Device& dslDevice,
	const ns__ErrorCode& dslErr)
{
	ns__DeviceStatusLog *_p = soap_new_ns__DeviceStatusLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatusLog::dslDevice = dslDevice;
		_p->ns__DeviceStatusLog::dslErr = dslErr;
	}
	return _p;
}

inline ns__DeviceStatusLog * soap_new_set_ns__DeviceStatusLog(
	struct soap *soap,
	time_t dslDateTime,
	const ns__Device& dslDevice,
	const ns__ErrorCode& dslErr)
{
	ns__DeviceStatusLog *_p = soap_new_ns__DeviceStatusLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatusLog::dslDateTime = dslDateTime;
		_p->ns__DeviceStatusLog::dslDevice = dslDevice;
		_p->ns__DeviceStatusLog::dslErr = dslErr;
	}
	return _p;
}

inline int soap_write_ns__DeviceStatusLog(struct soap *soap, ns__DeviceStatusLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DeviceStatusLog", p->soap_type() == SOAP_TYPE_ns__DeviceStatusLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__DeviceStatusLog(struct soap *soap, const char *URL, ns__DeviceStatusLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DeviceStatusLog", p->soap_type() == SOAP_TYPE_ns__DeviceStatusLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__DeviceStatusLog(struct soap *soap, const char *URL, ns__DeviceStatusLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:DeviceStatusLog", p->soap_type() == SOAP_TYPE_ns__DeviceStatusLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__DeviceStatusLog * SOAP_FMAC4 soap_get_ns__DeviceStatusLog(struct soap*, ns__DeviceStatusLog *, const char*, const char*);

inline int soap_read_ns__DeviceStatusLog(struct soap *soap, ns__DeviceStatusLog *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__DeviceStatusLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__DeviceStatusLog(struct soap *soap, const char *URL, ns__DeviceStatusLog *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__DeviceStatusLog(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__DeviceStatusLog(struct soap *soap, ns__DeviceStatusLog *p)
{
	if (soap_read_ns__DeviceStatusLog(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__UserLog_DEFINED
#define SOAP_TYPE_ns__UserLog_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UserLog(struct soap*, const char*, int, const ns__UserLog *, const char*);
SOAP_FMAC3 ns__UserLog * SOAP_FMAC4 soap_in_ns__UserLog(struct soap*, const char*, ns__UserLog *, const char*);
SOAP_FMAC1 ns__UserLog * SOAP_FMAC2 Server_Soap_instantiate_ns__UserLog(struct soap*, int, const char*, const char*, size_t*);

inline ns__UserLog * soap_new_ns__UserLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__UserLog(soap, n, NULL, NULL, NULL);
}

inline ns__UserLog * soap_new_req_ns__UserLog(
	struct soap *soap,
	const ns__ReportRange& ulRange,
	const ns__User& ulUser)
{
	ns__UserLog *_p = soap_new_ns__UserLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UserLog::ulRange = ulRange;
		_p->ns__UserLog::ulUser = ulUser;
	}
	return _p;
}

inline ns__UserLog * soap_new_set_ns__UserLog(
	struct soap *soap,
	const ns__ReportRange& ulRange,
	const std::string& ulData,
	const ns__User& ulUser)
{
	ns__UserLog *_p = soap_new_ns__UserLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UserLog::ulRange = ulRange;
		_p->ns__UserLog::ulData = ulData;
		_p->ns__UserLog::ulUser = ulUser;
	}
	return _p;
}

inline int soap_write_ns__UserLog(struct soap *soap, ns__UserLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UserLog", p->soap_type() == SOAP_TYPE_ns__UserLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__UserLog(struct soap *soap, const char *URL, ns__UserLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UserLog", p->soap_type() == SOAP_TYPE_ns__UserLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__UserLog(struct soap *soap, const char *URL, ns__UserLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UserLog", p->soap_type() == SOAP_TYPE_ns__UserLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__UserLog * SOAP_FMAC4 soap_get_ns__UserLog(struct soap*, ns__UserLog *, const char*, const char*);

inline int soap_read_ns__UserLog(struct soap *soap, ns__UserLog *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__UserLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__UserLog(struct soap *soap, const char *URL, ns__UserLog *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__UserLog(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__UserLog(struct soap *soap, ns__UserLog *p)
{
	if (soap_read_ns__UserLog(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__ActivityLog_DEFINED
#define SOAP_TYPE_ns__ActivityLog_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ActivityLog(struct soap*, const char*, int, const ns__ActivityLog *, const char*);
SOAP_FMAC3 ns__ActivityLog * SOAP_FMAC4 soap_in_ns__ActivityLog(struct soap*, const char*, ns__ActivityLog *, const char*);
SOAP_FMAC1 ns__ActivityLog * SOAP_FMAC2 Server_Soap_instantiate_ns__ActivityLog(struct soap*, int, const char*, const char*, size_t*);

inline ns__ActivityLog * soap_new_ns__ActivityLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__ActivityLog(soap, n, NULL, NULL, NULL);
}

inline ns__ActivityLog * soap_new_req_ns__ActivityLog(
	struct soap *soap,
	const ns__ReportRange& alRange,
	const ns__Device& alDevice,
	const ns__User& alUser,
	const ns__ErrorCode& alErr)
{
	ns__ActivityLog *_p = soap_new_ns__ActivityLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ActivityLog::alRange = alRange;
		_p->ns__ActivityLog::alDevice = alDevice;
		_p->ns__ActivityLog::alUser = alUser;
		_p->ns__ActivityLog::alErr = alErr;
	}
	return _p;
}

inline ns__ActivityLog * soap_new_set_ns__ActivityLog(
	struct soap *soap,
	const ns__ReportRange& alRange,
	const std::string& alData,
	const ns__Device& alDevice,
	const ns__User& alUser,
	const ns__ErrorCode& alErr)
{
	ns__ActivityLog *_p = soap_new_ns__ActivityLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ActivityLog::alRange = alRange;
		_p->ns__ActivityLog::alData = alData;
		_p->ns__ActivityLog::alDevice = alDevice;
		_p->ns__ActivityLog::alUser = alUser;
		_p->ns__ActivityLog::alErr = alErr;
	}
	return _p;
}

inline int soap_write_ns__ActivityLog(struct soap *soap, ns__ActivityLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ActivityLog", p->soap_type() == SOAP_TYPE_ns__ActivityLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ActivityLog(struct soap *soap, const char *URL, ns__ActivityLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ActivityLog", p->soap_type() == SOAP_TYPE_ns__ActivityLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__ActivityLog(struct soap *soap, const char *URL, ns__ActivityLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ActivityLog", p->soap_type() == SOAP_TYPE_ns__ActivityLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__ActivityLog * SOAP_FMAC4 soap_get_ns__ActivityLog(struct soap*, ns__ActivityLog *, const char*, const char*);

inline int soap_read_ns__ActivityLog(struct soap *soap, ns__ActivityLog *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__ActivityLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ActivityLog(struct soap *soap, const char *URL, ns__ActivityLog *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__ActivityLog(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__ActivityLog(struct soap *soap, ns__ActivityLog *p)
{
	if (soap_read_ns__ActivityLog(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__ReportRange_DEFINED
#define SOAP_TYPE_ns__ReportRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ReportRange(struct soap*, const char*, int, const ns__ReportRange *, const char*);
SOAP_FMAC3 ns__ReportRange * SOAP_FMAC4 soap_in_ns__ReportRange(struct soap*, const char*, ns__ReportRange *, const char*);
SOAP_FMAC1 ns__ReportRange * SOAP_FMAC2 Server_Soap_instantiate_ns__ReportRange(struct soap*, int, const char*, const char*, size_t*);

inline ns__ReportRange * soap_new_ns__ReportRange(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__ReportRange(soap, n, NULL, NULL, NULL);
}

inline ns__ReportRange * soap_new_req_ns__ReportRange(
	struct soap *soap)
{
	ns__ReportRange *_p = soap_new_ns__ReportRange(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__ReportRange * soap_new_set_ns__ReportRange(
	struct soap *soap,
	time_t rrStart,
	time_t rrEnd)
{
	ns__ReportRange *_p = soap_new_ns__ReportRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ReportRange::rrStart = rrStart;
		_p->ns__ReportRange::rrEnd = rrEnd;
	}
	return _p;
}

inline int soap_write_ns__ReportRange(struct soap *soap, ns__ReportRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ReportRange", p->soap_type() == SOAP_TYPE_ns__ReportRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ReportRange(struct soap *soap, const char *URL, ns__ReportRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ReportRange", p->soap_type() == SOAP_TYPE_ns__ReportRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__ReportRange(struct soap *soap, const char *URL, ns__ReportRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ReportRange", p->soap_type() == SOAP_TYPE_ns__ReportRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__ReportRange * SOAP_FMAC4 soap_get_ns__ReportRange(struct soap*, ns__ReportRange *, const char*, const char*);

inline int soap_read_ns__ReportRange(struct soap *soap, ns__ReportRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__ReportRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ReportRange(struct soap *soap, const char *URL, ns__ReportRange *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__ReportRange(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__ReportRange(struct soap *soap, ns__ReportRange *p)
{
	if (soap_read_ns__ReportRange(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__Device_DEFINED
#define SOAP_TYPE_ns__Device_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Device(struct soap*, const char*, int, const ns__Device *, const char*);
SOAP_FMAC3 ns__Device * SOAP_FMAC4 soap_in_ns__Device(struct soap*, const char*, ns__Device *, const char*);
SOAP_FMAC1 ns__Device * SOAP_FMAC2 Server_Soap_instantiate_ns__Device(struct soap*, int, const char*, const char*, size_t*);

inline ns__Device * soap_new_ns__Device(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__Device(soap, n, NULL, NULL, NULL);
}

inline ns__Device * soap_new_req_ns__Device(
	struct soap *soap,
	const ns__IP& dIP,
	const ns__Camera& dCamera,
	const ns__GPS& dGPS,
	const ns__Picture& dPicture,
	const ns__ErrorCode& dErr)
{
	ns__Device *_p = soap_new_ns__Device(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Device::dIP = dIP;
		_p->ns__Device::dCamera = dCamera;
		_p->ns__Device::dGPS = dGPS;
		_p->ns__Device::dPicture = dPicture;
		_p->ns__Device::dErr = dErr;
	}
	return _p;
}

inline ns__Device * soap_new_set_ns__Device(
	struct soap *soap,
	int dSerialNumber,
	enum ns__DeviceModel dModel,
	const std::string& dName,
	const std::string& dNikeName,
	const std::string& dLocation,
	const std::string& dCity,
	int dSocket,
	const std::string& dDNSAddress,
	const ns__IP& dIP,
	int dPort,
	time_t dDateTime,
	time_t dDDateTime,
	const ns__Camera& dCamera,
	const ns__GPS& dGPS,
	bool dReset,
	int dSamplingTime,
	double dTransPower,
	double dTableCapacity,
	double dPOK,
	double dPTotal,
	double dPR,
	double dPS,
	double dPT,
	double dQR,
	double dQS,
	double dQT,
	const std::string& dKeyName,
	const ns__Picture& dPicture,
	const std::string& dCustomCommand,
	const std::vector<bool> & dRelays,
	const std::vector<enum ns__RequestType> & dRequests,
	const std::vector<ns__SensorExtension> & dSensors,
	int dSmsTerm,
	bool dSms,
	time_t dSmsTime,
	const ns__ErrorCode& dErr)
{
	ns__Device *_p = soap_new_ns__Device(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Device::dSerialNumber = dSerialNumber;
		_p->ns__Device::dModel = dModel;
		_p->ns__Device::dName = dName;
		_p->ns__Device::dNikeName = dNikeName;
		_p->ns__Device::dLocation = dLocation;
		_p->ns__Device::dCity = dCity;
		_p->ns__Device::dSocket = dSocket;
		_p->ns__Device::dDNSAddress = dDNSAddress;
		_p->ns__Device::dIP = dIP;
		_p->ns__Device::dPort = dPort;
		_p->ns__Device::dDateTime = dDateTime;
		_p->ns__Device::dDDateTime = dDDateTime;
		_p->ns__Device::dCamera = dCamera;
		_p->ns__Device::dGPS = dGPS;
		_p->ns__Device::dReset = dReset;
		_p->ns__Device::dSamplingTime = dSamplingTime;
		_p->ns__Device::dTransPower = dTransPower;
		_p->ns__Device::dTableCapacity = dTableCapacity;
		_p->ns__Device::dPOK = dPOK;
		_p->ns__Device::dPTotal = dPTotal;
		_p->ns__Device::dPR = dPR;
		_p->ns__Device::dPS = dPS;
		_p->ns__Device::dPT = dPT;
		_p->ns__Device::dQR = dQR;
		_p->ns__Device::dQS = dQS;
		_p->ns__Device::dQT = dQT;
		_p->ns__Device::dKeyName = dKeyName;
		_p->ns__Device::dPicture = dPicture;
		_p->ns__Device::dCustomCommand = dCustomCommand;
		_p->ns__Device::dRelays = dRelays;
		_p->ns__Device::dRequests = dRequests;
		_p->ns__Device::dSensors = dSensors;
		_p->ns__Device::dSmsTerm = dSmsTerm;
		_p->ns__Device::dSms = dSms;
		_p->ns__Device::dSmsTime = dSmsTime;
		_p->ns__Device::dErr = dErr;
	}
	return _p;
}

inline int soap_write_ns__Device(struct soap *soap, ns__Device const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Device", p->soap_type() == SOAP_TYPE_ns__Device ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__Device(struct soap *soap, const char *URL, ns__Device const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Device", p->soap_type() == SOAP_TYPE_ns__Device ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__Device(struct soap *soap, const char *URL, ns__Device const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Device", p->soap_type() == SOAP_TYPE_ns__Device ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__Device * SOAP_FMAC4 soap_get_ns__Device(struct soap*, ns__Device *, const char*, const char*);

inline int soap_read_ns__Device(struct soap *soap, ns__Device *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__Device(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__Device(struct soap *soap, const char *URL, ns__Device *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__Device(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__Device(struct soap *soap, ns__Device *p)
{
	if (soap_read_ns__Device(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__Picture_DEFINED
#define SOAP_TYPE_ns__Picture_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Picture(struct soap*, const char*, int, const ns__Picture *, const char*);
SOAP_FMAC3 ns__Picture * SOAP_FMAC4 soap_in_ns__Picture(struct soap*, const char*, ns__Picture *, const char*);
SOAP_FMAC1 ns__Picture * SOAP_FMAC2 Server_Soap_instantiate_ns__Picture(struct soap*, int, const char*, const char*, size_t*);

inline ns__Picture * soap_new_ns__Picture(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__Picture(soap, n, NULL, NULL, NULL);
}

inline ns__Picture * soap_new_req_ns__Picture(
	struct soap *soap)
{
	ns__Picture *_p = soap_new_ns__Picture(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__Picture * soap_new_set_ns__Picture(
	struct soap *soap,
	const std::string& pName,
	int pSize,
	int pPartSize,
	int pPartNo,
	int pCRC,
	const std::vector<ns__PicturePart> & pParts)
{
	ns__Picture *_p = soap_new_ns__Picture(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Picture::pName = pName;
		_p->ns__Picture::pSize = pSize;
		_p->ns__Picture::pPartSize = pPartSize;
		_p->ns__Picture::pPartNo = pPartNo;
		_p->ns__Picture::pCRC = pCRC;
		_p->ns__Picture::pParts = pParts;
	}
	return _p;
}

inline int soap_write_ns__Picture(struct soap *soap, ns__Picture const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Picture", p->soap_type() == SOAP_TYPE_ns__Picture ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__Picture(struct soap *soap, const char *URL, ns__Picture const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Picture", p->soap_type() == SOAP_TYPE_ns__Picture ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__Picture(struct soap *soap, const char *URL, ns__Picture const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Picture", p->soap_type() == SOAP_TYPE_ns__Picture ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__Picture * SOAP_FMAC4 soap_get_ns__Picture(struct soap*, ns__Picture *, const char*, const char*);

inline int soap_read_ns__Picture(struct soap *soap, ns__Picture *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__Picture(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__Picture(struct soap *soap, const char *URL, ns__Picture *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__Picture(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__Picture(struct soap *soap, ns__Picture *p)
{
	if (soap_read_ns__Picture(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__PicturePart_DEFINED
#define SOAP_TYPE_ns__PicturePart_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__PicturePart(struct soap*, const char*, int, const ns__PicturePart *, const char*);
SOAP_FMAC3 ns__PicturePart * SOAP_FMAC4 soap_in_ns__PicturePart(struct soap*, const char*, ns__PicturePart *, const char*);
SOAP_FMAC1 ns__PicturePart * SOAP_FMAC2 Server_Soap_instantiate_ns__PicturePart(struct soap*, int, const char*, const char*, size_t*);

inline ns__PicturePart * soap_new_ns__PicturePart(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__PicturePart(soap, n, NULL, NULL, NULL);
}

inline ns__PicturePart * soap_new_req_ns__PicturePart(
	struct soap *soap)
{
	ns__PicturePart *_p = soap_new_ns__PicturePart(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__PicturePart * soap_new_set_ns__PicturePart(
	struct soap *soap,
	int ppIndex,
	const std::string& ppData,
	int ppCRC)
{
	ns__PicturePart *_p = soap_new_ns__PicturePart(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__PicturePart::ppIndex = ppIndex;
		_p->ns__PicturePart::ppData = ppData;
		_p->ns__PicturePart::ppCRC = ppCRC;
	}
	return _p;
}

inline int soap_write_ns__PicturePart(struct soap *soap, ns__PicturePart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:PicturePart", p->soap_type() == SOAP_TYPE_ns__PicturePart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__PicturePart(struct soap *soap, const char *URL, ns__PicturePart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:PicturePart", p->soap_type() == SOAP_TYPE_ns__PicturePart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__PicturePart(struct soap *soap, const char *URL, ns__PicturePart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:PicturePart", p->soap_type() == SOAP_TYPE_ns__PicturePart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__PicturePart * SOAP_FMAC4 soap_get_ns__PicturePart(struct soap*, ns__PicturePart *, const char*, const char*);

inline int soap_read_ns__PicturePart(struct soap *soap, ns__PicturePart *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__PicturePart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__PicturePart(struct soap *soap, const char *URL, ns__PicturePart *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__PicturePart(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__PicturePart(struct soap *soap, ns__PicturePart *p)
{
	if (soap_read_ns__PicturePart(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__Camera_DEFINED
#define SOAP_TYPE_ns__Camera_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Camera(struct soap*, const char*, int, const ns__Camera *, const char*);
SOAP_FMAC3 ns__Camera * SOAP_FMAC4 soap_in_ns__Camera(struct soap*, const char*, ns__Camera *, const char*);
SOAP_FMAC1 ns__Camera * SOAP_FMAC2 Server_Soap_instantiate_ns__Camera(struct soap*, int, const char*, const char*, size_t*);

inline ns__Camera * soap_new_ns__Camera(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__Camera(soap, n, NULL, NULL, NULL);
}

inline ns__Camera * soap_new_req_ns__Camera(
	struct soap *soap,
	const ns__IP& cIP,
	const ns__ErrorCode& cErr)
{
	ns__Camera *_p = soap_new_ns__Camera(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Camera::cIP = cIP;
		_p->ns__Camera::cErr = cErr;
	}
	return _p;
}

inline ns__Camera * soap_new_set_ns__Camera(
	struct soap *soap,
	int cSocket,
	const ns__IP& cIP,
	int cPort,
	const ns__ErrorCode& cErr)
{
	ns__Camera *_p = soap_new_ns__Camera(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Camera::cSocket = cSocket;
		_p->ns__Camera::cIP = cIP;
		_p->ns__Camera::cPort = cPort;
		_p->ns__Camera::cErr = cErr;
	}
	return _p;
}

inline int soap_write_ns__Camera(struct soap *soap, ns__Camera const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Camera", p->soap_type() == SOAP_TYPE_ns__Camera ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__Camera(struct soap *soap, const char *URL, ns__Camera const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Camera", p->soap_type() == SOAP_TYPE_ns__Camera ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__Camera(struct soap *soap, const char *URL, ns__Camera const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Camera", p->soap_type() == SOAP_TYPE_ns__Camera ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__Camera * SOAP_FMAC4 soap_get_ns__Camera(struct soap*, ns__Camera *, const char*, const char*);

inline int soap_read_ns__Camera(struct soap *soap, ns__Camera *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__Camera(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__Camera(struct soap *soap, const char *URL, ns__Camera *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__Camera(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__Camera(struct soap *soap, ns__Camera *p)
{
	if (soap_read_ns__Camera(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SensorExtension_DEFINED
#define SOAP_TYPE_ns__SensorExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SensorExtension(struct soap*, const char*, int, const ns__SensorExtension *, const char*);
SOAP_FMAC3 ns__SensorExtension * SOAP_FMAC4 soap_in_ns__SensorExtension(struct soap*, const char*, ns__SensorExtension *, const char*);
SOAP_FMAC1 ns__SensorExtension * SOAP_FMAC2 Server_Soap_instantiate_ns__SensorExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns__SensorExtension * soap_new_ns__SensorExtension(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__SensorExtension(soap, n, NULL, NULL, NULL);
}

inline ns__SensorExtension * soap_new_req_ns__SensorExtension(
	struct soap *soap)
{
	ns__SensorExtension *_p = soap_new_ns__SensorExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__SensorExtension * soap_new_set_ns__SensorExtension(
	struct soap *soap,
	enum ns__SensorName seName,
	const std::vector<double> & seVal)
{
	ns__SensorExtension *_p = soap_new_ns__SensorExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__SensorExtension::seName = seName;
		_p->ns__SensorExtension::seVal = seVal;
	}
	return _p;
}

inline int soap_write_ns__SensorExtension(struct soap *soap, ns__SensorExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SensorExtension", p->soap_type() == SOAP_TYPE_ns__SensorExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SensorExtension(struct soap *soap, const char *URL, ns__SensorExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SensorExtension", p->soap_type() == SOAP_TYPE_ns__SensorExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SensorExtension(struct soap *soap, const char *URL, ns__SensorExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SensorExtension", p->soap_type() == SOAP_TYPE_ns__SensorExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__SensorExtension * SOAP_FMAC4 soap_get_ns__SensorExtension(struct soap*, ns__SensorExtension *, const char*, const char*);

inline int soap_read_ns__SensorExtension(struct soap *soap, ns__SensorExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__SensorExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SensorExtension(struct soap *soap, const char *URL, ns__SensorExtension *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SensorExtension(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SensorExtension(struct soap *soap, ns__SensorExtension *p)
{
	if (soap_read_ns__SensorExtension(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__Sensor_DEFINED
#define SOAP_TYPE_ns__Sensor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Sensor(struct soap*, const char*, int, const ns__Sensor *, const char*);
SOAP_FMAC3 ns__Sensor * SOAP_FMAC4 soap_in_ns__Sensor(struct soap*, const char*, ns__Sensor *, const char*);
SOAP_FMAC1 ns__Sensor * SOAP_FMAC2 Server_Soap_instantiate_ns__Sensor(struct soap*, int, const char*, const char*, size_t*);

inline ns__Sensor * soap_new_ns__Sensor(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__Sensor(soap, n, NULL, NULL, NULL);
}

inline ns__Sensor * soap_new_req_ns__Sensor(
	struct soap *soap,
	const ns__ErrorCode& sErr)
{
	ns__Sensor *_p = soap_new_ns__Sensor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Sensor::sErr = sErr;
	}
	return _p;
}

inline ns__Sensor * soap_new_set_ns__Sensor(
	struct soap *soap,
	const std::string& sNkName,
	double sVal,
	int sMin,
	int sMax,
	enum ns__SensorType sType,
	const ns__ErrorCode& sErr)
{
	ns__Sensor *_p = soap_new_ns__Sensor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Sensor::sNkName = sNkName;
		_p->ns__Sensor::sVal = sVal;
		_p->ns__Sensor::sMin = sMin;
		_p->ns__Sensor::sMax = sMax;
		_p->ns__Sensor::sType = sType;
		_p->ns__Sensor::sErr = sErr;
	}
	return _p;
}

inline int soap_write_ns__Sensor(struct soap *soap, ns__Sensor const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Sensor", p->soap_type() == SOAP_TYPE_ns__Sensor ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__Sensor(struct soap *soap, const char *URL, ns__Sensor const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Sensor", p->soap_type() == SOAP_TYPE_ns__Sensor ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__Sensor(struct soap *soap, const char *URL, ns__Sensor const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Sensor", p->soap_type() == SOAP_TYPE_ns__Sensor ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__Sensor * SOAP_FMAC4 soap_get_ns__Sensor(struct soap*, ns__Sensor *, const char*, const char*);

inline int soap_read_ns__Sensor(struct soap *soap, ns__Sensor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__Sensor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__Sensor(struct soap *soap, const char *URL, ns__Sensor *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__Sensor(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__Sensor(struct soap *soap, ns__Sensor *p)
{
	if (soap_read_ns__Sensor(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__CalibrationList_DEFINED
#define SOAP_TYPE_ns__CalibrationList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CalibrationList(struct soap*, const char*, int, const ns__CalibrationList *, const char*);
SOAP_FMAC3 ns__CalibrationList * SOAP_FMAC4 soap_in_ns__CalibrationList(struct soap*, const char*, ns__CalibrationList *, const char*);
SOAP_FMAC1 ns__CalibrationList * SOAP_FMAC2 Server_Soap_instantiate_ns__CalibrationList(struct soap*, int, const char*, const char*, size_t*);

inline ns__CalibrationList * soap_new_ns__CalibrationList(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__CalibrationList(soap, n, NULL, NULL, NULL);
}

inline ns__CalibrationList * soap_new_req_ns__CalibrationList(
	struct soap *soap,
	const ns__ErrorCode& clErr)
{
	ns__CalibrationList *_p = soap_new_ns__CalibrationList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__CalibrationList::clErr = clErr;
	}
	return _p;
}

inline ns__CalibrationList * soap_new_set_ns__CalibrationList(
	struct soap *soap,
	const std::vector<ns__Calibration> & clVoltage,
	const std::vector<ns__Calibration> & clAmpere,
	const std::vector<ns__Calibration> & clCosq,
	const ns__ErrorCode& clErr)
{
	ns__CalibrationList *_p = soap_new_ns__CalibrationList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__CalibrationList::clVoltage = clVoltage;
		_p->ns__CalibrationList::clAmpere = clAmpere;
		_p->ns__CalibrationList::clCosq = clCosq;
		_p->ns__CalibrationList::clErr = clErr;
	}
	return _p;
}

inline int soap_write_ns__CalibrationList(struct soap *soap, ns__CalibrationList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:CalibrationList", p->soap_type() == SOAP_TYPE_ns__CalibrationList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__CalibrationList(struct soap *soap, const char *URL, ns__CalibrationList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:CalibrationList", p->soap_type() == SOAP_TYPE_ns__CalibrationList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__CalibrationList(struct soap *soap, const char *URL, ns__CalibrationList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:CalibrationList", p->soap_type() == SOAP_TYPE_ns__CalibrationList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__CalibrationList * SOAP_FMAC4 soap_get_ns__CalibrationList(struct soap*, ns__CalibrationList *, const char*, const char*);

inline int soap_read_ns__CalibrationList(struct soap *soap, ns__CalibrationList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__CalibrationList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__CalibrationList(struct soap *soap, const char *URL, ns__CalibrationList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__CalibrationList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__CalibrationList(struct soap *soap, ns__CalibrationList *p)
{
	if (soap_read_ns__CalibrationList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__Calibration_DEFINED
#define SOAP_TYPE_ns__Calibration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Calibration(struct soap*, const char*, int, const ns__Calibration *, const char*);
SOAP_FMAC3 ns__Calibration * SOAP_FMAC4 soap_in_ns__Calibration(struct soap*, const char*, ns__Calibration *, const char*);
SOAP_FMAC1 ns__Calibration * SOAP_FMAC2 Server_Soap_instantiate_ns__Calibration(struct soap*, int, const char*, const char*, size_t*);

inline ns__Calibration * soap_new_ns__Calibration(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__Calibration(soap, n, NULL, NULL, NULL);
}

inline ns__Calibration * soap_new_req_ns__Calibration(
	struct soap *soap)
{
	ns__Calibration *_p = soap_new_ns__Calibration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__Calibration * soap_new_set_ns__Calibration(
	struct soap *soap,
	double cOffset,
	double cZero,
	double cSpan,
	double cMin,
	double cMax)
{
	ns__Calibration *_p = soap_new_ns__Calibration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Calibration::cOffset = cOffset;
		_p->ns__Calibration::cZero = cZero;
		_p->ns__Calibration::cSpan = cSpan;
		_p->ns__Calibration::cMin = cMin;
		_p->ns__Calibration::cMax = cMax;
	}
	return _p;
}

inline int soap_write_ns__Calibration(struct soap *soap, ns__Calibration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Calibration", p->soap_type() == SOAP_TYPE_ns__Calibration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__Calibration(struct soap *soap, const char *URL, ns__Calibration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Calibration", p->soap_type() == SOAP_TYPE_ns__Calibration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__Calibration(struct soap *soap, const char *URL, ns__Calibration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:Calibration", p->soap_type() == SOAP_TYPE_ns__Calibration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__Calibration * SOAP_FMAC4 soap_get_ns__Calibration(struct soap*, ns__Calibration *, const char*, const char*);

inline int soap_read_ns__Calibration(struct soap *soap, ns__Calibration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__Calibration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__Calibration(struct soap *soap, const char *URL, ns__Calibration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__Calibration(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__Calibration(struct soap *soap, ns__Calibration *p)
{
	if (soap_read_ns__Calibration(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GPS_DEFINED
#define SOAP_TYPE_ns__GPS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GPS(struct soap*, const char*, int, const ns__GPS *, const char*);
SOAP_FMAC3 ns__GPS * SOAP_FMAC4 soap_in_ns__GPS(struct soap*, const char*, ns__GPS *, const char*);
SOAP_FMAC1 ns__GPS * SOAP_FMAC2 Server_Soap_instantiate_ns__GPS(struct soap*, int, const char*, const char*, size_t*);

inline ns__GPS * soap_new_ns__GPS(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GPS(soap, n, NULL, NULL, NULL);
}

inline ns__GPS * soap_new_req_ns__GPS(
	struct soap *soap)
{
	ns__GPS *_p = soap_new_ns__GPS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__GPS * soap_new_set_ns__GPS(
	struct soap *soap,
	double gX,
	double gY)
{
	ns__GPS *_p = soap_new_ns__GPS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__GPS::gX = gX;
		_p->ns__GPS::gY = gY;
	}
	return _p;
}

inline int soap_write_ns__GPS(struct soap *soap, ns__GPS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:GPS", p->soap_type() == SOAP_TYPE_ns__GPS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GPS(struct soap *soap, const char *URL, ns__GPS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:GPS", p->soap_type() == SOAP_TYPE_ns__GPS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GPS(struct soap *soap, const char *URL, ns__GPS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:GPS", p->soap_type() == SOAP_TYPE_ns__GPS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__GPS * SOAP_FMAC4 soap_get_ns__GPS(struct soap*, ns__GPS *, const char*, const char*);

inline int soap_read_ns__GPS(struct soap *soap, ns__GPS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__GPS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GPS(struct soap *soap, const char *URL, ns__GPS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GPS(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GPS(struct soap *soap, ns__GPS *p)
{
	if (soap_read_ns__GPS(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__IP_DEFINED
#define SOAP_TYPE_ns__IP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__IP(struct soap*, const char*, int, const ns__IP *, const char*);
SOAP_FMAC3 ns__IP * SOAP_FMAC4 soap_in_ns__IP(struct soap*, const char*, ns__IP *, const char*);
SOAP_FMAC1 ns__IP * SOAP_FMAC2 Server_Soap_instantiate_ns__IP(struct soap*, int, const char*, const char*, size_t*);

inline ns__IP * soap_new_ns__IP(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__IP(soap, n, NULL, NULL, NULL);
}

inline ns__IP * soap_new_req_ns__IP(
	struct soap *soap)
{
	ns__IP *_p = soap_new_ns__IP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__IP * soap_new_set_ns__IP(
	struct soap *soap,
	int ip1,
	int ip2,
	int ip3,
	int ip4)
{
	ns__IP *_p = soap_new_ns__IP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__IP::ip1 = ip1;
		_p->ns__IP::ip2 = ip2;
		_p->ns__IP::ip3 = ip3;
		_p->ns__IP::ip4 = ip4;
	}
	return _p;
}

inline int soap_write_ns__IP(struct soap *soap, ns__IP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:IP", p->soap_type() == SOAP_TYPE_ns__IP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__IP(struct soap *soap, const char *URL, ns__IP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:IP", p->soap_type() == SOAP_TYPE_ns__IP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__IP(struct soap *soap, const char *URL, ns__IP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:IP", p->soap_type() == SOAP_TYPE_ns__IP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__IP * SOAP_FMAC4 soap_get_ns__IP(struct soap*, ns__IP *, const char*, const char*);

inline int soap_read_ns__IP(struct soap *soap, ns__IP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__IP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__IP(struct soap *soap, const char *URL, ns__IP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__IP(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__IP(struct soap *soap, ns__IP *p)
{
	if (soap_read_ns__IP(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__UsersList_DEFINED
#define SOAP_TYPE_ns__UsersList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UsersList(struct soap*, const char*, int, const ns__UsersList *, const char*);
SOAP_FMAC3 ns__UsersList * SOAP_FMAC4 soap_in_ns__UsersList(struct soap*, const char*, ns__UsersList *, const char*);
SOAP_FMAC1 ns__UsersList * SOAP_FMAC2 Server_Soap_instantiate_ns__UsersList(struct soap*, int, const char*, const char*, size_t*);

inline ns__UsersList * soap_new_ns__UsersList(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__UsersList(soap, n, NULL, NULL, NULL);
}

inline ns__UsersList * soap_new_req_ns__UsersList(
	struct soap *soap,
	const ns__ErrorCode& ulErr)
{
	ns__UsersList *_p = soap_new_ns__UsersList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UsersList::ulErr = ulErr;
	}
	return _p;
}

inline ns__UsersList * soap_new_set_ns__UsersList(
	struct soap *soap,
	const std::vector<ns__User> & ulUsers,
	const ns__ErrorCode& ulErr)
{
	ns__UsersList *_p = soap_new_ns__UsersList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UsersList::ulUsers = ulUsers;
		_p->ns__UsersList::ulErr = ulErr;
	}
	return _p;
}

inline int soap_write_ns__UsersList(struct soap *soap, ns__UsersList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UsersList", p->soap_type() == SOAP_TYPE_ns__UsersList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__UsersList(struct soap *soap, const char *URL, ns__UsersList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UsersList", p->soap_type() == SOAP_TYPE_ns__UsersList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__UsersList(struct soap *soap, const char *URL, ns__UsersList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UsersList", p->soap_type() == SOAP_TYPE_ns__UsersList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__UsersList * SOAP_FMAC4 soap_get_ns__UsersList(struct soap*, ns__UsersList *, const char*, const char*);

inline int soap_read_ns__UsersList(struct soap *soap, ns__UsersList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__UsersList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__UsersList(struct soap *soap, const char *URL, ns__UsersList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__UsersList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__UsersList(struct soap *soap, ns__UsersList *p)
{
	if (soap_read_ns__UsersList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__User_DEFINED
#define SOAP_TYPE_ns__User_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__User(struct soap*, const char*, int, const ns__User *, const char*);
SOAP_FMAC3 ns__User * SOAP_FMAC4 soap_in_ns__User(struct soap*, const char*, ns__User *, const char*);
SOAP_FMAC1 ns__User * SOAP_FMAC2 Server_Soap_instantiate_ns__User(struct soap*, int, const char*, const char*, size_t*);

inline ns__User * soap_new_ns__User(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__User(soap, n, NULL, NULL, NULL);
}

inline ns__User * soap_new_req_ns__User(
	struct soap *soap,
	const ns__ErrorCode& uErr)
{
	ns__User *_p = soap_new_ns__User(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__User::uErr = uErr;
	}
	return _p;
}

inline ns__User * soap_new_set_ns__User(
	struct soap *soap,
	int uId,
	const std::string& uName,
	const std::string& uPassword,
	const std::string& uRePassword,
	const std::string& uFirstName,
	const std::string& uLastName,
	enum ns__UserType uType,
	const std::string& uKey,
	const ns__ErrorCode& uErr)
{
	ns__User *_p = soap_new_ns__User(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__User::uId = uId;
		_p->ns__User::uName = uName;
		_p->ns__User::uPassword = uPassword;
		_p->ns__User::uRePassword = uRePassword;
		_p->ns__User::uFirstName = uFirstName;
		_p->ns__User::uLastName = uLastName;
		_p->ns__User::uType = uType;
		_p->ns__User::uKey = uKey;
		_p->ns__User::uErr = uErr;
	}
	return _p;
}

inline int soap_write_ns__User(struct soap *soap, ns__User const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:User", p->soap_type() == SOAP_TYPE_ns__User ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__User(struct soap *soap, const char *URL, ns__User const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:User", p->soap_type() == SOAP_TYPE_ns__User ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__User(struct soap *soap, const char *URL, ns__User const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:User", p->soap_type() == SOAP_TYPE_ns__User ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__User * SOAP_FMAC4 soap_get_ns__User(struct soap*, ns__User *, const char*, const char*);

inline int soap_read_ns__User(struct soap *soap, ns__User *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__User(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__User(struct soap *soap, const char *URL, ns__User *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__User(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__User(struct soap *soap, ns__User *p)
{
	if (soap_read_ns__User(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__ErrorCode_DEFINED
#define SOAP_TYPE_ns__ErrorCode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ErrorCode(struct soap*, const char*, int, const ns__ErrorCode *, const char*);
SOAP_FMAC3 ns__ErrorCode * SOAP_FMAC4 soap_in_ns__ErrorCode(struct soap*, const char*, ns__ErrorCode *, const char*);
SOAP_FMAC1 ns__ErrorCode * SOAP_FMAC2 Server_Soap_instantiate_ns__ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline ns__ErrorCode * soap_new_ns__ErrorCode(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__ErrorCode(soap, n, NULL, NULL, NULL);
}

inline ns__ErrorCode * soap_new_req_ns__ErrorCode(
	struct soap *soap)
{
	ns__ErrorCode *_p = soap_new_ns__ErrorCode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__ErrorCode * soap_new_set_ns__ErrorCode(
	struct soap *soap,
	int eNo,
	const std::string& eMsg,
	enum ns__SettingLevel eType)
{
	ns__ErrorCode *_p = soap_new_ns__ErrorCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ErrorCode::eNo = eNo;
		_p->ns__ErrorCode::eMsg = eMsg;
		_p->ns__ErrorCode::eType = eType;
	}
	return _p;
}

inline int soap_write_ns__ErrorCode(struct soap *soap, ns__ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ErrorCode", p->soap_type() == SOAP_TYPE_ns__ErrorCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ErrorCode(struct soap *soap, const char *URL, ns__ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ErrorCode", p->soap_type() == SOAP_TYPE_ns__ErrorCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__ErrorCode(struct soap *soap, const char *URL, ns__ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ErrorCode", p->soap_type() == SOAP_TYPE_ns__ErrorCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns__ErrorCode * SOAP_FMAC4 soap_get_ns__ErrorCode(struct soap*, ns__ErrorCode *, const char*, const char*);

inline int soap_read_ns__ErrorCode(struct soap *soap, ns__ErrorCode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns__ErrorCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ErrorCode(struct soap *soap, const char *URL, ns__ErrorCode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__ErrorCode(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__ErrorCode(struct soap *soap, ns__ErrorCode *p)
{
	if (soap_read_ns__ErrorCode(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__string_DEFINED
#define SOAP_TYPE_xsd__string_DEFINED

inline void soap_default_xsd__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap*, const std::string *);

#define soap_xsd__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, std::string*, const char*);

#define Server_Soap_instantiate_xsd__string Server_Soap_instantiate_std__string


#define soap_new_xsd__string soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__string(soap, p, "xsd:string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__string(soap, p, "xsd:string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__string(soap, p, "xsd:string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__string(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 Server_Soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_std__string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 Server_Soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 Server_Soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 Server_Soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 Server_Soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 Server_Soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_ns__ChangeDeviceName_DEFINED
#define SOAP_TYPE_ns__ChangeDeviceName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ChangeDeviceName(struct soap*, struct ns__ChangeDeviceName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ChangeDeviceName(struct soap*, const struct ns__ChangeDeviceName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ChangeDeviceName(struct soap*, const char*, int, const struct ns__ChangeDeviceName *, const char*);
SOAP_FMAC3 struct ns__ChangeDeviceName * SOAP_FMAC4 soap_in_ns__ChangeDeviceName(struct soap*, const char*, struct ns__ChangeDeviceName *, const char*);
SOAP_FMAC1 struct ns__ChangeDeviceName * SOAP_FMAC2 Server_Soap_instantiate_ns__ChangeDeviceName(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__ChangeDeviceName * soap_new_ns__ChangeDeviceName(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__ChangeDeviceName(soap, n, NULL, NULL, NULL);
}

inline struct ns__ChangeDeviceName * soap_new_req_ns__ChangeDeviceName(
	struct soap *soap,
	const ns__User& requestUser,
	int deviceSerialNumber,
	const std::string& newCityName,
	const std::string& newLocationName,
	const std::string& newDeviceName)
{
	struct ns__ChangeDeviceName *_p = soap_new_ns__ChangeDeviceName(soap);
	if (_p)
	{	soap_default_ns__ChangeDeviceName(soap, _p);
		_p->requestUser = requestUser;
		_p->deviceSerialNumber = deviceSerialNumber;
		_p->newCityName = newCityName;
		_p->newLocationName = newLocationName;
		_p->newDeviceName = newDeviceName;
	}
	return _p;
}

inline struct ns__ChangeDeviceName * soap_new_set_ns__ChangeDeviceName(
	struct soap *soap,
	const ns__User& requestUser,
	int deviceSerialNumber,
	const std::string& newCityName,
	const std::string& newLocationName,
	const std::string& newDeviceName)
{
	struct ns__ChangeDeviceName *_p = soap_new_ns__ChangeDeviceName(soap);
	if (_p)
	{	soap_default_ns__ChangeDeviceName(soap, _p);
		_p->requestUser = requestUser;
		_p->deviceSerialNumber = deviceSerialNumber;
		_p->newCityName = newCityName;
		_p->newLocationName = newLocationName;
		_p->newDeviceName = newDeviceName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ChangeDeviceName(struct soap*, const struct ns__ChangeDeviceName *, const char*, const char*);

inline int soap_write_ns__ChangeDeviceName(struct soap *soap, struct ns__ChangeDeviceName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__ChangeDeviceName(soap, p), 0) || soap_put_ns__ChangeDeviceName(soap, p, "ns:ChangeDeviceName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ChangeDeviceName(struct soap *soap, const char *URL, struct ns__ChangeDeviceName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__ChangeDeviceName(soap, p), 0) || soap_put_ns__ChangeDeviceName(soap, p, "ns:ChangeDeviceName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__ChangeDeviceName(struct soap *soap, const char *URL, struct ns__ChangeDeviceName const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__ChangeDeviceName(soap, p), 0) || soap_put_ns__ChangeDeviceName(soap, p, "ns:ChangeDeviceName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__ChangeDeviceName * SOAP_FMAC4 soap_get_ns__ChangeDeviceName(struct soap*, struct ns__ChangeDeviceName *, const char*, const char*);

inline int soap_read_ns__ChangeDeviceName(struct soap *soap, struct ns__ChangeDeviceName *p)
{
	if (p)
	{	soap_default_ns__ChangeDeviceName(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__ChangeDeviceName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ChangeDeviceName(struct soap *soap, const char *URL, struct ns__ChangeDeviceName *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__ChangeDeviceName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__ChangeDeviceName(struct soap *soap, struct ns__ChangeDeviceName *p)
{
	if (soap_read_ns__ChangeDeviceName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__ChangeLocationName_DEFINED
#define SOAP_TYPE_ns__ChangeLocationName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ChangeLocationName(struct soap*, struct ns__ChangeLocationName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ChangeLocationName(struct soap*, const struct ns__ChangeLocationName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ChangeLocationName(struct soap*, const char*, int, const struct ns__ChangeLocationName *, const char*);
SOAP_FMAC3 struct ns__ChangeLocationName * SOAP_FMAC4 soap_in_ns__ChangeLocationName(struct soap*, const char*, struct ns__ChangeLocationName *, const char*);
SOAP_FMAC1 struct ns__ChangeLocationName * SOAP_FMAC2 Server_Soap_instantiate_ns__ChangeLocationName(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__ChangeLocationName * soap_new_ns__ChangeLocationName(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__ChangeLocationName(soap, n, NULL, NULL, NULL);
}

inline struct ns__ChangeLocationName * soap_new_req_ns__ChangeLocationName(
	struct soap *soap,
	const ns__User& requestUser,
	const std::string& oldCityName,
	const std::string& newCityName,
	const std::string& oldLocationName,
	const std::string& newLocationName)
{
	struct ns__ChangeLocationName *_p = soap_new_ns__ChangeLocationName(soap);
	if (_p)
	{	soap_default_ns__ChangeLocationName(soap, _p);
		_p->requestUser = requestUser;
		_p->oldCityName = oldCityName;
		_p->newCityName = newCityName;
		_p->oldLocationName = oldLocationName;
		_p->newLocationName = newLocationName;
	}
	return _p;
}

inline struct ns__ChangeLocationName * soap_new_set_ns__ChangeLocationName(
	struct soap *soap,
	const ns__User& requestUser,
	const std::string& oldCityName,
	const std::string& newCityName,
	const std::string& oldLocationName,
	const std::string& newLocationName)
{
	struct ns__ChangeLocationName *_p = soap_new_ns__ChangeLocationName(soap);
	if (_p)
	{	soap_default_ns__ChangeLocationName(soap, _p);
		_p->requestUser = requestUser;
		_p->oldCityName = oldCityName;
		_p->newCityName = newCityName;
		_p->oldLocationName = oldLocationName;
		_p->newLocationName = newLocationName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ChangeLocationName(struct soap*, const struct ns__ChangeLocationName *, const char*, const char*);

inline int soap_write_ns__ChangeLocationName(struct soap *soap, struct ns__ChangeLocationName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__ChangeLocationName(soap, p), 0) || soap_put_ns__ChangeLocationName(soap, p, "ns:ChangeLocationName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ChangeLocationName(struct soap *soap, const char *URL, struct ns__ChangeLocationName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__ChangeLocationName(soap, p), 0) || soap_put_ns__ChangeLocationName(soap, p, "ns:ChangeLocationName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__ChangeLocationName(struct soap *soap, const char *URL, struct ns__ChangeLocationName const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__ChangeLocationName(soap, p), 0) || soap_put_ns__ChangeLocationName(soap, p, "ns:ChangeLocationName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__ChangeLocationName * SOAP_FMAC4 soap_get_ns__ChangeLocationName(struct soap*, struct ns__ChangeLocationName *, const char*, const char*);

inline int soap_read_ns__ChangeLocationName(struct soap *soap, struct ns__ChangeLocationName *p)
{
	if (p)
	{	soap_default_ns__ChangeLocationName(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__ChangeLocationName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ChangeLocationName(struct soap *soap, const char *URL, struct ns__ChangeLocationName *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__ChangeLocationName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__ChangeLocationName(struct soap *soap, struct ns__ChangeLocationName *p)
{
	if (soap_read_ns__ChangeLocationName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__ChangeCityName_DEFINED
#define SOAP_TYPE_ns__ChangeCityName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ChangeCityName(struct soap*, struct ns__ChangeCityName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ChangeCityName(struct soap*, const struct ns__ChangeCityName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ChangeCityName(struct soap*, const char*, int, const struct ns__ChangeCityName *, const char*);
SOAP_FMAC3 struct ns__ChangeCityName * SOAP_FMAC4 soap_in_ns__ChangeCityName(struct soap*, const char*, struct ns__ChangeCityName *, const char*);
SOAP_FMAC1 struct ns__ChangeCityName * SOAP_FMAC2 Server_Soap_instantiate_ns__ChangeCityName(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__ChangeCityName * soap_new_ns__ChangeCityName(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__ChangeCityName(soap, n, NULL, NULL, NULL);
}

inline struct ns__ChangeCityName * soap_new_req_ns__ChangeCityName(
	struct soap *soap,
	const ns__User& requestUser,
	const std::string& oldCityName,
	const std::string& newCityName)
{
	struct ns__ChangeCityName *_p = soap_new_ns__ChangeCityName(soap);
	if (_p)
	{	soap_default_ns__ChangeCityName(soap, _p);
		_p->requestUser = requestUser;
		_p->oldCityName = oldCityName;
		_p->newCityName = newCityName;
	}
	return _p;
}

inline struct ns__ChangeCityName * soap_new_set_ns__ChangeCityName(
	struct soap *soap,
	const ns__User& requestUser,
	const std::string& oldCityName,
	const std::string& newCityName)
{
	struct ns__ChangeCityName *_p = soap_new_ns__ChangeCityName(soap);
	if (_p)
	{	soap_default_ns__ChangeCityName(soap, _p);
		_p->requestUser = requestUser;
		_p->oldCityName = oldCityName;
		_p->newCityName = newCityName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ChangeCityName(struct soap*, const struct ns__ChangeCityName *, const char*, const char*);

inline int soap_write_ns__ChangeCityName(struct soap *soap, struct ns__ChangeCityName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__ChangeCityName(soap, p), 0) || soap_put_ns__ChangeCityName(soap, p, "ns:ChangeCityName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ChangeCityName(struct soap *soap, const char *URL, struct ns__ChangeCityName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__ChangeCityName(soap, p), 0) || soap_put_ns__ChangeCityName(soap, p, "ns:ChangeCityName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__ChangeCityName(struct soap *soap, const char *URL, struct ns__ChangeCityName const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__ChangeCityName(soap, p), 0) || soap_put_ns__ChangeCityName(soap, p, "ns:ChangeCityName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__ChangeCityName * SOAP_FMAC4 soap_get_ns__ChangeCityName(struct soap*, struct ns__ChangeCityName *, const char*, const char*);

inline int soap_read_ns__ChangeCityName(struct soap *soap, struct ns__ChangeCityName *p)
{
	if (p)
	{	soap_default_ns__ChangeCityName(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__ChangeCityName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ChangeCityName(struct soap *soap, const char *URL, struct ns__ChangeCityName *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__ChangeCityName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__ChangeCityName(struct soap *soap, struct ns__ChangeCityName *p)
{
	if (soap_read_ns__ChangeCityName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetCityAndLocations_DEFINED
#define SOAP_TYPE_ns__GetCityAndLocations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetCityAndLocations(struct soap*, struct ns__GetCityAndLocations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetCityAndLocations(struct soap*, const struct ns__GetCityAndLocations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetCityAndLocations(struct soap*, const char*, int, const struct ns__GetCityAndLocations *, const char*);
SOAP_FMAC3 struct ns__GetCityAndLocations * SOAP_FMAC4 soap_in_ns__GetCityAndLocations(struct soap*, const char*, struct ns__GetCityAndLocations *, const char*);
SOAP_FMAC1 struct ns__GetCityAndLocations * SOAP_FMAC2 Server_Soap_instantiate_ns__GetCityAndLocations(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetCityAndLocations * soap_new_ns__GetCityAndLocations(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetCityAndLocations(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetCityAndLocations * soap_new_req_ns__GetCityAndLocations(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__GetCityAndLocations *_p = soap_new_ns__GetCityAndLocations(soap);
	if (_p)
	{	soap_default_ns__GetCityAndLocations(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}

inline struct ns__GetCityAndLocations * soap_new_set_ns__GetCityAndLocations(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__GetCityAndLocations *_p = soap_new_ns__GetCityAndLocations(soap);
	if (_p)
	{	soap_default_ns__GetCityAndLocations(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetCityAndLocations(struct soap*, const struct ns__GetCityAndLocations *, const char*, const char*);

inline int soap_write_ns__GetCityAndLocations(struct soap *soap, struct ns__GetCityAndLocations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetCityAndLocations(soap, p), 0) || soap_put_ns__GetCityAndLocations(soap, p, "ns:GetCityAndLocations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetCityAndLocations(struct soap *soap, const char *URL, struct ns__GetCityAndLocations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetCityAndLocations(soap, p), 0) || soap_put_ns__GetCityAndLocations(soap, p, "ns:GetCityAndLocations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetCityAndLocations(struct soap *soap, const char *URL, struct ns__GetCityAndLocations const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetCityAndLocations(soap, p), 0) || soap_put_ns__GetCityAndLocations(soap, p, "ns:GetCityAndLocations", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetCityAndLocations * SOAP_FMAC4 soap_get_ns__GetCityAndLocations(struct soap*, struct ns__GetCityAndLocations *, const char*, const char*);

inline int soap_read_ns__GetCityAndLocations(struct soap *soap, struct ns__GetCityAndLocations *p)
{
	if (p)
	{	soap_default_ns__GetCityAndLocations(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetCityAndLocations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetCityAndLocations(struct soap *soap, const char *URL, struct ns__GetCityAndLocations *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetCityAndLocations(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetCityAndLocations(struct soap *soap, struct ns__GetCityAndLocations *p)
{
	if (soap_read_ns__GetCityAndLocations(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SetServerOptions_DEFINED
#define SOAP_TYPE_ns__SetServerOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetServerOptions(struct soap*, struct ns__SetServerOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetServerOptions(struct soap*, const struct ns__SetServerOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetServerOptions(struct soap*, const char*, int, const struct ns__SetServerOptions *, const char*);
SOAP_FMAC3 struct ns__SetServerOptions * SOAP_FMAC4 soap_in_ns__SetServerOptions(struct soap*, const char*, struct ns__SetServerOptions *, const char*);
SOAP_FMAC1 struct ns__SetServerOptions * SOAP_FMAC2 Server_Soap_instantiate_ns__SetServerOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SetServerOptions * soap_new_ns__SetServerOptions(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__SetServerOptions(soap, n, NULL, NULL, NULL);
}

inline struct ns__SetServerOptions * soap_new_req_ns__SetServerOptions(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__ServerOptions& serverOptions)
{
	struct ns__SetServerOptions *_p = soap_new_ns__SetServerOptions(soap);
	if (_p)
	{	soap_default_ns__SetServerOptions(soap, _p);
		_p->requestUser = requestUser;
		_p->serverOptions = serverOptions;
	}
	return _p;
}

inline struct ns__SetServerOptions * soap_new_set_ns__SetServerOptions(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__ServerOptions& serverOptions)
{
	struct ns__SetServerOptions *_p = soap_new_ns__SetServerOptions(soap);
	if (_p)
	{	soap_default_ns__SetServerOptions(soap, _p);
		_p->requestUser = requestUser;
		_p->serverOptions = serverOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetServerOptions(struct soap*, const struct ns__SetServerOptions *, const char*, const char*);

inline int soap_write_ns__SetServerOptions(struct soap *soap, struct ns__SetServerOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__SetServerOptions(soap, p), 0) || soap_put_ns__SetServerOptions(soap, p, "ns:SetServerOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SetServerOptions(struct soap *soap, const char *URL, struct ns__SetServerOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__SetServerOptions(soap, p), 0) || soap_put_ns__SetServerOptions(soap, p, "ns:SetServerOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SetServerOptions(struct soap *soap, const char *URL, struct ns__SetServerOptions const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__SetServerOptions(soap, p), 0) || soap_put_ns__SetServerOptions(soap, p, "ns:SetServerOptions", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__SetServerOptions * SOAP_FMAC4 soap_get_ns__SetServerOptions(struct soap*, struct ns__SetServerOptions *, const char*, const char*);

inline int soap_read_ns__SetServerOptions(struct soap *soap, struct ns__SetServerOptions *p)
{
	if (p)
	{	soap_default_ns__SetServerOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__SetServerOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SetServerOptions(struct soap *soap, const char *URL, struct ns__SetServerOptions *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SetServerOptions(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SetServerOptions(struct soap *soap, struct ns__SetServerOptions *p)
{
	if (soap_read_ns__SetServerOptions(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetServerOptions_DEFINED
#define SOAP_TYPE_ns__GetServerOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetServerOptions(struct soap*, struct ns__GetServerOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetServerOptions(struct soap*, const struct ns__GetServerOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetServerOptions(struct soap*, const char*, int, const struct ns__GetServerOptions *, const char*);
SOAP_FMAC3 struct ns__GetServerOptions * SOAP_FMAC4 soap_in_ns__GetServerOptions(struct soap*, const char*, struct ns__GetServerOptions *, const char*);
SOAP_FMAC1 struct ns__GetServerOptions * SOAP_FMAC2 Server_Soap_instantiate_ns__GetServerOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetServerOptions * soap_new_ns__GetServerOptions(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetServerOptions(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetServerOptions * soap_new_req_ns__GetServerOptions(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__GetServerOptions *_p = soap_new_ns__GetServerOptions(soap);
	if (_p)
	{	soap_default_ns__GetServerOptions(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}

inline struct ns__GetServerOptions * soap_new_set_ns__GetServerOptions(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__GetServerOptions *_p = soap_new_ns__GetServerOptions(soap);
	if (_p)
	{	soap_default_ns__GetServerOptions(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetServerOptions(struct soap*, const struct ns__GetServerOptions *, const char*, const char*);

inline int soap_write_ns__GetServerOptions(struct soap *soap, struct ns__GetServerOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetServerOptions(soap, p), 0) || soap_put_ns__GetServerOptions(soap, p, "ns:GetServerOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetServerOptions(struct soap *soap, const char *URL, struct ns__GetServerOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetServerOptions(soap, p), 0) || soap_put_ns__GetServerOptions(soap, p, "ns:GetServerOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetServerOptions(struct soap *soap, const char *URL, struct ns__GetServerOptions const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetServerOptions(soap, p), 0) || soap_put_ns__GetServerOptions(soap, p, "ns:GetServerOptions", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetServerOptions * SOAP_FMAC4 soap_get_ns__GetServerOptions(struct soap*, struct ns__GetServerOptions *, const char*, const char*);

inline int soap_read_ns__GetServerOptions(struct soap *soap, struct ns__GetServerOptions *p)
{
	if (p)
	{	soap_default_ns__GetServerOptions(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetServerOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetServerOptions(struct soap *soap, const char *URL, struct ns__GetServerOptions *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetServerOptions(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetServerOptions(struct soap *soap, struct ns__GetServerOptions *p)
{
	if (soap_read_ns__GetServerOptions(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetDeviceStatusLog_DEFINED
#define SOAP_TYPE_ns__GetDeviceStatusLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDeviceStatusLog(struct soap*, struct ns__GetDeviceStatusLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDeviceStatusLog(struct soap*, const struct ns__GetDeviceStatusLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDeviceStatusLog(struct soap*, const char*, int, const struct ns__GetDeviceStatusLog *, const char*);
SOAP_FMAC3 struct ns__GetDeviceStatusLog * SOAP_FMAC4 soap_in_ns__GetDeviceStatusLog(struct soap*, const char*, struct ns__GetDeviceStatusLog *, const char*);
SOAP_FMAC1 struct ns__GetDeviceStatusLog * SOAP_FMAC2 Server_Soap_instantiate_ns__GetDeviceStatusLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetDeviceStatusLog * soap_new_ns__GetDeviceStatusLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetDeviceStatusLog(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetDeviceStatusLog * soap_new_req_ns__GetDeviceStatusLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__DeviceStatus& requestStatusLog)
{
	struct ns__GetDeviceStatusLog *_p = soap_new_ns__GetDeviceStatusLog(soap);
	if (_p)
	{	soap_default_ns__GetDeviceStatusLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestStatusLog = requestStatusLog;
	}
	return _p;
}

inline struct ns__GetDeviceStatusLog * soap_new_set_ns__GetDeviceStatusLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__DeviceStatus& requestStatusLog)
{
	struct ns__GetDeviceStatusLog *_p = soap_new_ns__GetDeviceStatusLog(soap);
	if (_p)
	{	soap_default_ns__GetDeviceStatusLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestStatusLog = requestStatusLog;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDeviceStatusLog(struct soap*, const struct ns__GetDeviceStatusLog *, const char*, const char*);

inline int soap_write_ns__GetDeviceStatusLog(struct soap *soap, struct ns__GetDeviceStatusLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetDeviceStatusLog(soap, p), 0) || soap_put_ns__GetDeviceStatusLog(soap, p, "ns:GetDeviceStatusLog", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetDeviceStatusLog(struct soap *soap, const char *URL, struct ns__GetDeviceStatusLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetDeviceStatusLog(soap, p), 0) || soap_put_ns__GetDeviceStatusLog(soap, p, "ns:GetDeviceStatusLog", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetDeviceStatusLog(struct soap *soap, const char *URL, struct ns__GetDeviceStatusLog const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetDeviceStatusLog(soap, p), 0) || soap_put_ns__GetDeviceStatusLog(soap, p, "ns:GetDeviceStatusLog", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetDeviceStatusLog * SOAP_FMAC4 soap_get_ns__GetDeviceStatusLog(struct soap*, struct ns__GetDeviceStatusLog *, const char*, const char*);

inline int soap_read_ns__GetDeviceStatusLog(struct soap *soap, struct ns__GetDeviceStatusLog *p)
{
	if (p)
	{	soap_default_ns__GetDeviceStatusLog(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetDeviceStatusLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetDeviceStatusLog(struct soap *soap, const char *URL, struct ns__GetDeviceStatusLog *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetDeviceStatusLog(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetDeviceStatusLog(struct soap *soap, struct ns__GetDeviceStatusLog *p)
{
	if (soap_read_ns__GetDeviceStatusLog(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SaveDeviceStatusLog_DEFINED
#define SOAP_TYPE_ns__SaveDeviceStatusLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SaveDeviceStatusLog(struct soap*, struct ns__SaveDeviceStatusLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SaveDeviceStatusLog(struct soap*, const struct ns__SaveDeviceStatusLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SaveDeviceStatusLog(struct soap*, const char*, int, const struct ns__SaveDeviceStatusLog *, const char*);
SOAP_FMAC3 struct ns__SaveDeviceStatusLog * SOAP_FMAC4 soap_in_ns__SaveDeviceStatusLog(struct soap*, const char*, struct ns__SaveDeviceStatusLog *, const char*);
SOAP_FMAC1 struct ns__SaveDeviceStatusLog * SOAP_FMAC2 Server_Soap_instantiate_ns__SaveDeviceStatusLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SaveDeviceStatusLog * soap_new_ns__SaveDeviceStatusLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__SaveDeviceStatusLog(soap, n, NULL, NULL, NULL);
}

inline struct ns__SaveDeviceStatusLog * soap_new_req_ns__SaveDeviceStatusLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__DeviceStatusLog& requestStatusLog)
{
	struct ns__SaveDeviceStatusLog *_p = soap_new_ns__SaveDeviceStatusLog(soap);
	if (_p)
	{	soap_default_ns__SaveDeviceStatusLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestStatusLog = requestStatusLog;
	}
	return _p;
}

inline struct ns__SaveDeviceStatusLog * soap_new_set_ns__SaveDeviceStatusLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__DeviceStatusLog& requestStatusLog)
{
	struct ns__SaveDeviceStatusLog *_p = soap_new_ns__SaveDeviceStatusLog(soap);
	if (_p)
	{	soap_default_ns__SaveDeviceStatusLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestStatusLog = requestStatusLog;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SaveDeviceStatusLog(struct soap*, const struct ns__SaveDeviceStatusLog *, const char*, const char*);

inline int soap_write_ns__SaveDeviceStatusLog(struct soap *soap, struct ns__SaveDeviceStatusLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__SaveDeviceStatusLog(soap, p), 0) || soap_put_ns__SaveDeviceStatusLog(soap, p, "ns:SaveDeviceStatusLog", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SaveDeviceStatusLog(struct soap *soap, const char *URL, struct ns__SaveDeviceStatusLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__SaveDeviceStatusLog(soap, p), 0) || soap_put_ns__SaveDeviceStatusLog(soap, p, "ns:SaveDeviceStatusLog", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SaveDeviceStatusLog(struct soap *soap, const char *URL, struct ns__SaveDeviceStatusLog const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__SaveDeviceStatusLog(soap, p), 0) || soap_put_ns__SaveDeviceStatusLog(soap, p, "ns:SaveDeviceStatusLog", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__SaveDeviceStatusLog * SOAP_FMAC4 soap_get_ns__SaveDeviceStatusLog(struct soap*, struct ns__SaveDeviceStatusLog *, const char*, const char*);

inline int soap_read_ns__SaveDeviceStatusLog(struct soap *soap, struct ns__SaveDeviceStatusLog *p)
{
	if (p)
	{	soap_default_ns__SaveDeviceStatusLog(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__SaveDeviceStatusLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SaveDeviceStatusLog(struct soap *soap, const char *URL, struct ns__SaveDeviceStatusLog *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SaveDeviceStatusLog(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SaveDeviceStatusLog(struct soap *soap, struct ns__SaveDeviceStatusLog *p)
{
	if (soap_read_ns__SaveDeviceStatusLog(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetUserLog_DEFINED
#define SOAP_TYPE_ns__GetUserLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetUserLog(struct soap*, struct ns__GetUserLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetUserLog(struct soap*, const struct ns__GetUserLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetUserLog(struct soap*, const char*, int, const struct ns__GetUserLog *, const char*);
SOAP_FMAC3 struct ns__GetUserLog * SOAP_FMAC4 soap_in_ns__GetUserLog(struct soap*, const char*, struct ns__GetUserLog *, const char*);
SOAP_FMAC1 struct ns__GetUserLog * SOAP_FMAC2 Server_Soap_instantiate_ns__GetUserLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetUserLog * soap_new_ns__GetUserLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetUserLog(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetUserLog * soap_new_req_ns__GetUserLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__ReportRange& requestReport)
{
	struct ns__GetUserLog *_p = soap_new_ns__GetUserLog(soap);
	if (_p)
	{	soap_default_ns__GetUserLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestReport = requestReport;
	}
	return _p;
}

inline struct ns__GetUserLog * soap_new_set_ns__GetUserLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__ReportRange& requestReport)
{
	struct ns__GetUserLog *_p = soap_new_ns__GetUserLog(soap);
	if (_p)
	{	soap_default_ns__GetUserLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestReport = requestReport;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetUserLog(struct soap*, const struct ns__GetUserLog *, const char*, const char*);

inline int soap_write_ns__GetUserLog(struct soap *soap, struct ns__GetUserLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetUserLog(soap, p), 0) || soap_put_ns__GetUserLog(soap, p, "ns:GetUserLog", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetUserLog(struct soap *soap, const char *URL, struct ns__GetUserLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetUserLog(soap, p), 0) || soap_put_ns__GetUserLog(soap, p, "ns:GetUserLog", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetUserLog(struct soap *soap, const char *URL, struct ns__GetUserLog const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetUserLog(soap, p), 0) || soap_put_ns__GetUserLog(soap, p, "ns:GetUserLog", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetUserLog * SOAP_FMAC4 soap_get_ns__GetUserLog(struct soap*, struct ns__GetUserLog *, const char*, const char*);

inline int soap_read_ns__GetUserLog(struct soap *soap, struct ns__GetUserLog *p)
{
	if (p)
	{	soap_default_ns__GetUserLog(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetUserLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetUserLog(struct soap *soap, const char *URL, struct ns__GetUserLog *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetUserLog(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetUserLog(struct soap *soap, struct ns__GetUserLog *p)
{
	if (soap_read_ns__GetUserLog(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetUserLogResponse_DEFINED
#define SOAP_TYPE_ns__GetUserLogResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetUserLogResponse(struct soap*, struct ns__GetUserLogResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetUserLogResponse(struct soap*, const struct ns__GetUserLogResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetUserLogResponse(struct soap*, const char*, int, const struct ns__GetUserLogResponse *, const char*);
SOAP_FMAC3 struct ns__GetUserLogResponse * SOAP_FMAC4 soap_in_ns__GetUserLogResponse(struct soap*, const char*, struct ns__GetUserLogResponse *, const char*);
SOAP_FMAC1 struct ns__GetUserLogResponse * SOAP_FMAC2 Server_Soap_instantiate_ns__GetUserLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetUserLogResponse * soap_new_ns__GetUserLogResponse(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetUserLogResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetUserLogResponse * soap_new_req_ns__GetUserLogResponse(
	struct soap *soap,
	const std::vector<ns__UserLog> & responseActivityLog)
{
	struct ns__GetUserLogResponse *_p = soap_new_ns__GetUserLogResponse(soap);
	if (_p)
	{	soap_default_ns__GetUserLogResponse(soap, _p);
		_p->responseActivityLog = responseActivityLog;
	}
	return _p;
}

inline struct ns__GetUserLogResponse * soap_new_set_ns__GetUserLogResponse(
	struct soap *soap,
	const std::vector<ns__UserLog> & responseActivityLog)
{
	struct ns__GetUserLogResponse *_p = soap_new_ns__GetUserLogResponse(soap);
	if (_p)
	{	soap_default_ns__GetUserLogResponse(soap, _p);
		_p->responseActivityLog = responseActivityLog;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetUserLogResponse(struct soap*, const struct ns__GetUserLogResponse *, const char*, const char*);

inline int soap_write_ns__GetUserLogResponse(struct soap *soap, struct ns__GetUserLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetUserLogResponse(soap, p), 0) || soap_put_ns__GetUserLogResponse(soap, p, "ns:GetUserLogResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetUserLogResponse(struct soap *soap, const char *URL, struct ns__GetUserLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetUserLogResponse(soap, p), 0) || soap_put_ns__GetUserLogResponse(soap, p, "ns:GetUserLogResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetUserLogResponse(struct soap *soap, const char *URL, struct ns__GetUserLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetUserLogResponse(soap, p), 0) || soap_put_ns__GetUserLogResponse(soap, p, "ns:GetUserLogResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetUserLogResponse * SOAP_FMAC4 soap_get_ns__GetUserLogResponse(struct soap*, struct ns__GetUserLogResponse *, const char*, const char*);

inline int soap_read_ns__GetUserLogResponse(struct soap *soap, struct ns__GetUserLogResponse *p)
{
	if (p)
	{	soap_default_ns__GetUserLogResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetUserLogResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetUserLogResponse(struct soap *soap, const char *URL, struct ns__GetUserLogResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetUserLogResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetUserLogResponse(struct soap *soap, struct ns__GetUserLogResponse *p)
{
	if (soap_read_ns__GetUserLogResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SaveUserLog_DEFINED
#define SOAP_TYPE_ns__SaveUserLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SaveUserLog(struct soap*, struct ns__SaveUserLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SaveUserLog(struct soap*, const struct ns__SaveUserLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SaveUserLog(struct soap*, const char*, int, const struct ns__SaveUserLog *, const char*);
SOAP_FMAC3 struct ns__SaveUserLog * SOAP_FMAC4 soap_in_ns__SaveUserLog(struct soap*, const char*, struct ns__SaveUserLog *, const char*);
SOAP_FMAC1 struct ns__SaveUserLog * SOAP_FMAC2 Server_Soap_instantiate_ns__SaveUserLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SaveUserLog * soap_new_ns__SaveUserLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__SaveUserLog(soap, n, NULL, NULL, NULL);
}

inline struct ns__SaveUserLog * soap_new_req_ns__SaveUserLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__UserLog& requestActivityLog)
{
	struct ns__SaveUserLog *_p = soap_new_ns__SaveUserLog(soap);
	if (_p)
	{	soap_default_ns__SaveUserLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestActivityLog = requestActivityLog;
	}
	return _p;
}

inline struct ns__SaveUserLog * soap_new_set_ns__SaveUserLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__UserLog& requestActivityLog)
{
	struct ns__SaveUserLog *_p = soap_new_ns__SaveUserLog(soap);
	if (_p)
	{	soap_default_ns__SaveUserLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestActivityLog = requestActivityLog;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SaveUserLog(struct soap*, const struct ns__SaveUserLog *, const char*, const char*);

inline int soap_write_ns__SaveUserLog(struct soap *soap, struct ns__SaveUserLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__SaveUserLog(soap, p), 0) || soap_put_ns__SaveUserLog(soap, p, "ns:SaveUserLog", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SaveUserLog(struct soap *soap, const char *URL, struct ns__SaveUserLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__SaveUserLog(soap, p), 0) || soap_put_ns__SaveUserLog(soap, p, "ns:SaveUserLog", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SaveUserLog(struct soap *soap, const char *URL, struct ns__SaveUserLog const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__SaveUserLog(soap, p), 0) || soap_put_ns__SaveUserLog(soap, p, "ns:SaveUserLog", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__SaveUserLog * SOAP_FMAC4 soap_get_ns__SaveUserLog(struct soap*, struct ns__SaveUserLog *, const char*, const char*);

inline int soap_read_ns__SaveUserLog(struct soap *soap, struct ns__SaveUserLog *p)
{
	if (p)
	{	soap_default_ns__SaveUserLog(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__SaveUserLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SaveUserLog(struct soap *soap, const char *URL, struct ns__SaveUserLog *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SaveUserLog(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SaveUserLog(struct soap *soap, struct ns__SaveUserLog *p)
{
	if (soap_read_ns__SaveUserLog(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetActivityLog_DEFINED
#define SOAP_TYPE_ns__GetActivityLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetActivityLog(struct soap*, struct ns__GetActivityLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetActivityLog(struct soap*, const struct ns__GetActivityLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetActivityLog(struct soap*, const char*, int, const struct ns__GetActivityLog *, const char*);
SOAP_FMAC3 struct ns__GetActivityLog * SOAP_FMAC4 soap_in_ns__GetActivityLog(struct soap*, const char*, struct ns__GetActivityLog *, const char*);
SOAP_FMAC1 struct ns__GetActivityLog * SOAP_FMAC2 Server_Soap_instantiate_ns__GetActivityLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetActivityLog * soap_new_ns__GetActivityLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetActivityLog(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetActivityLog * soap_new_req_ns__GetActivityLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__ReportRange& requestReport)
{
	struct ns__GetActivityLog *_p = soap_new_ns__GetActivityLog(soap);
	if (_p)
	{	soap_default_ns__GetActivityLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestReport = requestReport;
	}
	return _p;
}

inline struct ns__GetActivityLog * soap_new_set_ns__GetActivityLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__ReportRange& requestReport)
{
	struct ns__GetActivityLog *_p = soap_new_ns__GetActivityLog(soap);
	if (_p)
	{	soap_default_ns__GetActivityLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestReport = requestReport;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetActivityLog(struct soap*, const struct ns__GetActivityLog *, const char*, const char*);

inline int soap_write_ns__GetActivityLog(struct soap *soap, struct ns__GetActivityLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetActivityLog(soap, p), 0) || soap_put_ns__GetActivityLog(soap, p, "ns:GetActivityLog", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetActivityLog(struct soap *soap, const char *URL, struct ns__GetActivityLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetActivityLog(soap, p), 0) || soap_put_ns__GetActivityLog(soap, p, "ns:GetActivityLog", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetActivityLog(struct soap *soap, const char *URL, struct ns__GetActivityLog const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetActivityLog(soap, p), 0) || soap_put_ns__GetActivityLog(soap, p, "ns:GetActivityLog", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetActivityLog * SOAP_FMAC4 soap_get_ns__GetActivityLog(struct soap*, struct ns__GetActivityLog *, const char*, const char*);

inline int soap_read_ns__GetActivityLog(struct soap *soap, struct ns__GetActivityLog *p)
{
	if (p)
	{	soap_default_ns__GetActivityLog(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetActivityLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetActivityLog(struct soap *soap, const char *URL, struct ns__GetActivityLog *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetActivityLog(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetActivityLog(struct soap *soap, struct ns__GetActivityLog *p)
{
	if (soap_read_ns__GetActivityLog(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetActivityLogResponse_DEFINED
#define SOAP_TYPE_ns__GetActivityLogResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetActivityLogResponse(struct soap*, struct ns__GetActivityLogResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetActivityLogResponse(struct soap*, const struct ns__GetActivityLogResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetActivityLogResponse(struct soap*, const char*, int, const struct ns__GetActivityLogResponse *, const char*);
SOAP_FMAC3 struct ns__GetActivityLogResponse * SOAP_FMAC4 soap_in_ns__GetActivityLogResponse(struct soap*, const char*, struct ns__GetActivityLogResponse *, const char*);
SOAP_FMAC1 struct ns__GetActivityLogResponse * SOAP_FMAC2 Server_Soap_instantiate_ns__GetActivityLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetActivityLogResponse * soap_new_ns__GetActivityLogResponse(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetActivityLogResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetActivityLogResponse * soap_new_req_ns__GetActivityLogResponse(
	struct soap *soap,
	const std::vector<ns__ActivityLog> & responseActivityLog)
{
	struct ns__GetActivityLogResponse *_p = soap_new_ns__GetActivityLogResponse(soap);
	if (_p)
	{	soap_default_ns__GetActivityLogResponse(soap, _p);
		_p->responseActivityLog = responseActivityLog;
	}
	return _p;
}

inline struct ns__GetActivityLogResponse * soap_new_set_ns__GetActivityLogResponse(
	struct soap *soap,
	const std::vector<ns__ActivityLog> & responseActivityLog)
{
	struct ns__GetActivityLogResponse *_p = soap_new_ns__GetActivityLogResponse(soap);
	if (_p)
	{	soap_default_ns__GetActivityLogResponse(soap, _p);
		_p->responseActivityLog = responseActivityLog;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetActivityLogResponse(struct soap*, const struct ns__GetActivityLogResponse *, const char*, const char*);

inline int soap_write_ns__GetActivityLogResponse(struct soap *soap, struct ns__GetActivityLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetActivityLogResponse(soap, p), 0) || soap_put_ns__GetActivityLogResponse(soap, p, "ns:GetActivityLogResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetActivityLogResponse(struct soap *soap, const char *URL, struct ns__GetActivityLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetActivityLogResponse(soap, p), 0) || soap_put_ns__GetActivityLogResponse(soap, p, "ns:GetActivityLogResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetActivityLogResponse(struct soap *soap, const char *URL, struct ns__GetActivityLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetActivityLogResponse(soap, p), 0) || soap_put_ns__GetActivityLogResponse(soap, p, "ns:GetActivityLogResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetActivityLogResponse * SOAP_FMAC4 soap_get_ns__GetActivityLogResponse(struct soap*, struct ns__GetActivityLogResponse *, const char*, const char*);

inline int soap_read_ns__GetActivityLogResponse(struct soap *soap, struct ns__GetActivityLogResponse *p)
{
	if (p)
	{	soap_default_ns__GetActivityLogResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetActivityLogResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetActivityLogResponse(struct soap *soap, const char *URL, struct ns__GetActivityLogResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetActivityLogResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetActivityLogResponse(struct soap *soap, struct ns__GetActivityLogResponse *p)
{
	if (soap_read_ns__GetActivityLogResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SaveActivityLog_DEFINED
#define SOAP_TYPE_ns__SaveActivityLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SaveActivityLog(struct soap*, struct ns__SaveActivityLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SaveActivityLog(struct soap*, const struct ns__SaveActivityLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SaveActivityLog(struct soap*, const char*, int, const struct ns__SaveActivityLog *, const char*);
SOAP_FMAC3 struct ns__SaveActivityLog * SOAP_FMAC4 soap_in_ns__SaveActivityLog(struct soap*, const char*, struct ns__SaveActivityLog *, const char*);
SOAP_FMAC1 struct ns__SaveActivityLog * SOAP_FMAC2 Server_Soap_instantiate_ns__SaveActivityLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SaveActivityLog * soap_new_ns__SaveActivityLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__SaveActivityLog(soap, n, NULL, NULL, NULL);
}

inline struct ns__SaveActivityLog * soap_new_req_ns__SaveActivityLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__ActivityLog& requestActivityLog)
{
	struct ns__SaveActivityLog *_p = soap_new_ns__SaveActivityLog(soap);
	if (_p)
	{	soap_default_ns__SaveActivityLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestActivityLog = requestActivityLog;
	}
	return _p;
}

inline struct ns__SaveActivityLog * soap_new_set_ns__SaveActivityLog(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__ActivityLog& requestActivityLog)
{
	struct ns__SaveActivityLog *_p = soap_new_ns__SaveActivityLog(soap);
	if (_p)
	{	soap_default_ns__SaveActivityLog(soap, _p);
		_p->requestUser = requestUser;
		_p->requestActivityLog = requestActivityLog;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SaveActivityLog(struct soap*, const struct ns__SaveActivityLog *, const char*, const char*);

inline int soap_write_ns__SaveActivityLog(struct soap *soap, struct ns__SaveActivityLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__SaveActivityLog(soap, p), 0) || soap_put_ns__SaveActivityLog(soap, p, "ns:SaveActivityLog", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SaveActivityLog(struct soap *soap, const char *URL, struct ns__SaveActivityLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__SaveActivityLog(soap, p), 0) || soap_put_ns__SaveActivityLog(soap, p, "ns:SaveActivityLog", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SaveActivityLog(struct soap *soap, const char *URL, struct ns__SaveActivityLog const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__SaveActivityLog(soap, p), 0) || soap_put_ns__SaveActivityLog(soap, p, "ns:SaveActivityLog", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__SaveActivityLog * SOAP_FMAC4 soap_get_ns__SaveActivityLog(struct soap*, struct ns__SaveActivityLog *, const char*, const char*);

inline int soap_read_ns__SaveActivityLog(struct soap *soap, struct ns__SaveActivityLog *p)
{
	if (p)
	{	soap_default_ns__SaveActivityLog(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__SaveActivityLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SaveActivityLog(struct soap *soap, const char *URL, struct ns__SaveActivityLog *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SaveActivityLog(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SaveActivityLog(struct soap *soap, struct ns__SaveActivityLog *p)
{
	if (soap_read_ns__SaveActivityLog(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetUserDevices_DEFINED
#define SOAP_TYPE_ns__GetUserDevices_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetUserDevices(struct soap*, struct ns__GetUserDevices *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetUserDevices(struct soap*, const struct ns__GetUserDevices *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetUserDevices(struct soap*, const char*, int, const struct ns__GetUserDevices *, const char*);
SOAP_FMAC3 struct ns__GetUserDevices * SOAP_FMAC4 soap_in_ns__GetUserDevices(struct soap*, const char*, struct ns__GetUserDevices *, const char*);
SOAP_FMAC1 struct ns__GetUserDevices * SOAP_FMAC2 Server_Soap_instantiate_ns__GetUserDevices(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetUserDevices * soap_new_ns__GetUserDevices(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetUserDevices(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetUserDevices * soap_new_req_ns__GetUserDevices(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__User& requestSelectedUser)
{
	struct ns__GetUserDevices *_p = soap_new_ns__GetUserDevices(soap);
	if (_p)
	{	soap_default_ns__GetUserDevices(soap, _p);
		_p->requestUser = requestUser;
		_p->requestSelectedUser = requestSelectedUser;
	}
	return _p;
}

inline struct ns__GetUserDevices * soap_new_set_ns__GetUserDevices(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__User& requestSelectedUser)
{
	struct ns__GetUserDevices *_p = soap_new_ns__GetUserDevices(soap);
	if (_p)
	{	soap_default_ns__GetUserDevices(soap, _p);
		_p->requestUser = requestUser;
		_p->requestSelectedUser = requestSelectedUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetUserDevices(struct soap*, const struct ns__GetUserDevices *, const char*, const char*);

inline int soap_write_ns__GetUserDevices(struct soap *soap, struct ns__GetUserDevices const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetUserDevices(soap, p), 0) || soap_put_ns__GetUserDevices(soap, p, "ns:GetUserDevices", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetUserDevices(struct soap *soap, const char *URL, struct ns__GetUserDevices const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetUserDevices(soap, p), 0) || soap_put_ns__GetUserDevices(soap, p, "ns:GetUserDevices", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetUserDevices(struct soap *soap, const char *URL, struct ns__GetUserDevices const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetUserDevices(soap, p), 0) || soap_put_ns__GetUserDevices(soap, p, "ns:GetUserDevices", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetUserDevices * SOAP_FMAC4 soap_get_ns__GetUserDevices(struct soap*, struct ns__GetUserDevices *, const char*, const char*);

inline int soap_read_ns__GetUserDevices(struct soap *soap, struct ns__GetUserDevices *p)
{
	if (p)
	{	soap_default_ns__GetUserDevices(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetUserDevices(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetUserDevices(struct soap *soap, const char *URL, struct ns__GetUserDevices *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetUserDevices(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetUserDevices(struct soap *soap, struct ns__GetUserDevices *p)
{
	if (soap_read_ns__GetUserDevices(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__DeleteDeviceFromUser_DEFINED
#define SOAP_TYPE_ns__DeleteDeviceFromUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DeleteDeviceFromUser(struct soap*, struct ns__DeleteDeviceFromUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DeleteDeviceFromUser(struct soap*, const struct ns__DeleteDeviceFromUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeleteDeviceFromUser(struct soap*, const char*, int, const struct ns__DeleteDeviceFromUser *, const char*);
SOAP_FMAC3 struct ns__DeleteDeviceFromUser * SOAP_FMAC4 soap_in_ns__DeleteDeviceFromUser(struct soap*, const char*, struct ns__DeleteDeviceFromUser *, const char*);
SOAP_FMAC1 struct ns__DeleteDeviceFromUser * SOAP_FMAC2 Server_Soap_instantiate_ns__DeleteDeviceFromUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__DeleteDeviceFromUser * soap_new_ns__DeleteDeviceFromUser(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__DeleteDeviceFromUser(soap, n, NULL, NULL, NULL);
}

inline struct ns__DeleteDeviceFromUser * soap_new_req_ns__DeleteDeviceFromUser(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__UserDevice& requestUserDevice)
{
	struct ns__DeleteDeviceFromUser *_p = soap_new_ns__DeleteDeviceFromUser(soap);
	if (_p)
	{	soap_default_ns__DeleteDeviceFromUser(soap, _p);
		_p->requestUser = requestUser;
		_p->requestUserDevice = requestUserDevice;
	}
	return _p;
}

inline struct ns__DeleteDeviceFromUser * soap_new_set_ns__DeleteDeviceFromUser(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__UserDevice& requestUserDevice)
{
	struct ns__DeleteDeviceFromUser *_p = soap_new_ns__DeleteDeviceFromUser(soap);
	if (_p)
	{	soap_default_ns__DeleteDeviceFromUser(soap, _p);
		_p->requestUser = requestUser;
		_p->requestUserDevice = requestUserDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeleteDeviceFromUser(struct soap*, const struct ns__DeleteDeviceFromUser *, const char*, const char*);

inline int soap_write_ns__DeleteDeviceFromUser(struct soap *soap, struct ns__DeleteDeviceFromUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__DeleteDeviceFromUser(soap, p), 0) || soap_put_ns__DeleteDeviceFromUser(soap, p, "ns:DeleteDeviceFromUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__DeleteDeviceFromUser(struct soap *soap, const char *URL, struct ns__DeleteDeviceFromUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__DeleteDeviceFromUser(soap, p), 0) || soap_put_ns__DeleteDeviceFromUser(soap, p, "ns:DeleteDeviceFromUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__DeleteDeviceFromUser(struct soap *soap, const char *URL, struct ns__DeleteDeviceFromUser const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__DeleteDeviceFromUser(soap, p), 0) || soap_put_ns__DeleteDeviceFromUser(soap, p, "ns:DeleteDeviceFromUser", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__DeleteDeviceFromUser * SOAP_FMAC4 soap_get_ns__DeleteDeviceFromUser(struct soap*, struct ns__DeleteDeviceFromUser *, const char*, const char*);

inline int soap_read_ns__DeleteDeviceFromUser(struct soap *soap, struct ns__DeleteDeviceFromUser *p)
{
	if (p)
	{	soap_default_ns__DeleteDeviceFromUser(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__DeleteDeviceFromUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__DeleteDeviceFromUser(struct soap *soap, const char *URL, struct ns__DeleteDeviceFromUser *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__DeleteDeviceFromUser(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__DeleteDeviceFromUser(struct soap *soap, struct ns__DeleteDeviceFromUser *p)
{
	if (soap_read_ns__DeleteDeviceFromUser(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__AssignDeviceToUser_DEFINED
#define SOAP_TYPE_ns__AssignDeviceToUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AssignDeviceToUser(struct soap*, struct ns__AssignDeviceToUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AssignDeviceToUser(struct soap*, const struct ns__AssignDeviceToUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AssignDeviceToUser(struct soap*, const char*, int, const struct ns__AssignDeviceToUser *, const char*);
SOAP_FMAC3 struct ns__AssignDeviceToUser * SOAP_FMAC4 soap_in_ns__AssignDeviceToUser(struct soap*, const char*, struct ns__AssignDeviceToUser *, const char*);
SOAP_FMAC1 struct ns__AssignDeviceToUser * SOAP_FMAC2 Server_Soap_instantiate_ns__AssignDeviceToUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__AssignDeviceToUser * soap_new_ns__AssignDeviceToUser(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__AssignDeviceToUser(soap, n, NULL, NULL, NULL);
}

inline struct ns__AssignDeviceToUser * soap_new_req_ns__AssignDeviceToUser(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__UserDevice& requestUserDevice)
{
	struct ns__AssignDeviceToUser *_p = soap_new_ns__AssignDeviceToUser(soap);
	if (_p)
	{	soap_default_ns__AssignDeviceToUser(soap, _p);
		_p->requestUser = requestUser;
		_p->requestUserDevice = requestUserDevice;
	}
	return _p;
}

inline struct ns__AssignDeviceToUser * soap_new_set_ns__AssignDeviceToUser(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__UserDevice& requestUserDevice)
{
	struct ns__AssignDeviceToUser *_p = soap_new_ns__AssignDeviceToUser(soap);
	if (_p)
	{	soap_default_ns__AssignDeviceToUser(soap, _p);
		_p->requestUser = requestUser;
		_p->requestUserDevice = requestUserDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AssignDeviceToUser(struct soap*, const struct ns__AssignDeviceToUser *, const char*, const char*);

inline int soap_write_ns__AssignDeviceToUser(struct soap *soap, struct ns__AssignDeviceToUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__AssignDeviceToUser(soap, p), 0) || soap_put_ns__AssignDeviceToUser(soap, p, "ns:AssignDeviceToUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__AssignDeviceToUser(struct soap *soap, const char *URL, struct ns__AssignDeviceToUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__AssignDeviceToUser(soap, p), 0) || soap_put_ns__AssignDeviceToUser(soap, p, "ns:AssignDeviceToUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__AssignDeviceToUser(struct soap *soap, const char *URL, struct ns__AssignDeviceToUser const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__AssignDeviceToUser(soap, p), 0) || soap_put_ns__AssignDeviceToUser(soap, p, "ns:AssignDeviceToUser", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__AssignDeviceToUser * SOAP_FMAC4 soap_get_ns__AssignDeviceToUser(struct soap*, struct ns__AssignDeviceToUser *, const char*, const char*);

inline int soap_read_ns__AssignDeviceToUser(struct soap *soap, struct ns__AssignDeviceToUser *p)
{
	if (p)
	{	soap_default_ns__AssignDeviceToUser(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__AssignDeviceToUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__AssignDeviceToUser(struct soap *soap, const char *URL, struct ns__AssignDeviceToUser *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__AssignDeviceToUser(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__AssignDeviceToUser(struct soap *soap, struct ns__AssignDeviceToUser *p)
{
	if (soap_read_ns__AssignDeviceToUser(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__DeleteUser_DEFINED
#define SOAP_TYPE_ns__DeleteUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DeleteUser(struct soap*, struct ns__DeleteUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DeleteUser(struct soap*, const struct ns__DeleteUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeleteUser(struct soap*, const char*, int, const struct ns__DeleteUser *, const char*);
SOAP_FMAC3 struct ns__DeleteUser * SOAP_FMAC4 soap_in_ns__DeleteUser(struct soap*, const char*, struct ns__DeleteUser *, const char*);
SOAP_FMAC1 struct ns__DeleteUser * SOAP_FMAC2 Server_Soap_instantiate_ns__DeleteUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__DeleteUser * soap_new_ns__DeleteUser(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__DeleteUser(soap, n, NULL, NULL, NULL);
}

inline struct ns__DeleteUser * soap_new_req_ns__DeleteUser(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__User& requestDeleteUser)
{
	struct ns__DeleteUser *_p = soap_new_ns__DeleteUser(soap);
	if (_p)
	{	soap_default_ns__DeleteUser(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDeleteUser = requestDeleteUser;
	}
	return _p;
}

inline struct ns__DeleteUser * soap_new_set_ns__DeleteUser(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__User& requestDeleteUser)
{
	struct ns__DeleteUser *_p = soap_new_ns__DeleteUser(soap);
	if (_p)
	{	soap_default_ns__DeleteUser(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDeleteUser = requestDeleteUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeleteUser(struct soap*, const struct ns__DeleteUser *, const char*, const char*);

inline int soap_write_ns__DeleteUser(struct soap *soap, struct ns__DeleteUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__DeleteUser(soap, p), 0) || soap_put_ns__DeleteUser(soap, p, "ns:DeleteUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__DeleteUser(struct soap *soap, const char *URL, struct ns__DeleteUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__DeleteUser(soap, p), 0) || soap_put_ns__DeleteUser(soap, p, "ns:DeleteUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__DeleteUser(struct soap *soap, const char *URL, struct ns__DeleteUser const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__DeleteUser(soap, p), 0) || soap_put_ns__DeleteUser(soap, p, "ns:DeleteUser", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__DeleteUser * SOAP_FMAC4 soap_get_ns__DeleteUser(struct soap*, struct ns__DeleteUser *, const char*, const char*);

inline int soap_read_ns__DeleteUser(struct soap *soap, struct ns__DeleteUser *p)
{
	if (p)
	{	soap_default_ns__DeleteUser(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__DeleteUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__DeleteUser(struct soap *soap, const char *URL, struct ns__DeleteUser *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__DeleteUser(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__DeleteUser(struct soap *soap, struct ns__DeleteUser *p)
{
	if (soap_read_ns__DeleteUser(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__UpdateUser_DEFINED
#define SOAP_TYPE_ns__UpdateUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__UpdateUser(struct soap*, struct ns__UpdateUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__UpdateUser(struct soap*, const struct ns__UpdateUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UpdateUser(struct soap*, const char*, int, const struct ns__UpdateUser *, const char*);
SOAP_FMAC3 struct ns__UpdateUser * SOAP_FMAC4 soap_in_ns__UpdateUser(struct soap*, const char*, struct ns__UpdateUser *, const char*);
SOAP_FMAC1 struct ns__UpdateUser * SOAP_FMAC2 Server_Soap_instantiate_ns__UpdateUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__UpdateUser * soap_new_ns__UpdateUser(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__UpdateUser(soap, n, NULL, NULL, NULL);
}

inline struct ns__UpdateUser * soap_new_req_ns__UpdateUser(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__User& requestNewUser)
{
	struct ns__UpdateUser *_p = soap_new_ns__UpdateUser(soap);
	if (_p)
	{	soap_default_ns__UpdateUser(soap, _p);
		_p->requestUser = requestUser;
		_p->requestNewUser = requestNewUser;
	}
	return _p;
}

inline struct ns__UpdateUser * soap_new_set_ns__UpdateUser(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__User& requestNewUser)
{
	struct ns__UpdateUser *_p = soap_new_ns__UpdateUser(soap);
	if (_p)
	{	soap_default_ns__UpdateUser(soap, _p);
		_p->requestUser = requestUser;
		_p->requestNewUser = requestNewUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__UpdateUser(struct soap*, const struct ns__UpdateUser *, const char*, const char*);

inline int soap_write_ns__UpdateUser(struct soap *soap, struct ns__UpdateUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__UpdateUser(soap, p), 0) || soap_put_ns__UpdateUser(soap, p, "ns:UpdateUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__UpdateUser(struct soap *soap, const char *URL, struct ns__UpdateUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__UpdateUser(soap, p), 0) || soap_put_ns__UpdateUser(soap, p, "ns:UpdateUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__UpdateUser(struct soap *soap, const char *URL, struct ns__UpdateUser const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__UpdateUser(soap, p), 0) || soap_put_ns__UpdateUser(soap, p, "ns:UpdateUser", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__UpdateUser * SOAP_FMAC4 soap_get_ns__UpdateUser(struct soap*, struct ns__UpdateUser *, const char*, const char*);

inline int soap_read_ns__UpdateUser(struct soap *soap, struct ns__UpdateUser *p)
{
	if (p)
	{	soap_default_ns__UpdateUser(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__UpdateUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__UpdateUser(struct soap *soap, const char *URL, struct ns__UpdateUser *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__UpdateUser(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__UpdateUser(struct soap *soap, struct ns__UpdateUser *p)
{
	if (soap_read_ns__UpdateUser(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__AddUser_DEFINED
#define SOAP_TYPE_ns__AddUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AddUser(struct soap*, struct ns__AddUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AddUser(struct soap*, const struct ns__AddUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AddUser(struct soap*, const char*, int, const struct ns__AddUser *, const char*);
SOAP_FMAC3 struct ns__AddUser * SOAP_FMAC4 soap_in_ns__AddUser(struct soap*, const char*, struct ns__AddUser *, const char*);
SOAP_FMAC1 struct ns__AddUser * SOAP_FMAC2 Server_Soap_instantiate_ns__AddUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__AddUser * soap_new_ns__AddUser(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__AddUser(soap, n, NULL, NULL, NULL);
}

inline struct ns__AddUser * soap_new_req_ns__AddUser(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__User& requestNewUser)
{
	struct ns__AddUser *_p = soap_new_ns__AddUser(soap);
	if (_p)
	{	soap_default_ns__AddUser(soap, _p);
		_p->requestUser = requestUser;
		_p->requestNewUser = requestNewUser;
	}
	return _p;
}

inline struct ns__AddUser * soap_new_set_ns__AddUser(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__User& requestNewUser)
{
	struct ns__AddUser *_p = soap_new_ns__AddUser(soap);
	if (_p)
	{	soap_default_ns__AddUser(soap, _p);
		_p->requestUser = requestUser;
		_p->requestNewUser = requestNewUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AddUser(struct soap*, const struct ns__AddUser *, const char*, const char*);

inline int soap_write_ns__AddUser(struct soap *soap, struct ns__AddUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__AddUser(soap, p), 0) || soap_put_ns__AddUser(soap, p, "ns:AddUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__AddUser(struct soap *soap, const char *URL, struct ns__AddUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__AddUser(soap, p), 0) || soap_put_ns__AddUser(soap, p, "ns:AddUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__AddUser(struct soap *soap, const char *URL, struct ns__AddUser const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__AddUser(soap, p), 0) || soap_put_ns__AddUser(soap, p, "ns:AddUser", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__AddUser * SOAP_FMAC4 soap_get_ns__AddUser(struct soap*, struct ns__AddUser *, const char*, const char*);

inline int soap_read_ns__AddUser(struct soap *soap, struct ns__AddUser *p)
{
	if (p)
	{	soap_default_ns__AddUser(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__AddUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__AddUser(struct soap *soap, const char *URL, struct ns__AddUser *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__AddUser(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__AddUser(struct soap *soap, struct ns__AddUser *p)
{
	if (soap_read_ns__AddUser(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetUsersList_DEFINED
#define SOAP_TYPE_ns__GetUsersList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetUsersList(struct soap*, struct ns__GetUsersList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetUsersList(struct soap*, const struct ns__GetUsersList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetUsersList(struct soap*, const char*, int, const struct ns__GetUsersList *, const char*);
SOAP_FMAC3 struct ns__GetUsersList * SOAP_FMAC4 soap_in_ns__GetUsersList(struct soap*, const char*, struct ns__GetUsersList *, const char*);
SOAP_FMAC1 struct ns__GetUsersList * SOAP_FMAC2 Server_Soap_instantiate_ns__GetUsersList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetUsersList * soap_new_ns__GetUsersList(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetUsersList(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetUsersList * soap_new_req_ns__GetUsersList(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__GetUsersList *_p = soap_new_ns__GetUsersList(soap);
	if (_p)
	{	soap_default_ns__GetUsersList(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}

inline struct ns__GetUsersList * soap_new_set_ns__GetUsersList(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__GetUsersList *_p = soap_new_ns__GetUsersList(soap);
	if (_p)
	{	soap_default_ns__GetUsersList(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetUsersList(struct soap*, const struct ns__GetUsersList *, const char*, const char*);

inline int soap_write_ns__GetUsersList(struct soap *soap, struct ns__GetUsersList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetUsersList(soap, p), 0) || soap_put_ns__GetUsersList(soap, p, "ns:GetUsersList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetUsersList(struct soap *soap, const char *URL, struct ns__GetUsersList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetUsersList(soap, p), 0) || soap_put_ns__GetUsersList(soap, p, "ns:GetUsersList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetUsersList(struct soap *soap, const char *URL, struct ns__GetUsersList const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetUsersList(soap, p), 0) || soap_put_ns__GetUsersList(soap, p, "ns:GetUsersList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetUsersList * SOAP_FMAC4 soap_get_ns__GetUsersList(struct soap*, struct ns__GetUsersList *, const char*, const char*);

inline int soap_read_ns__GetUsersList(struct soap *soap, struct ns__GetUsersList *p)
{
	if (p)
	{	soap_default_ns__GetUsersList(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetUsersList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetUsersList(struct soap *soap, const char *URL, struct ns__GetUsersList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetUsersList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetUsersList(struct soap *soap, struct ns__GetUsersList *p)
{
	if (soap_read_ns__GetUsersList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetUserDeviceList_DEFINED
#define SOAP_TYPE_ns__GetUserDeviceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetUserDeviceList(struct soap*, struct ns__GetUserDeviceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetUserDeviceList(struct soap*, const struct ns__GetUserDeviceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetUserDeviceList(struct soap*, const char*, int, const struct ns__GetUserDeviceList *, const char*);
SOAP_FMAC3 struct ns__GetUserDeviceList * SOAP_FMAC4 soap_in_ns__GetUserDeviceList(struct soap*, const char*, struct ns__GetUserDeviceList *, const char*);
SOAP_FMAC1 struct ns__GetUserDeviceList * SOAP_FMAC2 Server_Soap_instantiate_ns__GetUserDeviceList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetUserDeviceList * soap_new_ns__GetUserDeviceList(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetUserDeviceList(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetUserDeviceList * soap_new_req_ns__GetUserDeviceList(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__GetUserDeviceList *_p = soap_new_ns__GetUserDeviceList(soap);
	if (_p)
	{	soap_default_ns__GetUserDeviceList(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}

inline struct ns__GetUserDeviceList * soap_new_set_ns__GetUserDeviceList(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__GetUserDeviceList *_p = soap_new_ns__GetUserDeviceList(soap);
	if (_p)
	{	soap_default_ns__GetUserDeviceList(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetUserDeviceList(struct soap*, const struct ns__GetUserDeviceList *, const char*, const char*);

inline int soap_write_ns__GetUserDeviceList(struct soap *soap, struct ns__GetUserDeviceList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetUserDeviceList(soap, p), 0) || soap_put_ns__GetUserDeviceList(soap, p, "ns:GetUserDeviceList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetUserDeviceList(struct soap *soap, const char *URL, struct ns__GetUserDeviceList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetUserDeviceList(soap, p), 0) || soap_put_ns__GetUserDeviceList(soap, p, "ns:GetUserDeviceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetUserDeviceList(struct soap *soap, const char *URL, struct ns__GetUserDeviceList const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetUserDeviceList(soap, p), 0) || soap_put_ns__GetUserDeviceList(soap, p, "ns:GetUserDeviceList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetUserDeviceList * SOAP_FMAC4 soap_get_ns__GetUserDeviceList(struct soap*, struct ns__GetUserDeviceList *, const char*, const char*);

inline int soap_read_ns__GetUserDeviceList(struct soap *soap, struct ns__GetUserDeviceList *p)
{
	if (p)
	{	soap_default_ns__GetUserDeviceList(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetUserDeviceList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetUserDeviceList(struct soap *soap, const char *URL, struct ns__GetUserDeviceList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetUserDeviceList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetUserDeviceList(struct soap *soap, struct ns__GetUserDeviceList *p)
{
	if (soap_read_ns__GetUserDeviceList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__Login_DEFINED
#define SOAP_TYPE_ns__Login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Login(struct soap*, struct ns__Login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Login(struct soap*, const struct ns__Login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Login(struct soap*, const char*, int, const struct ns__Login *, const char*);
SOAP_FMAC3 struct ns__Login * SOAP_FMAC4 soap_in_ns__Login(struct soap*, const char*, struct ns__Login *, const char*);
SOAP_FMAC1 struct ns__Login * SOAP_FMAC2 Server_Soap_instantiate_ns__Login(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__Login * soap_new_ns__Login(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__Login(soap, n, NULL, NULL, NULL);
}

inline struct ns__Login * soap_new_req_ns__Login(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__Login *_p = soap_new_ns__Login(soap);
	if (_p)
	{	soap_default_ns__Login(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}

inline struct ns__Login * soap_new_set_ns__Login(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__Login *_p = soap_new_ns__Login(soap);
	if (_p)
	{	soap_default_ns__Login(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Login(struct soap*, const struct ns__Login *, const char*, const char*);

inline int soap_write_ns__Login(struct soap *soap, struct ns__Login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__Login(soap, p), 0) || soap_put_ns__Login(soap, p, "ns:Login", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__Login(struct soap *soap, const char *URL, struct ns__Login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__Login(soap, p), 0) || soap_put_ns__Login(soap, p, "ns:Login", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__Login(struct soap *soap, const char *URL, struct ns__Login const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__Login(soap, p), 0) || soap_put_ns__Login(soap, p, "ns:Login", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__Login * SOAP_FMAC4 soap_get_ns__Login(struct soap*, struct ns__Login *, const char*, const char*);

inline int soap_read_ns__Login(struct soap *soap, struct ns__Login *p)
{
	if (p)
	{	soap_default_ns__Login(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__Login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__Login(struct soap *soap, const char *URL, struct ns__Login *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__Login(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__Login(struct soap *soap, struct ns__Login *p)
{
	if (soap_read_ns__Login(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetDeviceCalibration_DEFINED
#define SOAP_TYPE_ns__GetDeviceCalibration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDeviceCalibration(struct soap*, struct ns__GetDeviceCalibration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDeviceCalibration(struct soap*, const struct ns__GetDeviceCalibration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDeviceCalibration(struct soap*, const char*, int, const struct ns__GetDeviceCalibration *, const char*);
SOAP_FMAC3 struct ns__GetDeviceCalibration * SOAP_FMAC4 soap_in_ns__GetDeviceCalibration(struct soap*, const char*, struct ns__GetDeviceCalibration *, const char*);
SOAP_FMAC1 struct ns__GetDeviceCalibration * SOAP_FMAC2 Server_Soap_instantiate_ns__GetDeviceCalibration(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetDeviceCalibration * soap_new_ns__GetDeviceCalibration(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetDeviceCalibration(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetDeviceCalibration * soap_new_req_ns__GetDeviceCalibration(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__GetDeviceCalibration *_p = soap_new_ns__GetDeviceCalibration(soap);
	if (_p)
	{	soap_default_ns__GetDeviceCalibration(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}

inline struct ns__GetDeviceCalibration * soap_new_set_ns__GetDeviceCalibration(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__GetDeviceCalibration *_p = soap_new_ns__GetDeviceCalibration(soap);
	if (_p)
	{	soap_default_ns__GetDeviceCalibration(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDeviceCalibration(struct soap*, const struct ns__GetDeviceCalibration *, const char*, const char*);

inline int soap_write_ns__GetDeviceCalibration(struct soap *soap, struct ns__GetDeviceCalibration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetDeviceCalibration(soap, p), 0) || soap_put_ns__GetDeviceCalibration(soap, p, "ns:GetDeviceCalibration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetDeviceCalibration(struct soap *soap, const char *URL, struct ns__GetDeviceCalibration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetDeviceCalibration(soap, p), 0) || soap_put_ns__GetDeviceCalibration(soap, p, "ns:GetDeviceCalibration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetDeviceCalibration(struct soap *soap, const char *URL, struct ns__GetDeviceCalibration const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetDeviceCalibration(soap, p), 0) || soap_put_ns__GetDeviceCalibration(soap, p, "ns:GetDeviceCalibration", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetDeviceCalibration * SOAP_FMAC4 soap_get_ns__GetDeviceCalibration(struct soap*, struct ns__GetDeviceCalibration *, const char*, const char*);

inline int soap_read_ns__GetDeviceCalibration(struct soap *soap, struct ns__GetDeviceCalibration *p)
{
	if (p)
	{	soap_default_ns__GetDeviceCalibration(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetDeviceCalibration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetDeviceCalibration(struct soap *soap, const char *URL, struct ns__GetDeviceCalibration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetDeviceCalibration(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetDeviceCalibration(struct soap *soap, struct ns__GetDeviceCalibration *p)
{
	if (soap_read_ns__GetDeviceCalibration(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SetDeviceCalibration_DEFINED
#define SOAP_TYPE_ns__SetDeviceCalibration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetDeviceCalibration(struct soap*, struct ns__SetDeviceCalibration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetDeviceCalibration(struct soap*, const struct ns__SetDeviceCalibration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetDeviceCalibration(struct soap*, const char*, int, const struct ns__SetDeviceCalibration *, const char*);
SOAP_FMAC3 struct ns__SetDeviceCalibration * SOAP_FMAC4 soap_in_ns__SetDeviceCalibration(struct soap*, const char*, struct ns__SetDeviceCalibration *, const char*);
SOAP_FMAC1 struct ns__SetDeviceCalibration * SOAP_FMAC2 Server_Soap_instantiate_ns__SetDeviceCalibration(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SetDeviceCalibration * soap_new_ns__SetDeviceCalibration(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__SetDeviceCalibration(soap, n, NULL, NULL, NULL);
}

inline struct ns__SetDeviceCalibration * soap_new_req_ns__SetDeviceCalibration(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice,
	const ns__CalibrationList& requestCalibrationList)
{
	struct ns__SetDeviceCalibration *_p = soap_new_ns__SetDeviceCalibration(soap);
	if (_p)
	{	soap_default_ns__SetDeviceCalibration(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
		_p->requestCalibrationList = requestCalibrationList;
	}
	return _p;
}

inline struct ns__SetDeviceCalibration * soap_new_set_ns__SetDeviceCalibration(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice,
	const ns__CalibrationList& requestCalibrationList)
{
	struct ns__SetDeviceCalibration *_p = soap_new_ns__SetDeviceCalibration(soap);
	if (_p)
	{	soap_default_ns__SetDeviceCalibration(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
		_p->requestCalibrationList = requestCalibrationList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetDeviceCalibration(struct soap*, const struct ns__SetDeviceCalibration *, const char*, const char*);

inline int soap_write_ns__SetDeviceCalibration(struct soap *soap, struct ns__SetDeviceCalibration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__SetDeviceCalibration(soap, p), 0) || soap_put_ns__SetDeviceCalibration(soap, p, "ns:SetDeviceCalibration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SetDeviceCalibration(struct soap *soap, const char *URL, struct ns__SetDeviceCalibration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__SetDeviceCalibration(soap, p), 0) || soap_put_ns__SetDeviceCalibration(soap, p, "ns:SetDeviceCalibration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SetDeviceCalibration(struct soap *soap, const char *URL, struct ns__SetDeviceCalibration const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__SetDeviceCalibration(soap, p), 0) || soap_put_ns__SetDeviceCalibration(soap, p, "ns:SetDeviceCalibration", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__SetDeviceCalibration * SOAP_FMAC4 soap_get_ns__SetDeviceCalibration(struct soap*, struct ns__SetDeviceCalibration *, const char*, const char*);

inline int soap_read_ns__SetDeviceCalibration(struct soap *soap, struct ns__SetDeviceCalibration *p)
{
	if (p)
	{	soap_default_ns__SetDeviceCalibration(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__SetDeviceCalibration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SetDeviceCalibration(struct soap *soap, const char *URL, struct ns__SetDeviceCalibration *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SetDeviceCalibration(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SetDeviceCalibration(struct soap *soap, struct ns__SetDeviceCalibration *p)
{
	if (soap_read_ns__SetDeviceCalibration(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__DeleteDevices_DEFINED
#define SOAP_TYPE_ns__DeleteDevices_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DeleteDevices(struct soap*, struct ns__DeleteDevices *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DeleteDevices(struct soap*, const struct ns__DeleteDevices *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeleteDevices(struct soap*, const char*, int, const struct ns__DeleteDevices *, const char*);
SOAP_FMAC3 struct ns__DeleteDevices * SOAP_FMAC4 soap_in_ns__DeleteDevices(struct soap*, const char*, struct ns__DeleteDevices *, const char*);
SOAP_FMAC1 struct ns__DeleteDevices * SOAP_FMAC2 Server_Soap_instantiate_ns__DeleteDevices(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__DeleteDevices * soap_new_ns__DeleteDevices(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__DeleteDevices(soap, n, NULL, NULL, NULL);
}

inline struct ns__DeleteDevices * soap_new_req_ns__DeleteDevices(
	struct soap *soap,
	const ns__User& requestUser,
	const std::vector<ns__Device> & requestDeviceList)
{
	struct ns__DeleteDevices *_p = soap_new_ns__DeleteDevices(soap);
	if (_p)
	{	soap_default_ns__DeleteDevices(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDeviceList = requestDeviceList;
	}
	return _p;
}

inline struct ns__DeleteDevices * soap_new_set_ns__DeleteDevices(
	struct soap *soap,
	const ns__User& requestUser,
	const std::vector<ns__Device> & requestDeviceList)
{
	struct ns__DeleteDevices *_p = soap_new_ns__DeleteDevices(soap);
	if (_p)
	{	soap_default_ns__DeleteDevices(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDeviceList = requestDeviceList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeleteDevices(struct soap*, const struct ns__DeleteDevices *, const char*, const char*);

inline int soap_write_ns__DeleteDevices(struct soap *soap, struct ns__DeleteDevices const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__DeleteDevices(soap, p), 0) || soap_put_ns__DeleteDevices(soap, p, "ns:DeleteDevices", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__DeleteDevices(struct soap *soap, const char *URL, struct ns__DeleteDevices const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__DeleteDevices(soap, p), 0) || soap_put_ns__DeleteDevices(soap, p, "ns:DeleteDevices", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__DeleteDevices(struct soap *soap, const char *URL, struct ns__DeleteDevices const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__DeleteDevices(soap, p), 0) || soap_put_ns__DeleteDevices(soap, p, "ns:DeleteDevices", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__DeleteDevices * SOAP_FMAC4 soap_get_ns__DeleteDevices(struct soap*, struct ns__DeleteDevices *, const char*, const char*);

inline int soap_read_ns__DeleteDevices(struct soap *soap, struct ns__DeleteDevices *p)
{
	if (p)
	{	soap_default_ns__DeleteDevices(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__DeleteDevices(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__DeleteDevices(struct soap *soap, const char *URL, struct ns__DeleteDevices *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__DeleteDevices(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__DeleteDevices(struct soap *soap, struct ns__DeleteDevices *p)
{
	if (soap_read_ns__DeleteDevices(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__DeleteDevicesResponse_DEFINED
#define SOAP_TYPE_ns__DeleteDevicesResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DeleteDevicesResponse(struct soap*, struct ns__DeleteDevicesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DeleteDevicesResponse(struct soap*, const struct ns__DeleteDevicesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeleteDevicesResponse(struct soap*, const char*, int, const struct ns__DeleteDevicesResponse *, const char*);
SOAP_FMAC3 struct ns__DeleteDevicesResponse * SOAP_FMAC4 soap_in_ns__DeleteDevicesResponse(struct soap*, const char*, struct ns__DeleteDevicesResponse *, const char*);
SOAP_FMAC1 struct ns__DeleteDevicesResponse * SOAP_FMAC2 Server_Soap_instantiate_ns__DeleteDevicesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__DeleteDevicesResponse * soap_new_ns__DeleteDevicesResponse(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__DeleteDevicesResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__DeleteDevicesResponse * soap_new_req_ns__DeleteDevicesResponse(
	struct soap *soap,
	const std::vector<ns__ErrorCode> & responseError)
{
	struct ns__DeleteDevicesResponse *_p = soap_new_ns__DeleteDevicesResponse(soap);
	if (_p)
	{	soap_default_ns__DeleteDevicesResponse(soap, _p);
		_p->responseError = responseError;
	}
	return _p;
}

inline struct ns__DeleteDevicesResponse * soap_new_set_ns__DeleteDevicesResponse(
	struct soap *soap,
	const std::vector<ns__ErrorCode> & responseError)
{
	struct ns__DeleteDevicesResponse *_p = soap_new_ns__DeleteDevicesResponse(soap);
	if (_p)
	{	soap_default_ns__DeleteDevicesResponse(soap, _p);
		_p->responseError = responseError;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeleteDevicesResponse(struct soap*, const struct ns__DeleteDevicesResponse *, const char*, const char*);

inline int soap_write_ns__DeleteDevicesResponse(struct soap *soap, struct ns__DeleteDevicesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__DeleteDevicesResponse(soap, p), 0) || soap_put_ns__DeleteDevicesResponse(soap, p, "ns:DeleteDevicesResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__DeleteDevicesResponse(struct soap *soap, const char *URL, struct ns__DeleteDevicesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__DeleteDevicesResponse(soap, p), 0) || soap_put_ns__DeleteDevicesResponse(soap, p, "ns:DeleteDevicesResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__DeleteDevicesResponse(struct soap *soap, const char *URL, struct ns__DeleteDevicesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__DeleteDevicesResponse(soap, p), 0) || soap_put_ns__DeleteDevicesResponse(soap, p, "ns:DeleteDevicesResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__DeleteDevicesResponse * SOAP_FMAC4 soap_get_ns__DeleteDevicesResponse(struct soap*, struct ns__DeleteDevicesResponse *, const char*, const char*);

inline int soap_read_ns__DeleteDevicesResponse(struct soap *soap, struct ns__DeleteDevicesResponse *p)
{
	if (p)
	{	soap_default_ns__DeleteDevicesResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__DeleteDevicesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__DeleteDevicesResponse(struct soap *soap, const char *URL, struct ns__DeleteDevicesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__DeleteDevicesResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__DeleteDevicesResponse(struct soap *soap, struct ns__DeleteDevicesResponse *p)
{
	if (soap_read_ns__DeleteDevicesResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SetAllDeviceSetting_DEFINED
#define SOAP_TYPE_ns__SetAllDeviceSetting_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetAllDeviceSetting(struct soap*, struct ns__SetAllDeviceSetting *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetAllDeviceSetting(struct soap*, const struct ns__SetAllDeviceSetting *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetAllDeviceSetting(struct soap*, const char*, int, const struct ns__SetAllDeviceSetting *, const char*);
SOAP_FMAC3 struct ns__SetAllDeviceSetting * SOAP_FMAC4 soap_in_ns__SetAllDeviceSetting(struct soap*, const char*, struct ns__SetAllDeviceSetting *, const char*);
SOAP_FMAC1 struct ns__SetAllDeviceSetting * SOAP_FMAC2 Server_Soap_instantiate_ns__SetAllDeviceSetting(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SetAllDeviceSetting * soap_new_ns__SetAllDeviceSetting(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__SetAllDeviceSetting(soap, n, NULL, NULL, NULL);
}

inline struct ns__SetAllDeviceSetting * soap_new_req_ns__SetAllDeviceSetting(
	struct soap *soap,
	const ns__User& requestUser,
	const std::vector<ns__Device> & requestDevice)
{
	struct ns__SetAllDeviceSetting *_p = soap_new_ns__SetAllDeviceSetting(soap);
	if (_p)
	{	soap_default_ns__SetAllDeviceSetting(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}

inline struct ns__SetAllDeviceSetting * soap_new_set_ns__SetAllDeviceSetting(
	struct soap *soap,
	const ns__User& requestUser,
	const std::vector<ns__Device> & requestDevice)
{
	struct ns__SetAllDeviceSetting *_p = soap_new_ns__SetAllDeviceSetting(soap);
	if (_p)
	{	soap_default_ns__SetAllDeviceSetting(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetAllDeviceSetting(struct soap*, const struct ns__SetAllDeviceSetting *, const char*, const char*);

inline int soap_write_ns__SetAllDeviceSetting(struct soap *soap, struct ns__SetAllDeviceSetting const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__SetAllDeviceSetting(soap, p), 0) || soap_put_ns__SetAllDeviceSetting(soap, p, "ns:SetAllDeviceSetting", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SetAllDeviceSetting(struct soap *soap, const char *URL, struct ns__SetAllDeviceSetting const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__SetAllDeviceSetting(soap, p), 0) || soap_put_ns__SetAllDeviceSetting(soap, p, "ns:SetAllDeviceSetting", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SetAllDeviceSetting(struct soap *soap, const char *URL, struct ns__SetAllDeviceSetting const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__SetAllDeviceSetting(soap, p), 0) || soap_put_ns__SetAllDeviceSetting(soap, p, "ns:SetAllDeviceSetting", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__SetAllDeviceSetting * SOAP_FMAC4 soap_get_ns__SetAllDeviceSetting(struct soap*, struct ns__SetAllDeviceSetting *, const char*, const char*);

inline int soap_read_ns__SetAllDeviceSetting(struct soap *soap, struct ns__SetAllDeviceSetting *p)
{
	if (p)
	{	soap_default_ns__SetAllDeviceSetting(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__SetAllDeviceSetting(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SetAllDeviceSetting(struct soap *soap, const char *URL, struct ns__SetAllDeviceSetting *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SetAllDeviceSetting(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SetAllDeviceSetting(struct soap *soap, struct ns__SetAllDeviceSetting *p)
{
	if (soap_read_ns__SetAllDeviceSetting(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SetAllDeviceSettingResponse_DEFINED
#define SOAP_TYPE_ns__SetAllDeviceSettingResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetAllDeviceSettingResponse(struct soap*, struct ns__SetAllDeviceSettingResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetAllDeviceSettingResponse(struct soap*, const struct ns__SetAllDeviceSettingResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetAllDeviceSettingResponse(struct soap*, const char*, int, const struct ns__SetAllDeviceSettingResponse *, const char*);
SOAP_FMAC3 struct ns__SetAllDeviceSettingResponse * SOAP_FMAC4 soap_in_ns__SetAllDeviceSettingResponse(struct soap*, const char*, struct ns__SetAllDeviceSettingResponse *, const char*);
SOAP_FMAC1 struct ns__SetAllDeviceSettingResponse * SOAP_FMAC2 Server_Soap_instantiate_ns__SetAllDeviceSettingResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SetAllDeviceSettingResponse * soap_new_ns__SetAllDeviceSettingResponse(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__SetAllDeviceSettingResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__SetAllDeviceSettingResponse * soap_new_req_ns__SetAllDeviceSettingResponse(
	struct soap *soap,
	const std::vector<ns__ErrorCode> & responseError)
{
	struct ns__SetAllDeviceSettingResponse *_p = soap_new_ns__SetAllDeviceSettingResponse(soap);
	if (_p)
	{	soap_default_ns__SetAllDeviceSettingResponse(soap, _p);
		_p->responseError = responseError;
	}
	return _p;
}

inline struct ns__SetAllDeviceSettingResponse * soap_new_set_ns__SetAllDeviceSettingResponse(
	struct soap *soap,
	const std::vector<ns__ErrorCode> & responseError)
{
	struct ns__SetAllDeviceSettingResponse *_p = soap_new_ns__SetAllDeviceSettingResponse(soap);
	if (_p)
	{	soap_default_ns__SetAllDeviceSettingResponse(soap, _p);
		_p->responseError = responseError;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetAllDeviceSettingResponse(struct soap*, const struct ns__SetAllDeviceSettingResponse *, const char*, const char*);

inline int soap_write_ns__SetAllDeviceSettingResponse(struct soap *soap, struct ns__SetAllDeviceSettingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__SetAllDeviceSettingResponse(soap, p), 0) || soap_put_ns__SetAllDeviceSettingResponse(soap, p, "ns:SetAllDeviceSettingResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SetAllDeviceSettingResponse(struct soap *soap, const char *URL, struct ns__SetAllDeviceSettingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__SetAllDeviceSettingResponse(soap, p), 0) || soap_put_ns__SetAllDeviceSettingResponse(soap, p, "ns:SetAllDeviceSettingResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SetAllDeviceSettingResponse(struct soap *soap, const char *URL, struct ns__SetAllDeviceSettingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__SetAllDeviceSettingResponse(soap, p), 0) || soap_put_ns__SetAllDeviceSettingResponse(soap, p, "ns:SetAllDeviceSettingResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__SetAllDeviceSettingResponse * SOAP_FMAC4 soap_get_ns__SetAllDeviceSettingResponse(struct soap*, struct ns__SetAllDeviceSettingResponse *, const char*, const char*);

inline int soap_read_ns__SetAllDeviceSettingResponse(struct soap *soap, struct ns__SetAllDeviceSettingResponse *p)
{
	if (p)
	{	soap_default_ns__SetAllDeviceSettingResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__SetAllDeviceSettingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SetAllDeviceSettingResponse(struct soap *soap, const char *URL, struct ns__SetAllDeviceSettingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SetAllDeviceSettingResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SetAllDeviceSettingResponse(struct soap *soap, struct ns__SetAllDeviceSettingResponse *p)
{
	if (soap_read_ns__SetAllDeviceSettingResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SetDeviceSettingSMS_DEFINED
#define SOAP_TYPE_ns__SetDeviceSettingSMS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetDeviceSettingSMS(struct soap*, struct ns__SetDeviceSettingSMS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetDeviceSettingSMS(struct soap*, const struct ns__SetDeviceSettingSMS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetDeviceSettingSMS(struct soap*, const char*, int, const struct ns__SetDeviceSettingSMS *, const char*);
SOAP_FMAC3 struct ns__SetDeviceSettingSMS * SOAP_FMAC4 soap_in_ns__SetDeviceSettingSMS(struct soap*, const char*, struct ns__SetDeviceSettingSMS *, const char*);
SOAP_FMAC1 struct ns__SetDeviceSettingSMS * SOAP_FMAC2 Server_Soap_instantiate_ns__SetDeviceSettingSMS(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SetDeviceSettingSMS * soap_new_ns__SetDeviceSettingSMS(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__SetDeviceSettingSMS(soap, n, NULL, NULL, NULL);
}

inline struct ns__SetDeviceSettingSMS * soap_new_req_ns__SetDeviceSettingSMS(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__SetDeviceSettingSMS *_p = soap_new_ns__SetDeviceSettingSMS(soap);
	if (_p)
	{	soap_default_ns__SetDeviceSettingSMS(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}

inline struct ns__SetDeviceSettingSMS * soap_new_set_ns__SetDeviceSettingSMS(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__SetDeviceSettingSMS *_p = soap_new_ns__SetDeviceSettingSMS(soap);
	if (_p)
	{	soap_default_ns__SetDeviceSettingSMS(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetDeviceSettingSMS(struct soap*, const struct ns__SetDeviceSettingSMS *, const char*, const char*);

inline int soap_write_ns__SetDeviceSettingSMS(struct soap *soap, struct ns__SetDeviceSettingSMS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__SetDeviceSettingSMS(soap, p), 0) || soap_put_ns__SetDeviceSettingSMS(soap, p, "ns:SetDeviceSettingSMS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SetDeviceSettingSMS(struct soap *soap, const char *URL, struct ns__SetDeviceSettingSMS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__SetDeviceSettingSMS(soap, p), 0) || soap_put_ns__SetDeviceSettingSMS(soap, p, "ns:SetDeviceSettingSMS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SetDeviceSettingSMS(struct soap *soap, const char *URL, struct ns__SetDeviceSettingSMS const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__SetDeviceSettingSMS(soap, p), 0) || soap_put_ns__SetDeviceSettingSMS(soap, p, "ns:SetDeviceSettingSMS", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__SetDeviceSettingSMS * SOAP_FMAC4 soap_get_ns__SetDeviceSettingSMS(struct soap*, struct ns__SetDeviceSettingSMS *, const char*, const char*);

inline int soap_read_ns__SetDeviceSettingSMS(struct soap *soap, struct ns__SetDeviceSettingSMS *p)
{
	if (p)
	{	soap_default_ns__SetDeviceSettingSMS(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__SetDeviceSettingSMS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SetDeviceSettingSMS(struct soap *soap, const char *URL, struct ns__SetDeviceSettingSMS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SetDeviceSettingSMS(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SetDeviceSettingSMS(struct soap *soap, struct ns__SetDeviceSettingSMS *p)
{
	if (soap_read_ns__SetDeviceSettingSMS(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SetDeviceSetting_DEFINED
#define SOAP_TYPE_ns__SetDeviceSetting_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetDeviceSetting(struct soap*, struct ns__SetDeviceSetting *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetDeviceSetting(struct soap*, const struct ns__SetDeviceSetting *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetDeviceSetting(struct soap*, const char*, int, const struct ns__SetDeviceSetting *, const char*);
SOAP_FMAC3 struct ns__SetDeviceSetting * SOAP_FMAC4 soap_in_ns__SetDeviceSetting(struct soap*, const char*, struct ns__SetDeviceSetting *, const char*);
SOAP_FMAC1 struct ns__SetDeviceSetting * SOAP_FMAC2 Server_Soap_instantiate_ns__SetDeviceSetting(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SetDeviceSetting * soap_new_ns__SetDeviceSetting(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__SetDeviceSetting(soap, n, NULL, NULL, NULL);
}

inline struct ns__SetDeviceSetting * soap_new_req_ns__SetDeviceSetting(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__SetDeviceSetting *_p = soap_new_ns__SetDeviceSetting(soap);
	if (_p)
	{	soap_default_ns__SetDeviceSetting(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}

inline struct ns__SetDeviceSetting * soap_new_set_ns__SetDeviceSetting(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__SetDeviceSetting *_p = soap_new_ns__SetDeviceSetting(soap);
	if (_p)
	{	soap_default_ns__SetDeviceSetting(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetDeviceSetting(struct soap*, const struct ns__SetDeviceSetting *, const char*, const char*);

inline int soap_write_ns__SetDeviceSetting(struct soap *soap, struct ns__SetDeviceSetting const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__SetDeviceSetting(soap, p), 0) || soap_put_ns__SetDeviceSetting(soap, p, "ns:SetDeviceSetting", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SetDeviceSetting(struct soap *soap, const char *URL, struct ns__SetDeviceSetting const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__SetDeviceSetting(soap, p), 0) || soap_put_ns__SetDeviceSetting(soap, p, "ns:SetDeviceSetting", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SetDeviceSetting(struct soap *soap, const char *URL, struct ns__SetDeviceSetting const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__SetDeviceSetting(soap, p), 0) || soap_put_ns__SetDeviceSetting(soap, p, "ns:SetDeviceSetting", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__SetDeviceSetting * SOAP_FMAC4 soap_get_ns__SetDeviceSetting(struct soap*, struct ns__SetDeviceSetting *, const char*, const char*);

inline int soap_read_ns__SetDeviceSetting(struct soap *soap, struct ns__SetDeviceSetting *p)
{
	if (p)
	{	soap_default_ns__SetDeviceSetting(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__SetDeviceSetting(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SetDeviceSetting(struct soap *soap, const char *URL, struct ns__SetDeviceSetting *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SetDeviceSetting(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SetDeviceSetting(struct soap *soap, struct ns__SetDeviceSetting *p)
{
	if (soap_read_ns__SetDeviceSetting(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__SetDeviceSettingResponse_DEFINED
#define SOAP_TYPE_ns__SetDeviceSettingResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetDeviceSettingResponse(struct soap*, struct ns__SetDeviceSettingResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetDeviceSettingResponse(struct soap*, const struct ns__SetDeviceSettingResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetDeviceSettingResponse(struct soap*, const char*, int, const struct ns__SetDeviceSettingResponse *, const char*);
SOAP_FMAC3 struct ns__SetDeviceSettingResponse * SOAP_FMAC4 soap_in_ns__SetDeviceSettingResponse(struct soap*, const char*, struct ns__SetDeviceSettingResponse *, const char*);
SOAP_FMAC1 struct ns__SetDeviceSettingResponse * SOAP_FMAC2 Server_Soap_instantiate_ns__SetDeviceSettingResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SetDeviceSettingResponse * soap_new_ns__SetDeviceSettingResponse(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__SetDeviceSettingResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__SetDeviceSettingResponse * soap_new_req_ns__SetDeviceSettingResponse(
	struct soap *soap,
	const std::vector<ns__ErrorCode> & responseError)
{
	struct ns__SetDeviceSettingResponse *_p = soap_new_ns__SetDeviceSettingResponse(soap);
	if (_p)
	{	soap_default_ns__SetDeviceSettingResponse(soap, _p);
		_p->responseError = responseError;
	}
	return _p;
}

inline struct ns__SetDeviceSettingResponse * soap_new_set_ns__SetDeviceSettingResponse(
	struct soap *soap,
	const std::vector<ns__ErrorCode> & responseError)
{
	struct ns__SetDeviceSettingResponse *_p = soap_new_ns__SetDeviceSettingResponse(soap);
	if (_p)
	{	soap_default_ns__SetDeviceSettingResponse(soap, _p);
		_p->responseError = responseError;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetDeviceSettingResponse(struct soap*, const struct ns__SetDeviceSettingResponse *, const char*, const char*);

inline int soap_write_ns__SetDeviceSettingResponse(struct soap *soap, struct ns__SetDeviceSettingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__SetDeviceSettingResponse(soap, p), 0) || soap_put_ns__SetDeviceSettingResponse(soap, p, "ns:SetDeviceSettingResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SetDeviceSettingResponse(struct soap *soap, const char *URL, struct ns__SetDeviceSettingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__SetDeviceSettingResponse(soap, p), 0) || soap_put_ns__SetDeviceSettingResponse(soap, p, "ns:SetDeviceSettingResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__SetDeviceSettingResponse(struct soap *soap, const char *URL, struct ns__SetDeviceSettingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__SetDeviceSettingResponse(soap, p), 0) || soap_put_ns__SetDeviceSettingResponse(soap, p, "ns:SetDeviceSettingResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__SetDeviceSettingResponse * SOAP_FMAC4 soap_get_ns__SetDeviceSettingResponse(struct soap*, struct ns__SetDeviceSettingResponse *, const char*, const char*);

inline int soap_read_ns__SetDeviceSettingResponse(struct soap *soap, struct ns__SetDeviceSettingResponse *p)
{
	if (p)
	{	soap_default_ns__SetDeviceSettingResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__SetDeviceSettingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SetDeviceSettingResponse(struct soap *soap, const char *URL, struct ns__SetDeviceSettingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__SetDeviceSettingResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__SetDeviceSettingResponse(struct soap *soap, struct ns__SetDeviceSettingResponse *p)
{
	if (soap_read_ns__SetDeviceSettingResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetDevicePicturePart_DEFINED
#define SOAP_TYPE_ns__GetDevicePicturePart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDevicePicturePart(struct soap*, struct ns__GetDevicePicturePart *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDevicePicturePart(struct soap*, const struct ns__GetDevicePicturePart *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDevicePicturePart(struct soap*, const char*, int, const struct ns__GetDevicePicturePart *, const char*);
SOAP_FMAC3 struct ns__GetDevicePicturePart * SOAP_FMAC4 soap_in_ns__GetDevicePicturePart(struct soap*, const char*, struct ns__GetDevicePicturePart *, const char*);
SOAP_FMAC1 struct ns__GetDevicePicturePart * SOAP_FMAC2 Server_Soap_instantiate_ns__GetDevicePicturePart(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetDevicePicturePart * soap_new_ns__GetDevicePicturePart(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetDevicePicturePart(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetDevicePicturePart * soap_new_req_ns__GetDevicePicturePart(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__GetDevicePicturePart *_p = soap_new_ns__GetDevicePicturePart(soap);
	if (_p)
	{	soap_default_ns__GetDevicePicturePart(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}

inline struct ns__GetDevicePicturePart * soap_new_set_ns__GetDevicePicturePart(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__GetDevicePicturePart *_p = soap_new_ns__GetDevicePicturePart(soap);
	if (_p)
	{	soap_default_ns__GetDevicePicturePart(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDevicePicturePart(struct soap*, const struct ns__GetDevicePicturePart *, const char*, const char*);

inline int soap_write_ns__GetDevicePicturePart(struct soap *soap, struct ns__GetDevicePicturePart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetDevicePicturePart(soap, p), 0) || soap_put_ns__GetDevicePicturePart(soap, p, "ns:GetDevicePicturePart", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetDevicePicturePart(struct soap *soap, const char *URL, struct ns__GetDevicePicturePart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetDevicePicturePart(soap, p), 0) || soap_put_ns__GetDevicePicturePart(soap, p, "ns:GetDevicePicturePart", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetDevicePicturePart(struct soap *soap, const char *URL, struct ns__GetDevicePicturePart const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetDevicePicturePart(soap, p), 0) || soap_put_ns__GetDevicePicturePart(soap, p, "ns:GetDevicePicturePart", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetDevicePicturePart * SOAP_FMAC4 soap_get_ns__GetDevicePicturePart(struct soap*, struct ns__GetDevicePicturePart *, const char*, const char*);

inline int soap_read_ns__GetDevicePicturePart(struct soap *soap, struct ns__GetDevicePicturePart *p)
{
	if (p)
	{	soap_default_ns__GetDevicePicturePart(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetDevicePicturePart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetDevicePicturePart(struct soap *soap, const char *URL, struct ns__GetDevicePicturePart *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetDevicePicturePart(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetDevicePicturePart(struct soap *soap, struct ns__GetDevicePicturePart *p)
{
	if (soap_read_ns__GetDevicePicturePart(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetDevicePicture_DEFINED
#define SOAP_TYPE_ns__GetDevicePicture_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDevicePicture(struct soap*, struct ns__GetDevicePicture *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDevicePicture(struct soap*, const struct ns__GetDevicePicture *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDevicePicture(struct soap*, const char*, int, const struct ns__GetDevicePicture *, const char*);
SOAP_FMAC3 struct ns__GetDevicePicture * SOAP_FMAC4 soap_in_ns__GetDevicePicture(struct soap*, const char*, struct ns__GetDevicePicture *, const char*);
SOAP_FMAC1 struct ns__GetDevicePicture * SOAP_FMAC2 Server_Soap_instantiate_ns__GetDevicePicture(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetDevicePicture * soap_new_ns__GetDevicePicture(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetDevicePicture(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetDevicePicture * soap_new_req_ns__GetDevicePicture(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__GetDevicePicture *_p = soap_new_ns__GetDevicePicture(soap);
	if (_p)
	{	soap_default_ns__GetDevicePicture(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}

inline struct ns__GetDevicePicture * soap_new_set_ns__GetDevicePicture(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__GetDevicePicture *_p = soap_new_ns__GetDevicePicture(soap);
	if (_p)
	{	soap_default_ns__GetDevicePicture(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDevicePicture(struct soap*, const struct ns__GetDevicePicture *, const char*, const char*);

inline int soap_write_ns__GetDevicePicture(struct soap *soap, struct ns__GetDevicePicture const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetDevicePicture(soap, p), 0) || soap_put_ns__GetDevicePicture(soap, p, "ns:GetDevicePicture", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetDevicePicture(struct soap *soap, const char *URL, struct ns__GetDevicePicture const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetDevicePicture(soap, p), 0) || soap_put_ns__GetDevicePicture(soap, p, "ns:GetDevicePicture", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetDevicePicture(struct soap *soap, const char *URL, struct ns__GetDevicePicture const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetDevicePicture(soap, p), 0) || soap_put_ns__GetDevicePicture(soap, p, "ns:GetDevicePicture", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetDevicePicture * SOAP_FMAC4 soap_get_ns__GetDevicePicture(struct soap*, struct ns__GetDevicePicture *, const char*, const char*);

inline int soap_read_ns__GetDevicePicture(struct soap *soap, struct ns__GetDevicePicture *p)
{
	if (p)
	{	soap_default_ns__GetDevicePicture(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetDevicePicture(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetDevicePicture(struct soap *soap, const char *URL, struct ns__GetDevicePicture *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetDevicePicture(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetDevicePicture(struct soap *soap, struct ns__GetDevicePicture *p)
{
	if (soap_read_ns__GetDevicePicture(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetAllDeviceStatus_DEFINED
#define SOAP_TYPE_ns__GetAllDeviceStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetAllDeviceStatus(struct soap*, struct ns__GetAllDeviceStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetAllDeviceStatus(struct soap*, const struct ns__GetAllDeviceStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetAllDeviceStatus(struct soap*, const char*, int, const struct ns__GetAllDeviceStatus *, const char*);
SOAP_FMAC3 struct ns__GetAllDeviceStatus * SOAP_FMAC4 soap_in_ns__GetAllDeviceStatus(struct soap*, const char*, struct ns__GetAllDeviceStatus *, const char*);
SOAP_FMAC1 struct ns__GetAllDeviceStatus * SOAP_FMAC2 Server_Soap_instantiate_ns__GetAllDeviceStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetAllDeviceStatus * soap_new_ns__GetAllDeviceStatus(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetAllDeviceStatus(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetAllDeviceStatus * soap_new_req_ns__GetAllDeviceStatus(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__GetAllDeviceStatus *_p = soap_new_ns__GetAllDeviceStatus(soap);
	if (_p)
	{	soap_default_ns__GetAllDeviceStatus(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}

inline struct ns__GetAllDeviceStatus * soap_new_set_ns__GetAllDeviceStatus(
	struct soap *soap,
	const ns__User& requestUser)
{
	struct ns__GetAllDeviceStatus *_p = soap_new_ns__GetAllDeviceStatus(soap);
	if (_p)
	{	soap_default_ns__GetAllDeviceStatus(soap, _p);
		_p->requestUser = requestUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetAllDeviceStatus(struct soap*, const struct ns__GetAllDeviceStatus *, const char*, const char*);

inline int soap_write_ns__GetAllDeviceStatus(struct soap *soap, struct ns__GetAllDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetAllDeviceStatus(soap, p), 0) || soap_put_ns__GetAllDeviceStatus(soap, p, "ns:GetAllDeviceStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetAllDeviceStatus(struct soap *soap, const char *URL, struct ns__GetAllDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetAllDeviceStatus(soap, p), 0) || soap_put_ns__GetAllDeviceStatus(soap, p, "ns:GetAllDeviceStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetAllDeviceStatus(struct soap *soap, const char *URL, struct ns__GetAllDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetAllDeviceStatus(soap, p), 0) || soap_put_ns__GetAllDeviceStatus(soap, p, "ns:GetAllDeviceStatus", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetAllDeviceStatus * SOAP_FMAC4 soap_get_ns__GetAllDeviceStatus(struct soap*, struct ns__GetAllDeviceStatus *, const char*, const char*);

inline int soap_read_ns__GetAllDeviceStatus(struct soap *soap, struct ns__GetAllDeviceStatus *p)
{
	if (p)
	{	soap_default_ns__GetAllDeviceStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetAllDeviceStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetAllDeviceStatus(struct soap *soap, const char *URL, struct ns__GetAllDeviceStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetAllDeviceStatus(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetAllDeviceStatus(struct soap *soap, struct ns__GetAllDeviceStatus *p)
{
	if (soap_read_ns__GetAllDeviceStatus(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetDeviceStatusSMS_DEFINED
#define SOAP_TYPE_ns__GetDeviceStatusSMS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDeviceStatusSMS(struct soap*, struct ns__GetDeviceStatusSMS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDeviceStatusSMS(struct soap*, const struct ns__GetDeviceStatusSMS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDeviceStatusSMS(struct soap*, const char*, int, const struct ns__GetDeviceStatusSMS *, const char*);
SOAP_FMAC3 struct ns__GetDeviceStatusSMS * SOAP_FMAC4 soap_in_ns__GetDeviceStatusSMS(struct soap*, const char*, struct ns__GetDeviceStatusSMS *, const char*);
SOAP_FMAC1 struct ns__GetDeviceStatusSMS * SOAP_FMAC2 Server_Soap_instantiate_ns__GetDeviceStatusSMS(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetDeviceStatusSMS * soap_new_ns__GetDeviceStatusSMS(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetDeviceStatusSMS(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetDeviceStatusSMS * soap_new_req_ns__GetDeviceStatusSMS(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__GetDeviceStatusSMS *_p = soap_new_ns__GetDeviceStatusSMS(soap);
	if (_p)
	{	soap_default_ns__GetDeviceStatusSMS(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}

inline struct ns__GetDeviceStatusSMS * soap_new_set_ns__GetDeviceStatusSMS(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__GetDeviceStatusSMS *_p = soap_new_ns__GetDeviceStatusSMS(soap);
	if (_p)
	{	soap_default_ns__GetDeviceStatusSMS(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDeviceStatusSMS(struct soap*, const struct ns__GetDeviceStatusSMS *, const char*, const char*);

inline int soap_write_ns__GetDeviceStatusSMS(struct soap *soap, struct ns__GetDeviceStatusSMS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetDeviceStatusSMS(soap, p), 0) || soap_put_ns__GetDeviceStatusSMS(soap, p, "ns:GetDeviceStatusSMS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetDeviceStatusSMS(struct soap *soap, const char *URL, struct ns__GetDeviceStatusSMS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetDeviceStatusSMS(soap, p), 0) || soap_put_ns__GetDeviceStatusSMS(soap, p, "ns:GetDeviceStatusSMS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetDeviceStatusSMS(struct soap *soap, const char *URL, struct ns__GetDeviceStatusSMS const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetDeviceStatusSMS(soap, p), 0) || soap_put_ns__GetDeviceStatusSMS(soap, p, "ns:GetDeviceStatusSMS", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetDeviceStatusSMS * SOAP_FMAC4 soap_get_ns__GetDeviceStatusSMS(struct soap*, struct ns__GetDeviceStatusSMS *, const char*, const char*);

inline int soap_read_ns__GetDeviceStatusSMS(struct soap *soap, struct ns__GetDeviceStatusSMS *p)
{
	if (p)
	{	soap_default_ns__GetDeviceStatusSMS(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetDeviceStatusSMS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetDeviceStatusSMS(struct soap *soap, const char *URL, struct ns__GetDeviceStatusSMS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetDeviceStatusSMS(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetDeviceStatusSMS(struct soap *soap, struct ns__GetDeviceStatusSMS *p)
{
	if (soap_read_ns__GetDeviceStatusSMS(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__GetDeviceStatus_DEFINED
#define SOAP_TYPE_ns__GetDeviceStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDeviceStatus(struct soap*, struct ns__GetDeviceStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDeviceStatus(struct soap*, const struct ns__GetDeviceStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDeviceStatus(struct soap*, const char*, int, const struct ns__GetDeviceStatus *, const char*);
SOAP_FMAC3 struct ns__GetDeviceStatus * SOAP_FMAC4 soap_in_ns__GetDeviceStatus(struct soap*, const char*, struct ns__GetDeviceStatus *, const char*);
SOAP_FMAC1 struct ns__GetDeviceStatus * SOAP_FMAC2 Server_Soap_instantiate_ns__GetDeviceStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetDeviceStatus * soap_new_ns__GetDeviceStatus(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_ns__GetDeviceStatus(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetDeviceStatus * soap_new_req_ns__GetDeviceStatus(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__GetDeviceStatus *_p = soap_new_ns__GetDeviceStatus(soap);
	if (_p)
	{	soap_default_ns__GetDeviceStatus(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}

inline struct ns__GetDeviceStatus * soap_new_set_ns__GetDeviceStatus(
	struct soap *soap,
	const ns__User& requestUser,
	const ns__Device& requestDevice)
{
	struct ns__GetDeviceStatus *_p = soap_new_ns__GetDeviceStatus(soap);
	if (_p)
	{	soap_default_ns__GetDeviceStatus(soap, _p);
		_p->requestUser = requestUser;
		_p->requestDevice = requestDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDeviceStatus(struct soap*, const struct ns__GetDeviceStatus *, const char*, const char*);

inline int soap_write_ns__GetDeviceStatus(struct soap *soap, struct ns__GetDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns__GetDeviceStatus(soap, p), 0) || soap_put_ns__GetDeviceStatus(soap, p, "ns:GetDeviceStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetDeviceStatus(struct soap *soap, const char *URL, struct ns__GetDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns__GetDeviceStatus(soap, p), 0) || soap_put_ns__GetDeviceStatus(soap, p, "ns:GetDeviceStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetDeviceStatus(struct soap *soap, const char *URL, struct ns__GetDeviceStatus const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns__GetDeviceStatus(soap, p), 0) || soap_put_ns__GetDeviceStatus(soap, p, "ns:GetDeviceStatus", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetDeviceStatus * SOAP_FMAC4 soap_get_ns__GetDeviceStatus(struct soap*, struct ns__GetDeviceStatus *, const char*, const char*);

inline int soap_read_ns__GetDeviceStatus(struct soap *soap, struct ns__GetDeviceStatus *p)
{
	if (p)
	{	soap_default_ns__GetDeviceStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__GetDeviceStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetDeviceStatus(struct soap *soap, const char *URL, struct ns__GetDeviceStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns__GetDeviceStatus(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns__GetDeviceStatus(struct soap *soap, struct ns__GetDeviceStatus *p)
{
	if (soap_read_ns__GetDeviceStatus(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns__UserLog_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns__UserLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__UserLog(struct soap*, std::vector<ns__UserLog> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__UserLog(struct soap*, const std::vector<ns__UserLog> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__UserLog(struct soap*, const char*, int, const std::vector<ns__UserLog> *, const char*);
SOAP_FMAC3 std::vector<ns__UserLog> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__UserLog(struct soap*, const char*, std::vector<ns__UserLog> *, const char*);
SOAP_FMAC1 std::vector<ns__UserLog>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfns__UserLog(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__UserLog>  * soap_new_std__vectorTemplateOfns__UserLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfns__UserLog(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns__ActivityLog_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns__ActivityLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__ActivityLog(struct soap*, std::vector<ns__ActivityLog> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__ActivityLog(struct soap*, const std::vector<ns__ActivityLog> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__ActivityLog(struct soap*, const char*, int, const std::vector<ns__ActivityLog> *, const char*);
SOAP_FMAC3 std::vector<ns__ActivityLog> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__ActivityLog(struct soap*, const char*, std::vector<ns__ActivityLog> *, const char*);
SOAP_FMAC1 std::vector<ns__ActivityLog>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfns__ActivityLog(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__ActivityLog>  * soap_new_std__vectorTemplateOfns__ActivityLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfns__ActivityLog(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns__ErrorCode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns__ErrorCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__ErrorCode(struct soap*, std::vector<ns__ErrorCode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__ErrorCode(struct soap*, const std::vector<ns__ErrorCode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__ErrorCode(struct soap*, const char*, int, const std::vector<ns__ErrorCode> *, const char*);
SOAP_FMAC3 std::vector<ns__ErrorCode> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__ErrorCode(struct soap*, const char*, std::vector<ns__ErrorCode> *, const char*);
SOAP_FMAC1 std::vector<ns__ErrorCode>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfns__ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__ErrorCode>  * soap_new_std__vectorTemplateOfns__ErrorCode(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfns__ErrorCode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns__CityLocation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns__CityLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__CityLocation(struct soap*, std::vector<ns__CityLocation> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__CityLocation(struct soap*, const std::vector<ns__CityLocation> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__CityLocation(struct soap*, const char*, int, const std::vector<ns__CityLocation> *, const char*);
SOAP_FMAC3 std::vector<ns__CityLocation> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__CityLocation(struct soap*, const char*, std::vector<ns__CityLocation> *, const char*);
SOAP_FMAC1 std::vector<ns__CityLocation>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfns__CityLocation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__CityLocation>  * soap_new_std__vectorTemplateOfns__CityLocation(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfns__CityLocation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfxsd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__string(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfxsd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns__Device_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns__Device_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__Device(struct soap*, std::vector<ns__Device> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__Device(struct soap*, const std::vector<ns__Device> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__Device(struct soap*, const char*, int, const std::vector<ns__Device> *, const char*);
SOAP_FMAC3 std::vector<ns__Device> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__Device(struct soap*, const char*, std::vector<ns__Device> *, const char*);
SOAP_FMAC1 std::vector<ns__Device>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfns__Device(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__Device>  * soap_new_std__vectorTemplateOfns__Device(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfns__Device(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns__DeviceStatusLog_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns__DeviceStatusLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__DeviceStatusLog(struct soap*, std::vector<ns__DeviceStatusLog> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__DeviceStatusLog(struct soap*, const std::vector<ns__DeviceStatusLog> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__DeviceStatusLog(struct soap*, const char*, int, const std::vector<ns__DeviceStatusLog> *, const char*);
SOAP_FMAC3 std::vector<ns__DeviceStatusLog> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__DeviceStatusLog(struct soap*, const char*, std::vector<ns__DeviceStatusLog> *, const char*);
SOAP_FMAC1 std::vector<ns__DeviceStatusLog>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfns__DeviceStatusLog(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__DeviceStatusLog>  * soap_new_std__vectorTemplateOfns__DeviceStatusLog(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfns__DeviceStatusLog(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns__SensorExtension_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns__SensorExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__SensorExtension(struct soap*, std::vector<ns__SensorExtension> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__SensorExtension(struct soap*, const std::vector<ns__SensorExtension> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__SensorExtension(struct soap*, const char*, int, const std::vector<ns__SensorExtension> *, const char*);
SOAP_FMAC3 std::vector<ns__SensorExtension> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__SensorExtension(struct soap*, const char*, std::vector<ns__SensorExtension> *, const char*);
SOAP_FMAC1 std::vector<ns__SensorExtension>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfns__SensorExtension(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__SensorExtension>  * soap_new_std__vectorTemplateOfns__SensorExtension(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfns__SensorExtension(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns__RequestType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns__RequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__RequestType(struct soap*, std::vector<enum ns__RequestType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__RequestType(struct soap*, const std::vector<enum ns__RequestType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__RequestType(struct soap*, const char*, int, const std::vector<enum ns__RequestType> *, const char*);
SOAP_FMAC3 std::vector<enum ns__RequestType> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__RequestType(struct soap*, const char*, std::vector<enum ns__RequestType> *, const char*);
SOAP_FMAC1 std::vector<enum ns__RequestType>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfns__RequestType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns__RequestType>  * soap_new_std__vectorTemplateOfns__RequestType(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfns__RequestType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__boolean_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__boolean_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__boolean(struct soap*, std::vector<bool> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__boolean(struct soap*, const std::vector<bool> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__boolean(struct soap*, const char*, int, const std::vector<bool> *, const char*);
SOAP_FMAC3 std::vector<bool> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__boolean(struct soap*, const char*, std::vector<bool> *, const char*);
SOAP_FMAC1 std::vector<bool>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfxsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<bool>  * soap_new_std__vectorTemplateOfxsd__boolean(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfxsd__boolean(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns__PicturePart_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns__PicturePart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__PicturePart(struct soap*, std::vector<ns__PicturePart> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__PicturePart(struct soap*, const std::vector<ns__PicturePart> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__PicturePart(struct soap*, const char*, int, const std::vector<ns__PicturePart> *, const char*);
SOAP_FMAC3 std::vector<ns__PicturePart> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__PicturePart(struct soap*, const char*, std::vector<ns__PicturePart> *, const char*);
SOAP_FMAC1 std::vector<ns__PicturePart>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfns__PicturePart(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__PicturePart>  * soap_new_std__vectorTemplateOfns__PicturePart(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfns__PicturePart(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__double_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__double_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__double(struct soap*, std::vector<double> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__double(struct soap*, const std::vector<double> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__double(struct soap*, const char*, int, const std::vector<double> *, const char*);
SOAP_FMAC3 std::vector<double> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__double(struct soap*, const char*, std::vector<double> *, const char*);
SOAP_FMAC1 std::vector<double>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfxsd__double(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<double>  * soap_new_std__vectorTemplateOfxsd__double(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfxsd__double(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns__Calibration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns__Calibration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__Calibration(struct soap*, std::vector<ns__Calibration> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__Calibration(struct soap*, const std::vector<ns__Calibration> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__Calibration(struct soap*, const char*, int, const std::vector<ns__Calibration> *, const char*);
SOAP_FMAC3 std::vector<ns__Calibration> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__Calibration(struct soap*, const char*, std::vector<ns__Calibration> *, const char*);
SOAP_FMAC1 std::vector<ns__Calibration>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfns__Calibration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__Calibration>  * soap_new_std__vectorTemplateOfns__Calibration(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfns__Calibration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns__User_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns__User_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__User(struct soap*, std::vector<ns__User> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__User(struct soap*, const std::vector<ns__User> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__User(struct soap*, const char*, int, const std::vector<ns__User> *, const char*);
SOAP_FMAC3 std::vector<ns__User> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__User(struct soap*, const char*, std::vector<ns__User> *, const char*);
SOAP_FMAC1 std::vector<ns__User>  * SOAP_FMAC2 Server_Soap_instantiate_std__vectorTemplateOfns__User(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__User>  * soap_new_std__vectorTemplateOfns__User(struct soap *soap, int n = -1)
{
	return Server_Soap_instantiate_std__vectorTemplateOfns__User(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of Server_SoapH.h */
