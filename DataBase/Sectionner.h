/*
 *	 Source\Sectionner.h
 *	 Generated by sql2class v1.8 by (C) AH 2000-2006
 *	  using command line
 *	  $ ..\sql2class -build -lib Source\Sectionner sectionnerdb.sql -namespace db -overwrite
 *	 Date: Tue Jul 11 19:35:27 2017
 */

/*
Copyright (C) 2001-2006  Anders Hedstrom (grymse@alhem.net)

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
#ifdef _WIN32
#include <mysql.h>
#else
#include <mysql/mysql.h>
#endif*/
#include "IError.h"
#include "StderrLog.h"
#include "SysLog.h"
#include "enum_t.h"
#include "set_t.h"
#include "Database.h"
#include "Query.h"
#include <map>

#include <vector>
#include <string>

#ifndef _SECTIONNER_H
#define _SECTIONNER_H

#ifdef _WIN32
#define strncasecmp _strnicmp
#define strcasecmp _stricmp
#endif // _WIN32

/**
 **  Class 'Device' and 'cDevice'
 **/

namespace db
{
class Device {
	// map for ENUM column devtype
	std::map<std::string, uint64_t> mmap_devtype;

	// map for ENUM column devsimcardtype
	std::map<std::string, uint64_t> mmap_devsimcardtype;

public:
	Device(Database *);
	Device(Database *,const std::string& );
	Device(Database *,Query *,int = 0 /* offset */);
	Device(Database&,uint64_t devserialnumber);
	~Device();
	Database& GetDatabase() { return *database; }

	unsigned __int64 insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	uint64_t GetDevserialnumber() { return this -> devserialnumber; }
	void SetDevserialnumber(uint64_t x) { this -> devserialnumber = x; }
	const std::string&  GetDevtype() { return this -> devtype.String(); }
	void SetDevtype(const std::string&  x) { this -> devtype = x; }
	const char *GetDevname() { return this -> devname.c_str(); }
	void SetDevname(const std::string&  x) { this -> devname = x; }
	const char *GetDevcity() { return this -> devcity.c_str(); }
	void SetDevcity(const std::string&  x) { this -> devcity = x; }
	const char *GetDevlocation() { return this -> devlocation.c_str(); }
	void SetDevlocation(const std::string&  x) { this -> devlocation = x; }
	unsigned long GetDevsocketnumber() { return this -> devsocketnumber; }
	void SetDevsocketnumber(unsigned long x) { this -> devsocketnumber = x; }
	const char *GetDevip() { return this -> devip.c_str(); }
	void SetDevip(const std::string&  x) { this -> devip = x; }
	unsigned long GetDevport() { return this -> devport; }
	void SetDevport(unsigned long x) { this -> devport = x; }
	unsigned long GetCamsocketnumber() { return this -> camsocketnumber; }
	void SetCamsocketnumber(unsigned long x) { this -> camsocketnumber = x; }
	const char *GetCamip() { return this -> camip.c_str(); }
	void SetCamip(const std::string&  x) { this -> camip = x; }
	unsigned long GetCamport() { return this -> camport; }
	void SetCamport(unsigned long x) { this -> camport = x; }
	const char *GetDevinstalldate() { return this -> devinstalldate.c_str(); }
	void SetDevinstalldate(const std::string&  x) { this -> devinstalldate = x; }
	unsigned char GetDevstatus() { return this -> devstatus; }
	void SetDevstatus(unsigned char x) { this -> devstatus = x; }
	const char *GetDevsimcardnumber() { return this -> devsimcardnumber.c_str(); }
	void SetDevsimcardnumber(const std::string&  x) { this -> devsimcardnumber = x; }
	const std::string&  GetDevsimcardtype() { return this -> devsimcardtype.String(); }
	void SetDevsimcardtype(const std::string&  x) { this -> devsimcardtype = x; }
	const char *GetDevcalibration() { return this -> devcalibration.c_str(); }
	void SetDevcalibration(const std::string&  x) { this -> devcalibration = x; }
	unsigned long GetDevsamplingtime() { return this -> devsamplingtime; }
	void SetDevsamplingtime(unsigned long x) { this -> devsamplingtime = x; }
	uint64_t GetDevtranspower() { return this -> devtranspower; }
	void SetDevtranspower(uint64_t x) { this -> devtranspower = x; }
	uint64_t GetDevtablecapacity() { return this -> devtablecapacity; }
	void SetDevtablecapacity(uint64_t x) { this -> devtablecapacity = x; }
	const char *GetDevgps() { return this -> devgps.c_str(); }
	void SetDevgps(const std::string&  x) { this -> devgps = x; }
	const char *GetDevkeytype() { return this -> devkeytype.c_str(); }
	void SetDevkeytype(const std::string&  x) { this -> devkeytype = x; }
	short GetDevsmsterm() { return this -> devsmsterm; }
	void SetDevsmsterm(short x) { this -> devsmsterm = x; }
	const char *GetDevsmsdata() { return this -> devsmsdata.c_str(); }
	void SetDevsmsdata(const std::string&  x) { this -> devsmsdata = x; }
	const char *GetDevsmstime() { return this -> devsmstime.c_str(); }
	void SetDevsmstime(const std::string&  x) { this -> devsmstime = x; }
	char GetDevsmsreq() { return this -> devsmsreq; }
	void SetDevsmsreq(char x) { this -> devsmsreq = x; }

	// table columns
private:
	uint64_t                 devserialnumber; // bigint(15)
	enum_t                   devtype; // enum('SECTIONNER','MANAGER','ALARM')
	std::string              devname; // varchar(200)
	std::string              devcity; // varchar(200)
	std::string              devlocation; // varchar(200)
	unsigned long            devsocketnumber; // int(11)
	std::string              devip; // varchar(30)
	unsigned long            devport; // int(11)
	unsigned long            camsocketnumber; // int(30)
	std::string              camip; // varchar(11)
	unsigned long            camport; // int(11)
	std::string              devinstalldate; // timestamp
	unsigned char            devstatus; // tinyint(1)
	std::string              devsimcardnumber; // varchar(11)
	enum_t                   devsimcardtype; // enum('MCI','IranCell','Taliya','RighTel')
	std::string              devcalibration; // varchar(12000)
	unsigned long            devsamplingtime; // int(5)
	uint64_t                 devtranspower; // bigint(20)
	uint64_t                 devtablecapacity; // bigint(20)
	std::string              devgps; // varchar(50)
	std::string              devkeytype; // varchar(100)
	// 21 - devpicture mediumblob
	short                    devsmsterm; // smallint(6)
	std::string              devsmsdata; // varchar(8192)
	std::string              devsmstime; // timestamp
	char                     devsmsreq; // tinyint(1)
	//
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(uint64_t devserialnumber);
	//
	Database *database;
	short new_object;
}; // End of class 'Device'

} // end of namespace

/**
 **  Class 'Logactivity' and 'cLogactivity'
 **/

namespace db
{
class Logactivity {
public:
	Logactivity(Database *);
	Logactivity(Database *,const std::string& );
	Logactivity(Database *,Query *,int = 0 /* offset */);
	Logactivity(Database&,unsigned long logid);
	~Logactivity();
	Database& GetDatabase() { return *database; }

	unsigned __int64 insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	unsigned long GetLogid() { return this -> logid; }
	void SetLogid(unsigned long x) { this -> logid = x; }
	uint64_t GetDevserialnumber() { return this -> devserialnumber; }
	void SetDevserialnumber(uint64_t x) { this -> devserialnumber = x; }
	unsigned long GetUserid() { return this -> userid; }
	void SetUserid(unsigned long x) { this -> userid = x; }
	const char *GetDataactivity() { return this -> dataactivity.c_str(); }
	void SetDataactivity(const std::string&  x) { this -> dataactivity = x; }
	const char *GetLogdate() { return this -> logdate.c_str(); }
	void SetLogdate(const std::string&  x) { this -> logdate = x; }

	// table columns
private:
	unsigned long            logid; // int(11)
	uint64_t                 devserialnumber; // bigint(15)
	unsigned long            userid; // int(11)
	std::string              dataactivity; // varchar(1000)
	std::string              logdate; // timestamp
	//
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(unsigned long logid);
	//
	Database *database;
	short new_object;
}; // End of class 'Logactivity'

} // end of namespace

/**
 **  Class 'Logpicture' and 'cLogpicture'
 **/

namespace db
{
class Logpicture {
public:
	Logpicture(Database *);
	Logpicture(Database *,const std::string& );
	Logpicture(Database *,Query *,int = 0 /* offset */);
	Logpicture(Database&,unsigned long logid);
	~Logpicture();
	Database& GetDatabase() { return *database; }

	unsigned __int64 insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	unsigned long GetLogid() { return this -> logid; }
	void SetLogid(unsigned long x) { this -> logid = x; }
	uint64_t GetDevserialnumber() { return this -> devserialnumber; }
	void SetDevserialnumber(uint64_t x) { this -> devserialnumber = x; }
	// 2 - devpicture mediumblob	const char *GetLogdate() { return this -> logdate.c_str(); }
	void SetLogdate(const std::string&  x) { this -> logdate = x; }

	// table columns
private:
	unsigned long            logid; // int(11)
	uint64_t                 devserialnumber; // bigint(15)
	// 2 - devpicture mediumblob
	std::string              logdate; // timestamp
	//
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(unsigned long logid);
	//
	Database *database;
	short new_object;
}; // End of class 'Logpicture'

} // end of namespace

/**
 **  Class 'Logstatus' and 'cLogstatus'
 **/

namespace db
{
class Logstatus {
public:
	Logstatus(Database *);
	Logstatus(Database *,const std::string& );
	Logstatus(Database *,Query *,int = 0 /* offset */);
	Logstatus(Database&,unsigned long logid);
	~Logstatus();
	Database& GetDatabase() { return *database; }

	unsigned __int64 insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	unsigned long GetLogid() { return this -> logid; }
	void SetLogid(unsigned long x) { this -> logid = x; }
	uint64_t GetDevserialnumber() { return this -> devserialnumber; }
	void SetDevserialnumber(uint64_t x) { this -> devserialnumber = x; }
	const char *GetStatusdata() { return this -> statusdata.c_str(); }
	void SetStatusdata(const std::string&  x) { this -> statusdata = x; }
	const char *GetPuredata() { return this -> puredata.c_str(); }
	void SetPuredata(const std::string&  x) { this -> puredata = x; }
	const char *GetLogdate() { return this -> logdate.c_str(); }
	void SetLogdate(const std::string&  x) { this -> logdate = x; }

	// table columns
private:
	unsigned long            logid; // int(11)
	uint64_t                 devserialnumber; // bigint(15)
	std::string              statusdata; // varchar(8192)
	std::string              puredata; // varchar(2048)
	std::string              logdate; // timestamp
	//
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(unsigned long logid);
	//
	Database *database;
	short new_object;
}; // End of class 'Logstatus'

} // end of namespace

/**
 **  Class 'Loguser' and 'cLoguser'
 **/

namespace db
{
class Loguser {
public:
	Loguser(Database *);
	Loguser(Database *,const std::string& );
	Loguser(Database *,Query *,int = 0 /* offset */);
	Loguser(Database&,unsigned long id);
	~Loguser();
	Database& GetDatabase() { return *database; }

	unsigned __int64 insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	unsigned long GetId() { return this -> id; }
	void SetId(unsigned long x) { this -> id = x; }
	unsigned long GetUserid() { return this -> userid; }
	void SetUserid(unsigned long x) { this -> userid = x; }
	const char *GetDataactivity() { return this -> dataactivity.c_str(); }
	void SetDataactivity(const std::string&  x) { this -> dataactivity = x; }
	const char *GetLogdate() { return this -> logdate.c_str(); }
	void SetLogdate(const std::string&  x) { this -> logdate = x; }

	// table columns
private:
	unsigned long            id; // int(11)
	unsigned long            userid; // int(11)
	std::string              dataactivity; // varchar(20000)
	std::string              logdate; // timestamp
	//
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(unsigned long id);
	//
	Database *database;
	short new_object;
}; // End of class 'Loguser'

} // end of namespace

/**
 **  Class 'Userdevice' and 'cUserdevice'
 **/

namespace db
{
class Userdevice {
public:
	Userdevice(Database *);
	Userdevice(Database *,const std::string& );
	Userdevice(Database *,Query *,int = 0 /* offset */);
	Userdevice(Database&,unsigned long id);
	Userdevice(Database&,unsigned long userid,uint64_t deviceid);
	~Userdevice();
	Database& GetDatabase() { return *database; }

	unsigned __int64 insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	unsigned long GetId() { return this -> id; }
	void SetId(unsigned long x) { this -> id = x; }
	unsigned long GetUserid() { return this -> userid; }
	void SetUserid(unsigned long x) { this -> userid = x; }
	uint64_t GetDeviceid() { return this -> deviceid; }
	void SetDeviceid(uint64_t x) { this -> deviceid = x; }
	unsigned char GetViewact() { return this -> viewact; }
	void SetViewact(unsigned char x) { this -> viewact = x; }
	unsigned char GetUpdateact() { return this -> updateact; }
	void SetUpdateact(unsigned char x) { this -> updateact = x; }
	unsigned char GetDeleteact() { return this -> deleteact; }
	void SetDeleteact(unsigned char x) { this -> deleteact = x; }
	const char *GetAssigndate() { return this -> assigndate.c_str(); }
	void SetAssigndate(const std::string&  x) { this -> assigndate = x; }

	// table columns
private:
	unsigned long            id; // int(11)
	unsigned long            userid; // int(11)
	uint64_t                 deviceid; // bigint(15)
	unsigned char            viewact; // tinyint(1)
	unsigned char            updateact; // tinyint(1)
	unsigned char            deleteact; // tinyint(1)
	std::string              assigndate; // timestamp
	//
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(unsigned long id);
	//
	Database *database;
	short new_object;
}; // End of class 'Userdevice'

} // end of namespace

/**
 **  Class 'Users' and 'cUsers'
 **/

namespace db
{
class Users {
	// map for ENUM column usertype
	std::map<std::string, uint64_t> mmap_usertype;

	// map for ENUM column status
	std::map<std::string, uint64_t> mmap_status;

public:
	Users(Database *);
	Users(Database *,const std::string& );
	Users(Database *,Query *,int = 0 /* offset */);
	Users(Database&,unsigned long userid);
	Users(Database&, const std::string&  username);
	Users(Database&, const std::string&  username, const std::string&  password);
	~Users();
	Database& GetDatabase() { return *database; }

	unsigned __int64 insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	unsigned long GetUserid() { return this -> userid; }
	void SetUserid(unsigned long x) { this -> userid = x; }
	const char *GetUsername() { return this -> username.c_str(); }
	void SetUsername(const std::string&  x) { this -> username = x; }
	const char *GetPassword() { return this -> password.c_str(); }
	void SetPassword(const std::string&  x) { this -> password = x; }
	const std::string&  GetUsertype() { return this -> usertype.String(); }
	void SetUsertype(const std::string&  x) { this -> usertype = x; }
	const char *GetUserfirstname() { return this -> userfirstname.c_str(); }
	void SetUserfirstname(const std::string&  x) { this -> userfirstname = x; }
	const char *GetUserlastname() { return this -> userlastname.c_str(); }
	void SetUserlastname(const std::string&  x) { this -> userlastname = x; }
	// 6 - userpicture mediumblob	const char *GetRegisterdate() { return this -> registerdate.c_str(); }
	void SetRegisterdate(const std::string&  x) { this -> registerdate = x; }
	const std::string&  GetStatus() { return this -> status.String(); }
	void SetStatus(const std::string&  x) { this -> status = x; }

	// table columns
private:
	unsigned long            userid; // int(11)
	std::string              username; // varchar(50)
	std::string              password; // varchar(32)
	enum_t                   usertype; // enum('Admin','Control','Monitor')
	std::string              userfirstname; // varchar(100)
	std::string              userlastname; // varchar(100)
	// 6 - userpicture mediumblob
	std::string              registerdate; // timestamp
	enum_t                   status; // enum('Login','Logout')
	//
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(unsigned long userid);
	//
	Database *database;
	short new_object;
}; // End of class 'Users'

} // end of namespace
#endif // _SOURCE\SECTIONNER_H
