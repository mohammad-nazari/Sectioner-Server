/*
 *	 Source\Sectionner.cpp
 *	 Generated by sql2class v1.8 by (C) AH 2000-2006
 *	  using command line
 *	  $ ..\sql2class -build -lib Source\Sectionner sectionnerdb.sql -namespace db -overwrite
 *	 Date: Tue Jul 11 19:35:27 2017
 */

 /*
 Copyright (C) 2001-2006  Anders Hedstrom (grymse@alhem.net)

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
#ifdef WIN32
#include <winsock.h>
#endif
#include "Sectionner.h"

namespace db {

	/**
	 **  Begin class 'Device'
	 **/

	Device::Device(Database *db) :devtype(mmap_devtype), devsimcardtype(mmap_devsimcardtype)
	{
		database = db;
		new_object = 1;
		clear();
	}


	Device::Device(Database *db, const std::string& sql) :devtype(mmap_devtype), devsimcardtype(mmap_devsimcardtype)
	{
		database = db;
		new_object = 1;
		spawn(sql);
	}


	Device::Device(Database *db, Query *qd, int offset) :devtype(mmap_devtype), devsimcardtype(mmap_devsimcardtype)
	{
		database = db;
		new_object = 0;
		spawn(qd, offset);
	}


	Device::Device(Database& db, uint64_t i_devserialnumber) :devtype(mmap_devtype), devsimcardtype(mmap_devsimcardtype), database(&db), new_object(1)
	{
		Query q(*database);
		std::string sql = "select * from device where ";
		{
			char slask[100];
			sprintf(slask, "DevSerialNumber='%llu'", i_devserialnumber);
			sql += slask;
		}
		spawn(sql);
	}


	Device::~Device()
	{
	}


	void Device::select(const std::string& sql)
	{
		spawn(sql);
	}


	unsigned __int64 Device::insert()
	{
		Query q(*database);
		std::string sql;

		sql = "insert into device(DevSerialNumber,DevType,DevName,DevCity,DevLocation,DevSocketNumber,DevIP,DevPort,CamSocketNumber,CamIP,CamPort,DevStatus,DevSimcardNumber,DevSimcardType,DevCalibration,DevSamplingTime,DevTransPower,DevTableCapacity,DevGPS,DevkeyType,DevSmsTerm,DevSmsData,DevSmsReq)";
		{
			char slask[100];
			sprintf(slask, " values(%llu", this->devserialnumber);
			sql += slask;
		}
		sql += ", '" + q.GetDatabase().safestr(this->devtype.String()) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->devname) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->devcity) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->devlocation) + "'";
		{
			char slask[100];
			sprintf(slask, ", %lu", this->devsocketnumber);
			sql += slask;
		}
		sql += ", '" + q.GetDatabase().safestr(this->devip) + "'";
		{
			char slask[100];
			sprintf(slask, ", %lu", this->devport);
			sql += slask;
		}
		{
			char slask[100];
			sprintf(slask, ", %lu", this->camsocketnumber);
			sql += slask;
		}
		sql += ", '" + q.GetDatabase().safestr(this->camip) + "'";
		{
			char slask[100];
			sprintf(slask, ", %lu", this->camport);
			sql += slask;
		}
		{
			char slask[100];
			sprintf(slask, ", %u", this->devstatus);
			sql += slask;
		}
		sql += ", '" + q.GetDatabase().safestr(this->devsimcardnumber) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->devsimcardtype.String()) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->devcalibration) + "'";
		{
			char slask[100];
			sprintf(slask, ", %lu", this->devsamplingtime);
			sql += slask;
		}
		{
			char slask[100];
			sprintf(slask, ", %llu", this->devtranspower);
			sql += slask;
		}
		{
			char slask[100];
			sprintf(slask, ", %llu", this->devtablecapacity);
			sql += slask;
		}
		sql += ", '" + q.GetDatabase().safestr(this->devgps) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->devkeytype) + "'";
		{
			char slask[100];
			sprintf(slask, ", %d", this->devsmsterm);
			sql += slask;
		}
		sql += ", '" + q.GetDatabase().safestr(this->devsmsdata) + "'";
		{
			char slask[100];
			sprintf(slask, ", %d", this->devsmsreq);
			sql += slask;
		}
		sql += ")";
		q.execute(sql);
		new_object = 0;
		unsigned __int64 inserted_id = q.insert_id();
		devserialnumber = inserted_id;
		return inserted_id;
	}


	void Device::update()
	{
		update(this->devserialnumber);
	}


	void Device::update(uint64_t i_devserialnumber)
	{
		Query q(*database);
		std::string sql;
		{
			char slask[200];
			sprintf(slask, "update device set DevSerialNumber=%llu", this->devserialnumber);
			sql += slask;
		}
		sql += ", DevType='" + q.GetDatabase().safestr(this->devtype.String()) + "'";
		sql += ", DevName='" + q.GetDatabase().safestr(this->devname) + "'";
		sql += ", DevCity='" + q.GetDatabase().safestr(this->devcity) + "'";
		sql += ", DevLocation='" + q.GetDatabase().safestr(this->devlocation) + "'";
		{
			char slask[200];
			sprintf(slask, ", DevSocketNumber=%lu", this->devsocketnumber);
			sql += slask;
		}
		sql += ", DevIP='" + q.GetDatabase().safestr(this->devip) + "'";
		{
			char slask[200];
			sprintf(slask, ", DevPort=%lu", this->devport);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, ", CamSocketNumber=%lu", this->camsocketnumber);
			sql += slask;
		}
		sql += ", CamIP='" + q.GetDatabase().safestr(this->camip) + "'";
		{
			char slask[200];
			sprintf(slask, ", CamPort=%lu", this->camport);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, ", DevStatus=%u", this->devstatus);
			sql += slask;
		}
		sql += ", DevSimcardNumber='" + q.GetDatabase().safestr(this->devsimcardnumber) + "'";
		sql += ", DevSimcardType='" + q.GetDatabase().safestr(this->devsimcardtype.String()) + "'";
		sql += ", DevCalibration='" + q.GetDatabase().safestr(this->devcalibration) + "'";
		{
			char slask[200];
			sprintf(slask, ", DevSamplingTime=%lu", this->devsamplingtime);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, ", DevTransPower=%llu", this->devtranspower);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, ", DevTableCapacity=%llu", this->devtablecapacity);
			sql += slask;
		}
		sql += ", DevGPS='" + q.GetDatabase().safestr(this->devgps) + "'";
		sql += ", DevkeyType='" + q.GetDatabase().safestr(this->devkeytype) + "'";
		{
			char slask[200];
			sprintf(slask, ", DevSmsTerm=%d", this->devsmsterm);
			sql += slask;
		}
		sql += ", DevSmsData='" + q.GetDatabase().safestr(this->devsmsdata) + "'";
		{
			char slask[200];
			sprintf(slask, ", DevSmsReq=%d", this->devsmsreq);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, " where DevSerialNumber='%llu'", i_devserialnumber);
			sql += slask;
		}
		q.execute(sql);
	}


	void Device::save()
	{
		if (new_object)
			insert();
		else
			update();
	}


	void Device::erase()
	{
		if (!new_object)
		{
			std::string sql = "delete from device where";
			Query q(*database);
			{
				char slask[200];
				sprintf(slask, " DevSerialNumber='%llu'", this->devserialnumber);
				sql += slask;
			}
			q.execute(sql);
		}
	}


	std::string Device::xml()
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<DEVICE>";
		sprintf(slask, "<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>", this->devserialnumber);
		dest += slask;
		dest += "<DEVTYPE>" + q.GetDatabase().xmlsafestr(this->devtype.String()) + "</DEVTYPE>";
		dest += "<DEVNAME>" + q.GetDatabase().xmlsafestr(this->devname) + "</DEVNAME>";
		dest += "<DEVCITY>" + q.GetDatabase().xmlsafestr(this->devcity) + "</DEVCITY>";
		dest += "<DEVLOCATION>" + q.GetDatabase().xmlsafestr(this->devlocation) + "</DEVLOCATION>";
		sprintf(slask, "<DEVSOCKETNUMBER>%lu</DEVSOCKETNUMBER>", this->devsocketnumber);
		dest += slask;
		dest += "<DEVIP>" + q.GetDatabase().xmlsafestr(this->devip) + "</DEVIP>";
		sprintf(slask, "<DEVPORT>%lu</DEVPORT>", this->devport);
		dest += slask;
		sprintf(slask, "<CAMSOCKETNUMBER>%lu</CAMSOCKETNUMBER>", this->camsocketnumber);
		dest += slask;
		dest += "<CAMIP>" + q.GetDatabase().xmlsafestr(this->camip) + "</CAMIP>";
		sprintf(slask, "<CAMPORT>%lu</CAMPORT>", this->camport);
		dest += slask;
		dest += "<DEVINSTALLDATE>" + q.GetDatabase().xmlsafestr(this->devinstalldate) + "</DEVINSTALLDATE>";
		sprintf(slask, "<DEVSTATUS>%u</DEVSTATUS>", this->devstatus);
		dest += slask;
		dest += "<DEVSIMCARDNUMBER>" + q.GetDatabase().xmlsafestr(this->devsimcardnumber) + "</DEVSIMCARDNUMBER>";
		dest += "<DEVSIMCARDTYPE>" + q.GetDatabase().xmlsafestr(this->devsimcardtype.String()) + "</DEVSIMCARDTYPE>";
		dest += "<DEVCALIBRATION>" + q.GetDatabase().xmlsafestr(this->devcalibration) + "</DEVCALIBRATION>";
		sprintf(slask, "<DEVSAMPLINGTIME>%lu</DEVSAMPLINGTIME>", this->devsamplingtime);
		dest += slask;
		sprintf(slask, "<DEVTRANSPOWER>%llu</DEVTRANSPOWER>", this->devtranspower);
		dest += slask;
		sprintf(slask, "<DEVTABLECAPACITY>%llu</DEVTABLECAPACITY>", this->devtablecapacity);
		dest += slask;
		dest += "<DEVGPS>" + q.GetDatabase().xmlsafestr(this->devgps) + "</DEVGPS>";
		dest += "<DEVKEYTYPE>" + q.GetDatabase().xmlsafestr(this->devkeytype) + "</DEVKEYTYPE>";
		sprintf(slask, "<DEVSMSTERM>%d</DEVSMSTERM>", this->devsmsterm);
		dest += slask;
		dest += "<DEVSMSDATA>" + q.GetDatabase().xmlsafestr(this->devsmsdata) + "</DEVSMSDATA>";
		dest += "<DEVSMSTIME>" + q.GetDatabase().xmlsafestr(this->devsmstime) + "</DEVSMSTIME>";
		sprintf(slask, "<DEVSMSREQ>%d</DEVSMSREQ>", this->devsmsreq);
		dest += slask;
		dest += "</DEVICE>";
		return dest;
	}


	std::string Device::xml(const std::string& tag, const std::string& xvalx)
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<DEVICE " + tag + "=\"" + xvalx + "\">";
		sprintf(slask, "<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>", this->devserialnumber);
		dest += slask;
		dest += "<DEVTYPE>" + q.GetDatabase().xmlsafestr(this->devtype.String()) + "</DEVTYPE>";
		dest += "<DEVNAME>" + q.GetDatabase().xmlsafestr(this->devname) + "</DEVNAME>";
		dest += "<DEVCITY>" + q.GetDatabase().xmlsafestr(this->devcity) + "</DEVCITY>";
		dest += "<DEVLOCATION>" + q.GetDatabase().xmlsafestr(this->devlocation) + "</DEVLOCATION>";
		sprintf(slask, "<DEVSOCKETNUMBER>%lu</DEVSOCKETNUMBER>", this->devsocketnumber);
		dest += slask;
		dest += "<DEVIP>" + q.GetDatabase().xmlsafestr(this->devip) + "</DEVIP>";
		sprintf(slask, "<DEVPORT>%lu</DEVPORT>", this->devport);
		dest += slask;
		sprintf(slask, "<CAMSOCKETNUMBER>%lu</CAMSOCKETNUMBER>", this->camsocketnumber);
		dest += slask;
		dest += "<CAMIP>" + q.GetDatabase().xmlsafestr(this->camip) + "</CAMIP>";
		sprintf(slask, "<CAMPORT>%lu</CAMPORT>", this->camport);
		dest += slask;
		dest += "<DEVINSTALLDATE>" + q.GetDatabase().xmlsafestr(this->devinstalldate) + "</DEVINSTALLDATE>";
		sprintf(slask, "<DEVSTATUS>%u</DEVSTATUS>", this->devstatus);
		dest += slask;
		dest += "<DEVSIMCARDNUMBER>" + q.GetDatabase().xmlsafestr(this->devsimcardnumber) + "</DEVSIMCARDNUMBER>";
		dest += "<DEVSIMCARDTYPE>" + q.GetDatabase().xmlsafestr(this->devsimcardtype.String()) + "</DEVSIMCARDTYPE>";
		dest += "<DEVCALIBRATION>" + q.GetDatabase().xmlsafestr(this->devcalibration) + "</DEVCALIBRATION>";
		sprintf(slask, "<DEVSAMPLINGTIME>%lu</DEVSAMPLINGTIME>", this->devsamplingtime);
		dest += slask;
		sprintf(slask, "<DEVTRANSPOWER>%llu</DEVTRANSPOWER>", this->devtranspower);
		dest += slask;
		sprintf(slask, "<DEVTABLECAPACITY>%llu</DEVTABLECAPACITY>", this->devtablecapacity);
		dest += slask;
		dest += "<DEVGPS>" + q.GetDatabase().xmlsafestr(this->devgps) + "</DEVGPS>";
		dest += "<DEVKEYTYPE>" + q.GetDatabase().xmlsafestr(this->devkeytype) + "</DEVKEYTYPE>";
		sprintf(slask, "<DEVSMSTERM>%d</DEVSMSTERM>", this->devsmsterm);
		dest += slask;
		dest += "<DEVSMSDATA>" + q.GetDatabase().xmlsafestr(this->devsmsdata) + "</DEVSMSDATA>";
		dest += "<DEVSMSTIME>" + q.GetDatabase().xmlsafestr(this->devsmstime) + "</DEVSMSTIME>";
		sprintf(slask, "<DEVSMSREQ>%d</DEVSMSREQ>", this->devsmsreq);
		dest += slask;
		dest += "</DEVICE>";
		return dest;
	}


	size_t Device::num_cols()
	{
		return 26;
	}


	void Device::clear()
	{
		mmap_devtype["SECTIONNER"] = 1;
		mmap_devtype["MANAGER"] = 2;
		mmap_devtype["ALARM"] = 3;
		mmap_devsimcardtype["MCI"] = 1;
		mmap_devsimcardtype["IranCell"] = 2;
		mmap_devsimcardtype["Taliya"] = 3;
		mmap_devsimcardtype["RighTel"] = 4;
		this->devserialnumber = 0;
		this->devtype = "";
		this->devname = "";
		this->devcity = "";
		this->devlocation = "";
		this->devsocketnumber = 0;
		this->devip = "";
		this->devport = 0;
		this->camsocketnumber = 0;
		this->camip = "";
		this->camport = 0;
		this->devinstalldate = "";
		this->devstatus = 0;
		this->devsimcardnumber = "";
		this->devsimcardtype = "";
		this->devcalibration = "";
		this->devsamplingtime = 0;
		this->devtranspower = 0;
		this->devtablecapacity = 0;
		this->devgps = "";
		this->devkeytype = "";
		// 21 - devpicture mediumblob
		this->devsmsterm = 0;
		this->devsmsdata = "";
		this->devsmstime = "";
		this->devsmsreq = 0;
	}


	void Device::spawn(const std::string& sql)
	{
		Query q(*database);
		std::string temp;

		clear();

		if (!strncasecmp(sql.c_str(), "select * ", 9))
		{
			temp = "select DevSerialNumber,DevType,DevName,DevCity,DevLocation,DevSocketNumber,DevIP,DevPort,CamSocketNumber,CamIP,CamPort,DevInstallDate,DevStatus,DevSimcardNumber,DevSimcardType,DevCalibration,DevSamplingTime,DevTransPower,DevTableCapacity,DevGPS,DevkeyType,DevPicture,DevSmsTerm,DevSmsData,DevSmsTime,DevSmsReq " + sql.substr(9);
		}
		else
			temp = sql;
		q.get_result(temp);
		if (q.fetch_row())
		{
			this->devserialnumber = q.getubigint(0);																				// 0 - devserialnumber bigint(15)
			this->devtype = q.getstr(1);																				// 1 - devtype enum('SECTIONNER','MANAGER','ALARM')
			this->devname = q.getstr(2);																				// 2 - devname varchar(200)
			this->devcity = q.getstr(3);																				// 3 - devcity varchar(200)
			this->devlocation = q.getstr(4);																				// 4 - devlocation varchar(200)
			this->devsocketnumber = q.getuval(5);																				// 5 - devsocketnumber int(11)
			this->devip = q.getstr(6);																				// 6 - devip varchar(30)
			this->devport = q.getuval(7);																				// 7 - devport int(11)
			this->camsocketnumber = q.getuval(8);																				// 8 - camsocketnumber int(30)
			this->camip = q.getstr(9);																				// 9 - camip varchar(11)
			this->camport = q.getuval(10);																				// 10 - camport int(11)
			this->devinstalldate = q.getstr(11);																				// 11 - devinstalldate timestamp
			this->devstatus = q.getuval(12);																				// 12 - devstatus tinyint(1)
			this->devsimcardnumber = q.getstr(13);																				// 13 - devsimcardnumber varchar(11)
			this->devsimcardtype = q.getstr(14);																				// 14 - devsimcardtype enum('MCI','IranCell','Taliya','RighTel')
			this->devcalibration = q.getstr(15);																				// 15 - devcalibration varchar(12000)
			this->devsamplingtime = q.getuval(16);																				// 16 - devsamplingtime int(5)
			this->devtranspower = q.getubigint(17);																				// 17 - devtranspower bigint(20)
			this->devtablecapacity = q.getubigint(18);																		// 18 - devtablecapacity bigint(20)
			this->devgps = q.getstr(19);																				// 19 - devgps varchar(50)
			this->devkeytype = q.getstr(20);																				// 20 - devkeytype varchar(100)
			// 21 - devpicture mediumblob
			this->devsmsterm = q.getval(22);																				// 22 - devsmsterm smallint(6)
			this->devsmsdata = q.getstr(23);																				// 23 - devsmsdata varchar(8192)
			this->devsmstime = q.getstr(24);																				// 24 - devsmstime timestamp
			this->devsmsreq = q.getval(25);																				// 25 - devsmsreq tinyint(1)
			new_object = 0;
		}
		else
			clear();
		q.free_result();
	}


	void Device::spawn(Query *qd, int offset)
	{
		clear();

		this->devserialnumber = qd->getubigint(0 + offset);																				// 0 - devserialnumber bigint(15)
		this->devtype = qd->getstr(1 + offset);																				// 1 - devtype enum('SECTIONNER','MANAGER','ALARM')
		this->devname = qd->getstr(2 + offset);																				// 2 - devname varchar(200)
		this->devcity = qd->getstr(3 + offset);																				// 3 - devcity varchar(200)
		this->devlocation = qd->getstr(4 + offset);																				// 4 - devlocation varchar(200)
		this->devsocketnumber = qd->getuval(5 + offset);																				// 5 - devsocketnumber int(11)
		this->devip = qd->getstr(6 + offset);																				// 6 - devip varchar(30)
		this->devport = qd->getuval(7 + offset);																				// 7 - devport int(11)
		this->camsocketnumber = qd->getuval(8 + offset);																				// 8 - camsocketnumber int(30)
		this->camip = qd->getstr(9 + offset);																				// 9 - camip varchar(11)
		this->camport = qd->getuval(10 + offset);																				// 10 - camport int(11)
		this->devinstalldate = qd->getstr(11 + offset);																				// 11 - devinstalldate timestamp
		this->devstatus = qd->getuval(12 + offset);																				// 12 - devstatus tinyint(1)
		this->devsimcardnumber = qd->getstr(13 + offset);																				// 13 - devsimcardnumber varchar(11)
		this->devsimcardtype = qd->getstr(14 + offset);																				// 14 - devsimcardtype enum('MCI','IranCell','Taliya','RighTel')
		this->devcalibration = qd->getstr(15 + offset);																				// 15 - devcalibration varchar(12000)
		this->devsamplingtime = qd->getuval(16 + offset);																				// 16 - devsamplingtime int(5)
		this->devtranspower = qd->getubigint(17 + offset);																				// 17 - devtranspower bigint(20)
		this->devtablecapacity = qd->getubigint(18 + offset);																		// 18 - devtablecapacity bigint(20)
		this->devgps = qd->getstr(19 + offset);																				// 19 - devgps varchar(50)
		this->devkeytype = qd->getstr(20 + offset);																				// 20 - devkeytype varchar(100)
		// 21 - devpicture mediumblob
		this->devsmsterm = qd->getval(22 + offset);																				// 22 - devsmsterm smallint(6)
		this->devsmsdata = qd->getstr(23 + offset);																				// 23 - devsmsdata varchar(8192)
		this->devsmstime = qd->getstr(24 + offset);																				// 24 - devsmstime timestamp
		this->devsmsreq = qd->getval(25 + offset);																				// 25 - devsmsreq tinyint(1)
	}


	// End of implementation of class 'Device'

} // End of namespace
namespace db {

	/**
	 **  Begin class 'Logactivity'
	 **/

	Logactivity::Logactivity(Database *db)
	{
		database = db;
		new_object = 1;
		clear();
	}


	Logactivity::Logactivity(Database *db, const std::string& sql)
	{
		database = db;
		new_object = 1;
		spawn(sql);
	}


	Logactivity::Logactivity(Database *db, Query *qd, int offset)
	{
		database = db;
		new_object = 0;
		spawn(qd, offset);
	}


	Logactivity::Logactivity(Database& db, unsigned long i_logid) :database(&db), new_object(1)
	{
		Query q(*database);
		std::string sql = "select * from logactivity where ";
		{
			char slask[100];
			sprintf(slask, "LogID='%lu'", i_logid);
			sql += slask;
		}
		spawn(sql);
	}


	Logactivity::~Logactivity()
	{
	}


	void Logactivity::select(const std::string& sql)
	{
		spawn(sql);
	}


	unsigned __int64 Logactivity::insert()
	{
		Query q(*database);
		std::string sql;

		sql = "insert into logactivity(DevSerialNumber,UserID,DataActivity)";
		{
			char slask[100];
			sprintf(slask, " values(%llu", this->devserialnumber);
			sql += slask;
		}
		{
			char slask[100];
			sprintf(slask, ", %lu", this->userid);
			sql += slask;
		}
		sql += ", '" + q.GetDatabase().safestr(this->dataactivity) + "'";
		sql += ")";
		q.execute(sql);
		new_object = 0;
		unsigned __int64 inserted_id = q.insert_id();
		logid = inserted_id;
		return inserted_id;
	}


	void Logactivity::update()
	{
		update(this->logid);
	}


	void Logactivity::update(unsigned long i_logid)
	{
		Query q(*database);
		std::string sql;
		{
			char slask[200];
			sprintf(slask, "update logactivity set DevSerialNumber=%llu", this->devserialnumber);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, ", UserID=%lu", this->userid);
			sql += slask;
		}
		sql += ", DataActivity='" + q.GetDatabase().safestr(this->dataactivity) + "'";
		{
			char slask[200];
			sprintf(slask, " where LogID='%lu'", i_logid);
			sql += slask;
		}
		q.execute(sql);
	}


	void Logactivity::save()
	{
		if (new_object)
			insert();
		else
			update();
	}


	void Logactivity::erase()
	{
		if (!new_object)
		{
			std::string sql = "delete from logactivity where";
			Query q(*database);
			{
				char slask[200];
				sprintf(slask, " LogID='%lu'", this->logid);
				sql += slask;
			}
			q.execute(sql);
		}
	}


	std::string Logactivity::xml()
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<LOGACTIVITY>";
		sprintf(slask, "<LOGID>%lu</LOGID>", this->logid);
		dest += slask;
		sprintf(slask, "<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>", this->devserialnumber);
		dest += slask;
		sprintf(slask, "<USERID>%lu</USERID>", this->userid);
		dest += slask;
		dest += "<DATAACTIVITY>" + q.GetDatabase().xmlsafestr(this->dataactivity) + "</DATAACTIVITY>";
		dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this->logdate) + "</LOGDATE>";
		dest += "</LOGACTIVITY>";
		return dest;
	}


	std::string Logactivity::xml(const std::string& tag, const std::string& xvalx)
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<LOGACTIVITY " + tag + "=\"" + xvalx + "\">";
		sprintf(slask, "<LOGID>%lu</LOGID>", this->logid);
		dest += slask;
		sprintf(slask, "<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>", this->devserialnumber);
		dest += slask;
		sprintf(slask, "<USERID>%lu</USERID>", this->userid);
		dest += slask;
		dest += "<DATAACTIVITY>" + q.GetDatabase().xmlsafestr(this->dataactivity) + "</DATAACTIVITY>";
		dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this->logdate) + "</LOGDATE>";
		dest += "</LOGACTIVITY>";
		return dest;
	}


	size_t Logactivity::num_cols()
	{
		return 5;
	}


	void Logactivity::clear()
	{
		this->logid = 0;
		this->devserialnumber = 0;
		this->userid = 0;
		this->dataactivity = "";
		this->logdate = "";
	}


	void Logactivity::spawn(const std::string& sql)
	{
		Query q(*database);
		std::string temp;

		clear();

		if (!strncasecmp(sql.c_str(), "select * ", 9))
		{
			temp = "select LogID,DevSerialNumber,UserID,DataActivity,LogDate " + sql.substr(9);
		}
		else
			temp = sql;
		q.get_result(temp);
		if (q.fetch_row())
		{
			this->logid = q.getuval(0);																				// 0 - logid int(11)
			this->devserialnumber = q.getubigint(1);																				// 1 - devserialnumber bigint(15)
			this->userid = q.getuval(2);																				// 2 - userid int(11)
			this->dataactivity = q.getstr(3);																				// 3 - dataactivity varchar(1000)
			this->logdate = q.getstr(4);																				// 4 - logdate timestamp
			new_object = 0;
		}
		else
			clear();
		q.free_result();
	}


	void Logactivity::spawn(Query *qd, int offset)
	{
		clear();

		this->logid = qd->getuval(0 + offset);																				// 0 - logid int(11)
		this->devserialnumber = qd->getubigint(1 + offset);																				// 1 - devserialnumber bigint(15)
		this->userid = qd->getuval(2 + offset);																				// 2 - userid int(11)
		this->dataactivity = qd->getstr(3 + offset);																				// 3 - dataactivity varchar(1000)
		this->logdate = qd->getstr(4 + offset);																				// 4 - logdate timestamp
	}


	// End of implementation of class 'Logactivity'

} // End of namespace
namespace db {

	/**
	 **  Begin class 'Logpicture'
	 **/

	Logpicture::Logpicture(Database *db)
	{
		database = db;
		new_object = 1;
		clear();
	}


	Logpicture::Logpicture(Database *db, const std::string& sql)
	{
		database = db;
		new_object = 1;
		spawn(sql);
	}


	Logpicture::Logpicture(Database *db, Query *qd, int offset)
	{
		database = db;
		new_object = 0;
		spawn(qd, offset);
	}


	Logpicture::Logpicture(Database& db, unsigned long i_logid) :database(&db), new_object(1)
	{
		Query q(*database);
		std::string sql = "select * from logpicture where ";
		{
			char slask[100];
			sprintf(slask, "LogID='%lu'", i_logid);
			sql += slask;
		}
		spawn(sql);
	}


	Logpicture::~Logpicture()
	{
	}


	void Logpicture::select(const std::string& sql)
	{
		spawn(sql);
	}


	unsigned __int64 Logpicture::insert()
	{
		Query q(*database);
		std::string sql;

		sql = "insert into logpicture(DevSerialNumber)";
		{
			char slask[100];
			sprintf(slask, " values(%llu", this->devserialnumber);
			sql += slask;
		}
		sql += ")";
		q.execute(sql);
		new_object = 0;
		unsigned __int64 inserted_id = q.insert_id();
		logid = inserted_id;
		return inserted_id;
	}


	void Logpicture::update()
	{
		update(this->logid);
	}


	void Logpicture::update(unsigned long i_logid)
	{
		Query q(*database);
		std::string sql;
		{
			char slask[200];
			sprintf(slask, "update logpicture set DevSerialNumber=%llu", this->devserialnumber);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, " where LogID='%lu'", i_logid);
			sql += slask;
		}
		q.execute(sql);
	}


	void Logpicture::save()
	{
		if (new_object)
			insert();
		else
			update();
	}


	void Logpicture::erase()
	{
		if (!new_object)
		{
			std::string sql = "delete from logpicture where";
			Query q(*database);
			{
				char slask[200];
				sprintf(slask, " LogID='%lu'", this->logid);
				sql += slask;
			}
			q.execute(sql);
		}
	}


	std::string Logpicture::xml()
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<LOGPICTURE>";
		sprintf(slask, "<LOGID>%lu</LOGID>", this->logid);
		dest += slask;
		sprintf(slask, "<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>", this->devserialnumber);
		dest += slask;
		dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this->logdate) + "</LOGDATE>";
		dest += "</LOGPICTURE>";
		return dest;
	}


	std::string Logpicture::xml(const std::string& tag, const std::string& xvalx)
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<LOGPICTURE " + tag + "=\"" + xvalx + "\">";
		sprintf(slask, "<LOGID>%lu</LOGID>", this->logid);
		dest += slask;
		sprintf(slask, "<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>", this->devserialnumber);
		dest += slask;
		dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this->logdate) + "</LOGDATE>";
		dest += "</LOGPICTURE>";
		return dest;
	}


	size_t Logpicture::num_cols()
	{
		return 4;
	}


	void Logpicture::clear()
	{
		this->logid = 0;
		this->devserialnumber = 0;
		// 2 - devpicture mediumblob
		this->logdate = "";
	}


	void Logpicture::spawn(const std::string& sql)
	{
		Query q(*database);
		std::string temp;

		clear();

		if (!strncasecmp(sql.c_str(), "select * ", 9))
		{
			temp = "select LogID,DevSerialNumber,DevPicture,LogDate " + sql.substr(9);
		}
		else
			temp = sql;
		q.get_result(temp);
		if (q.fetch_row())
		{
			this->logid = q.getuval(0);																				// 0 - logid int(11)
			this->devserialnumber = q.getubigint(1);																				// 1 - devserialnumber bigint(15)
			// 2 - devpicture mediumblob
			this->logdate = q.getstr(3);																				// 3 - logdate timestamp
			new_object = 0;
		}
		else
			clear();
		q.free_result();
	}


	void Logpicture::spawn(Query *qd, int offset)
	{
		clear();

		this->logid = qd->getuval(0 + offset);																				// 0 - logid int(11)
		this->devserialnumber = qd->getubigint(1 + offset);																				// 1 - devserialnumber bigint(15)
		// 2 - devpicture mediumblob
		this->logdate = qd->getstr(3 + offset);																				// 3 - logdate timestamp
	}


	// End of implementation of class 'Logpicture'

} // End of namespace
namespace db {

	/**
	 **  Begin class 'Logstatus'
	 **/

	Logstatus::Logstatus(Database *db)
	{
		database = db;
		new_object = 1;
		clear();
	}


	Logstatus::Logstatus(Database *db, const std::string& sql)
	{
		database = db;
		new_object = 1;
		spawn(sql);
	}


	Logstatus::Logstatus(Database *db, Query *qd, int offset)
	{
		database = db;
		new_object = 0;
		spawn(qd, offset);
	}


	Logstatus::Logstatus(Database& db, unsigned long i_logid) :database(&db), new_object(1)
	{
		Query q(*database);
		std::string sql = "select * from logstatus where ";
		{
			char slask[100];
			sprintf(slask, "LogID='%lu'", i_logid);
			sql += slask;
		}
		spawn(sql);
	}


	Logstatus::~Logstatus()
	{
	}


	void Logstatus::select(const std::string& sql)
	{
		spawn(sql);
	}


	unsigned __int64 Logstatus::insert()
	{
		Query q(*database);
		std::string sql;

		sql = "insert into logstatus(DevSerialNumber,StatusData,PureData)";
		{
			char slask[100];
			sprintf(slask, " values(%llu", this->devserialnumber);
			sql += slask;
		}
		sql += ", '" + q.GetDatabase().safestr(this->statusdata) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->puredata) + "'";
		sql += ")";
		q.execute(sql);
		new_object = 0;
		unsigned __int64 inserted_id = q.insert_id();
		logid = inserted_id;
		return inserted_id;
	}


	void Logstatus::update()
	{
		update(this->logid);
	}


	void Logstatus::update(unsigned long i_logid)
	{
		Query q(*database);
		std::string sql;
		{
			char slask[200];
			sprintf(slask, "update logstatus set DevSerialNumber=%llu", this->devserialnumber);
			sql += slask;
		}
		sql += ", StatusData='" + q.GetDatabase().safestr(this->statusdata) + "'";
		sql += ", PureData='" + q.GetDatabase().safestr(this->puredata) + "'";
		{
			char slask[200];
			sprintf(slask, " where LogID='%lu'", i_logid);
			sql += slask;
		}
		q.execute(sql);
	}


	void Logstatus::save()
	{
		if (new_object)
			insert();
		else
			update();
	}


	void Logstatus::erase()
	{
		if (!new_object)
		{
			std::string sql = "delete from logstatus where";
			Query q(*database);
			{
				char slask[200];
				sprintf(slask, " LogID='%lu'", this->logid);
				sql += slask;
			}
			q.execute(sql);
		}
	}


	std::string Logstatus::xml()
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<LOGSTATUS>";
		sprintf(slask, "<LOGID>%lu</LOGID>", this->logid);
		dest += slask;
		sprintf(slask, "<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>", this->devserialnumber);
		dest += slask;
		dest += "<STATUSDATA>" + q.GetDatabase().xmlsafestr(this->statusdata) + "</STATUSDATA>";
		dest += "<PUREDATA>" + q.GetDatabase().xmlsafestr(this->puredata) + "</PUREDATA>";
		dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this->logdate) + "</LOGDATE>";
		dest += "</LOGSTATUS>";
		return dest;
	}


	std::string Logstatus::xml(const std::string& tag, const std::string& xvalx)
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<LOGSTATUS " + tag + "=\"" + xvalx + "\">";
		sprintf(slask, "<LOGID>%lu</LOGID>", this->logid);
		dest += slask;
		sprintf(slask, "<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>", this->devserialnumber);
		dest += slask;
		dest += "<STATUSDATA>" + q.GetDatabase().xmlsafestr(this->statusdata) + "</STATUSDATA>";
		dest += "<PUREDATA>" + q.GetDatabase().xmlsafestr(this->puredata) + "</PUREDATA>";
		dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this->logdate) + "</LOGDATE>";
		dest += "</LOGSTATUS>";
		return dest;
	}


	size_t Logstatus::num_cols()
	{
		return 5;
	}


	void Logstatus::clear()
	{
		this->logid = 0;
		this->devserialnumber = 0;
		this->statusdata = "";
		this->puredata = "";
		this->logdate = "";
	}


	void Logstatus::spawn(const std::string& sql)
	{
		Query q(*database);
		std::string temp;

		clear();

		if (!strncasecmp(sql.c_str(), "select * ", 9))
		{
			temp = "select LogID,DevSerialNumber,StatusData,PureData,LogDate " + sql.substr(9);
		}
		else
			temp = sql;
		q.get_result(temp);
		if (q.fetch_row())
		{
			this->logid = q.getuval(0);																				// 0 - logid int(11)
			this->devserialnumber = q.getubigint(1);																				// 1 - devserialnumber bigint(15)
			this->statusdata = q.getstr(2);																				// 2 - statusdata varchar(8192)
			this->puredata = q.getstr(3);																				// 3 - puredata varchar(2048)
			this->logdate = q.getstr(4);																				// 4 - logdate timestamp
			new_object = 0;
		}
		else
			clear();
		q.free_result();
	}


	void Logstatus::spawn(Query *qd, int offset)
	{
		clear();

		this->logid = qd->getuval(0 + offset);																				// 0 - logid int(11)
		this->devserialnumber = qd->getubigint(1 + offset);																				// 1 - devserialnumber bigint(15)
		this->statusdata = qd->getstr(2 + offset);																				// 2 - statusdata varchar(8192)
		this->puredata = qd->getstr(3 + offset);																				// 3 - puredata varchar(2048)
		this->logdate = qd->getstr(4 + offset);																				// 4 - logdate timestamp
	}


	// End of implementation of class 'Logstatus'

} // End of namespace
namespace db {

	/**
	 **  Begin class 'Loguser'
	 **/

	Loguser::Loguser(Database *db)
	{
		database = db;
		new_object = 1;
		clear();
	}


	Loguser::Loguser(Database *db, const std::string& sql)
	{
		database = db;
		new_object = 1;
		spawn(sql);
	}


	Loguser::Loguser(Database *db, Query *qd, int offset)
	{
		database = db;
		new_object = 0;
		spawn(qd, offset);
	}


	Loguser::Loguser(Database& db, unsigned long i_id) :database(&db), new_object(1)
	{
		Query q(*database);
		std::string sql = "select * from loguser where ";
		{
			char slask[100];
			sprintf(slask, "ID='%lu'", i_id);
			sql += slask;
		}
		spawn(sql);
	}


	Loguser::~Loguser()
	{
	}


	void Loguser::select(const std::string& sql)
	{
		spawn(sql);
	}


	unsigned __int64 Loguser::insert()
	{
		Query q(*database);
		std::string sql;

		sql = "insert into loguser(UserID,DataActivity)";
		{
			char slask[100];
			sprintf(slask, " values(%lu", this->userid);
			sql += slask;
		}
		sql += ", '" + q.GetDatabase().safestr(this->dataactivity) + "'";
		sql += ")";
		q.execute(sql);
		new_object = 0;
		unsigned __int64 inserted_id = q.insert_id();
		id = inserted_id;
		return inserted_id;
	}


	void Loguser::update()
	{
		update(this->id);
	}


	void Loguser::update(unsigned long i_id)
	{
		Query q(*database);
		std::string sql;
		{
			char slask[200];
			sprintf(slask, "update loguser set UserID=%lu", this->userid);
			sql += slask;
		}
		sql += ", DataActivity='" + q.GetDatabase().safestr(this->dataactivity) + "'";
		{
			char slask[200];
			sprintf(slask, " where ID='%lu'", i_id);
			sql += slask;
		}
		q.execute(sql);
	}


	void Loguser::save()
	{
		if (new_object)
			insert();
		else
			update();
	}


	void Loguser::erase()
	{
		if (!new_object)
		{
			std::string sql = "delete from loguser where";
			Query q(*database);
			{
				char slask[200];
				sprintf(slask, " ID='%lu'", this->id);
				sql += slask;
			}
			q.execute(sql);
		}
	}


	std::string Loguser::xml()
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<LOGUSER>";
		sprintf(slask, "<ID>%lu</ID>", this->id);
		dest += slask;
		sprintf(slask, "<USERID>%lu</USERID>", this->userid);
		dest += slask;
		dest += "<DATAACTIVITY>" + q.GetDatabase().xmlsafestr(this->dataactivity) + "</DATAACTIVITY>";
		dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this->logdate) + "</LOGDATE>";
		dest += "</LOGUSER>";
		return dest;
	}


	std::string Loguser::xml(const std::string& tag, const std::string& xvalx)
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<LOGUSER " + tag + "=\"" + xvalx + "\">";
		sprintf(slask, "<ID>%lu</ID>", this->id);
		dest += slask;
		sprintf(slask, "<USERID>%lu</USERID>", this->userid);
		dest += slask;
		dest += "<DATAACTIVITY>" + q.GetDatabase().xmlsafestr(this->dataactivity) + "</DATAACTIVITY>";
		dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this->logdate) + "</LOGDATE>";
		dest += "</LOGUSER>";
		return dest;
	}


	size_t Loguser::num_cols()
	{
		return 4;
	}


	void Loguser::clear()
	{
		this->id = 0;
		this->userid = 0;
		this->dataactivity = "";
		this->logdate = "";
	}


	void Loguser::spawn(const std::string& sql)
	{
		Query q(*database);
		std::string temp;

		clear();

		if (!strncasecmp(sql.c_str(), "select * ", 9))
		{
			temp = "select ID,UserID,DataActivity,LogDate " + sql.substr(9);
		}
		else
			temp = sql;
		q.get_result(temp);
		if (q.fetch_row())
		{
			this->id = q.getuval(0);																				// 0 - id int(11)
			this->userid = q.getuval(1);																				// 1 - userid int(11)
			this->dataactivity = q.getstr(2);																				// 2 - dataactivity varchar(20000)
			this->logdate = q.getstr(3);																				// 3 - logdate timestamp
			new_object = 0;
		}
		else
			clear();
		q.free_result();
	}


	void Loguser::spawn(Query *qd, int offset)
	{
		clear();

		this->id = qd->getuval(0 + offset);																				// 0 - id int(11)
		this->userid = qd->getuval(1 + offset);																				// 1 - userid int(11)
		this->dataactivity = qd->getstr(2 + offset);																				// 2 - dataactivity varchar(20000)
		this->logdate = qd->getstr(3 + offset);																				// 3 - logdate timestamp
	}


	// End of implementation of class 'Loguser'

} // End of namespace
namespace db {

	/**
	 **  Begin class 'Userdevice'
	 **/

	Userdevice::Userdevice(Database *db)
	{
		database = db;
		new_object = 1;
		clear();
	}


	Userdevice::Userdevice(Database *db, const std::string& sql)
	{
		database = db;
		new_object = 1;
		spawn(sql);
	}


	Userdevice::Userdevice(Database *db, Query *qd, int offset)
	{
		database = db;
		new_object = 0;
		spawn(qd, offset);
	}


	Userdevice::Userdevice(Database& db, unsigned long i_id) :database(&db), new_object(1)
	{
		Query q(*database);
		std::string sql = "select * from userdevice where ";
		{
			char slask[100];
			sprintf(slask, "ID='%lu'", i_id);
			sql += slask;
		}
		spawn(sql);
	}


	Userdevice::Userdevice(Database& db, unsigned long i_userid, uint64_t i_deviceid) :database(&db), new_object(1)
	{
		Query q(*database);
		std::string sql = "select * from userdevice where ";
		{
			char slask[100];
			sprintf(slask, "UserId='%lu'", i_userid);
			sql += slask;
		}
		{
			char slask[100];
			sprintf(slask, " and DeviceId='%llu'", i_deviceid);
			sql += slask;
		}
		spawn(sql);
	}


	Userdevice::~Userdevice()
	{
	}


	void Userdevice::select(const std::string& sql)
	{
		spawn(sql);
	}


	unsigned __int64 Userdevice::insert()
	{
		Query q(*database);
		std::string sql;

		sql = "insert into userdevice(UserId,DeviceId,ViewAct,UpdateAct,DeleteAct)";
		{
			char slask[100];
			sprintf(slask, " values(%lu", this->userid);
			sql += slask;
		}
		{
			char slask[100];
			sprintf(slask, ", %llu", this->deviceid);
			sql += slask;
		}
		{
			char slask[100];
			sprintf(slask, ", %u", this->viewact);
			sql += slask;
		}
		{
			char slask[100];
			sprintf(slask, ", %u", this->updateact);
			sql += slask;
		}
		{
			char slask[100];
			sprintf(slask, ", %u", this->deleteact);
			sql += slask;
		}
		sql += ")";
		q.execute(sql);
		new_object = 0;
		unsigned __int64 inserted_id = q.insert_id();
		id = inserted_id;
		return inserted_id;
	}


	void Userdevice::update()
	{
		update(this->id);
	}


	void Userdevice::update(unsigned long i_id)
	{
		Query q(*database);
		std::string sql;
		{
			char slask[200];
			sprintf(slask, "update userdevice set UserId=%lu", this->userid);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, ", DeviceId=%llu", this->deviceid);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, ", ViewAct=%u", this->viewact);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, ", UpdateAct=%u", this->updateact);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, ", DeleteAct=%u", this->deleteact);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask, " where ID='%lu'", i_id);
			sql += slask;
		}
		q.execute(sql);
	}


	void Userdevice::save()
	{
		if (new_object)
			insert();
		else
			update();
	}


	void Userdevice::erase()
	{
		if (!new_object)
		{
			std::string sql = "delete from userdevice where";
			Query q(*database);
			{
				char slask[200];
				sprintf(slask, " ID='%lu'", this->id);
				sql += slask;
			}
			q.execute(sql);
		}
	}


	std::string Userdevice::xml()
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<USERDEVICE>";
		sprintf(slask, "<ID>%lu</ID>", this->id);
		dest += slask;
		sprintf(slask, "<USERID>%lu</USERID>", this->userid);
		dest += slask;
		sprintf(slask, "<DEVICEID>%llu</DEVICEID>", this->deviceid);
		dest += slask;
		sprintf(slask, "<VIEWACT>%u</VIEWACT>", this->viewact);
		dest += slask;
		sprintf(slask, "<UPDATEACT>%u</UPDATEACT>", this->updateact);
		dest += slask;
		sprintf(slask, "<DELETEACT>%u</DELETEACT>", this->deleteact);
		dest += slask;
		dest += "<ASSIGNDATE>" + q.GetDatabase().xmlsafestr(this->assigndate) + "</ASSIGNDATE>";
		dest += "</USERDEVICE>";
		return dest;
	}


	std::string Userdevice::xml(const std::string& tag, const std::string& xvalx)
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<USERDEVICE " + tag + "=\"" + xvalx + "\">";
		sprintf(slask, "<ID>%lu</ID>", this->id);
		dest += slask;
		sprintf(slask, "<USERID>%lu</USERID>", this->userid);
		dest += slask;
		sprintf(slask, "<DEVICEID>%llu</DEVICEID>", this->deviceid);
		dest += slask;
		sprintf(slask, "<VIEWACT>%u</VIEWACT>", this->viewact);
		dest += slask;
		sprintf(slask, "<UPDATEACT>%u</UPDATEACT>", this->updateact);
		dest += slask;
		sprintf(slask, "<DELETEACT>%u</DELETEACT>", this->deleteact);
		dest += slask;
		dest += "<ASSIGNDATE>" + q.GetDatabase().xmlsafestr(this->assigndate) + "</ASSIGNDATE>";
		dest += "</USERDEVICE>";
		return dest;
	}


	size_t Userdevice::num_cols()
	{
		return 7;
	}


	void Userdevice::clear()
	{
		this->id = 0;
		this->userid = 0;
		this->deviceid = 0;
		this->viewact = 0;
		this->updateact = 0;
		this->deleteact = 0;
		this->assigndate = "";
	}


	void Userdevice::spawn(const std::string& sql)
	{
		Query q(*database);
		std::string temp;

		clear();

		if (!strncasecmp(sql.c_str(), "select * ", 9))
		{
			temp = "select ID,UserId,DeviceId,ViewAct,UpdateAct,DeleteAct,AssignDate " + sql.substr(9);
		}
		else
			temp = sql;
		q.get_result(temp);
		if (q.fetch_row())
		{
			this->id = q.getuval(0);																				// 0 - id int(11)
			this->userid = q.getuval(1);																				// 1 - userid int(11)
			this->deviceid = q.getubigint(2);																				// 2 - deviceid bigint(15)
			this->viewact = q.getuval(3);																				// 3 - viewact tinyint(1)
			this->updateact = q.getuval(4);																				// 4 - updateact tinyint(1)
			this->deleteact = q.getuval(5);																				// 5 - deleteact tinyint(1)
			this->assigndate = q.getstr(6);																				// 6 - assigndate timestamp
			new_object = 0;
		}
		else
			clear();
		q.free_result();
	}


	void Userdevice::spawn(Query *qd, int offset)
	{
		clear();

		this->id = qd->getuval(0 + offset);																				// 0 - id int(11)
		this->userid = qd->getuval(1 + offset);																				// 1 - userid int(11)
		this->deviceid = qd->getubigint(2 + offset);																				// 2 - deviceid bigint(15)
		this->viewact = qd->getuval(3 + offset);																				// 3 - viewact tinyint(1)
		this->updateact = qd->getuval(4 + offset);																				// 4 - updateact tinyint(1)
		this->deleteact = qd->getuval(5 + offset);																				// 5 - deleteact tinyint(1)
		this->assigndate = qd->getstr(6 + offset);																				// 6 - assigndate timestamp
	}


	// End of implementation of class 'Userdevice'

} // End of namespace
namespace db {

	/**
	 **  Begin class 'Users'
	 **/

	Users::Users(Database *db) :usertype(mmap_usertype), status(mmap_status)
	{
		database = db;
		new_object = 1;
		clear();
	}


	Users::Users(Database *db, const std::string& sql) :usertype(mmap_usertype), status(mmap_status)
	{
		database = db;
		new_object = 1;
		spawn(sql);
	}


	Users::Users(Database *db, Query *qd, int offset) :usertype(mmap_usertype), status(mmap_status)
	{
		database = db;
		new_object = 0;
		spawn(qd, offset);
	}


	Users::Users(Database& db, unsigned long i_userid) :usertype(mmap_usertype), status(mmap_status), database(&db), new_object(1)
	{
		Query q(*database);
		std::string sql = "select * from users where ";
		{
			char slask[100];
			sprintf(slask, "UserID='%lu'", i_userid);
			sql += slask;
		}
		spawn(sql);
	}


	Users::Users(Database& db, const std::string&  i_username) :usertype(mmap_usertype), status(mmap_status), database(&db), new_object(1)
	{
		Query q(*database);
		std::string sql = "select * from users where ";
		sql += "UserName='" + q.GetDatabase().safestr(i_username) + "'";
		spawn(sql);
	}


	Users::Users(Database& db, const std::string&  i_username, const std::string&  i_password) :usertype(mmap_usertype), status(mmap_status), database(&db), new_object(1)
	{
		Query q(*database);
		std::string sql = "select * from users where ";
		sql += "UserName='" + q.GetDatabase().safestr(i_username) + "'";
		sql += " and Password='" + q.GetDatabase().safestr(i_password) + "'";
		spawn(sql);
	}


	Users::~Users()
	{
	}


	void Users::select(const std::string& sql)
	{
		spawn(sql);
	}


	unsigned __int64 Users::insert()
	{
		Query q(*database);
		std::string sql;

		sql = "insert into users(UserName,PASSWORD,UserType,UserFirstName,UserLastName,STATUS)";
		sql += " values('" + q.GetDatabase().safestr(this->username) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->password) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->usertype.String()) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->userfirstname) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->userlastname) + "'";
		sql += ", '" + q.GetDatabase().safestr(this->status.String()) + "'";
		sql += ")";
		q.execute(sql);
		new_object = 0;
		unsigned __int64 inserted_id = q.insert_id();
		userid = inserted_id;
		return inserted_id;
	}


	void Users::update()
	{
		update(this->userid);
	}


	void Users::update(unsigned long i_userid)
	{
		Query q(*database);
		std::string sql;
		sql += "update users set UserName='" + q.GetDatabase().safestr(this->username) + "'";
		sql += ", PASSWORD='" + q.GetDatabase().safestr(this->password) + "'";
		sql += ", UserType='" + q.GetDatabase().safestr(this->usertype.String()) + "'";
		sql += ", UserFirstName='" + q.GetDatabase().safestr(this->userfirstname) + "'";
		sql += ", UserLastName='" + q.GetDatabase().safestr(this->userlastname) + "'";
		sql += ", STATUS='" + q.GetDatabase().safestr(this->status.String()) + "'";
		{
			char slask[200];
			sprintf(slask, " where UserID='%lu'", i_userid);
			sql += slask;
		}
		q.execute(sql);
	}


	void Users::save()
	{
		if (new_object)
			insert();
		else
			update();
	}


	void Users::erase()
	{
		if (!new_object)
		{
			std::string sql = "delete from users where";
			Query q(*database);
			{
				char slask[200];
				sprintf(slask, " UserID='%lu'", this->userid);
				sql += slask;
			}
			q.execute(sql);
		}
	}


	std::string Users::xml()
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<USERS>";
		sprintf(slask, "<USERID>%lu</USERID>", this->userid);
		dest += slask;
		dest += "<USERNAME>" + q.GetDatabase().xmlsafestr(this->username) + "</USERNAME>";
		dest += "<PASSWORD>" + q.GetDatabase().xmlsafestr(this->password) + "</PASSWORD>";
		dest += "<USERTYPE>" + q.GetDatabase().xmlsafestr(this->usertype.String()) + "</USERTYPE>";
		dest += "<USERFIRSTNAME>" + q.GetDatabase().xmlsafestr(this->userfirstname) + "</USERFIRSTNAME>";
		dest += "<USERLASTNAME>" + q.GetDatabase().xmlsafestr(this->userlastname) + "</USERLASTNAME>";
		dest += "<REGISTERDATE>" + q.GetDatabase().xmlsafestr(this->registerdate) + "</REGISTERDATE>";
		dest += "<STATUS>" + q.GetDatabase().xmlsafestr(this->status.String()) + "</STATUS>";
		dest += "</USERS>";
		return dest;
	}


	std::string Users::xml(const std::string& tag, const std::string& xvalx)
	{
		Query q(*database);
		std::string dest;
		char slask[200];
		dest = "<USERS " + tag + "=\"" + xvalx + "\">";
		sprintf(slask, "<USERID>%lu</USERID>", this->userid);
		dest += slask;
		dest += "<USERNAME>" + q.GetDatabase().xmlsafestr(this->username) + "</USERNAME>";
		dest += "<PASSWORD>" + q.GetDatabase().xmlsafestr(this->password) + "</PASSWORD>";
		dest += "<USERTYPE>" + q.GetDatabase().xmlsafestr(this->usertype.String()) + "</USERTYPE>";
		dest += "<USERFIRSTNAME>" + q.GetDatabase().xmlsafestr(this->userfirstname) + "</USERFIRSTNAME>";
		dest += "<USERLASTNAME>" + q.GetDatabase().xmlsafestr(this->userlastname) + "</USERLASTNAME>";
		dest += "<REGISTERDATE>" + q.GetDatabase().xmlsafestr(this->registerdate) + "</REGISTERDATE>";
		dest += "<STATUS>" + q.GetDatabase().xmlsafestr(this->status.String()) + "</STATUS>";
		dest += "</USERS>";
		return dest;
	}


	size_t Users::num_cols()
	{
		return 9;
	}


	void Users::clear()
	{
		mmap_usertype["Admin"] = 1;
		mmap_usertype["Control"] = 2;
		mmap_usertype["Monitor"] = 3;
		mmap_status["Login"] = 1;
		mmap_status["Logout"] = 2;
		this->userid = 0;
		this->username = "";
		this->password = "";
		this->usertype = "";
		this->userfirstname = "";
		this->userlastname = "";
		// 6 - userpicture mediumblob
		this->registerdate = "";
		this->status = "";
	}


	void Users::spawn(const std::string& sql)
	{
		Query q(*database);
		std::string temp;

		clear();

		if (!strncasecmp(sql.c_str(), "select * ", 9))
		{
			temp = "select UserID,UserName,PASSWORD,UserType,UserFirstName,UserLastName,UserPicture,RegisterDate,STATUS " + sql.substr(9);
		}
		else
			temp = sql;
		q.get_result(temp);
		if (q.fetch_row())
		{
			this->userid = q.getuval(0);																				// 0 - userid int(11)
			this->username = q.getstr(1);																				// 1 - username varchar(50)
			this->password = q.getstr(2);																				// 2 - password varchar(32)
			this->usertype = q.getstr(3);																				// 3 - usertype enum('Admin','Control','Monitor')
			this->userfirstname = q.getstr(4);																				// 4 - userfirstname varchar(100)
			this->userlastname = q.getstr(5);																				// 5 - userlastname varchar(100)
			// 6 - userpicture mediumblob
			this->registerdate = q.getstr(7);																				// 7 - registerdate timestamp
			this->status = q.getstr(8);																				// 8 - status enum('Login','Logout')
			new_object = 0;
		}
		else
			clear();
		q.free_result();
	}


	void Users::spawn(Query *qd, int offset)
	{
		clear();

		this->userid = qd->getuval(0 + offset);																				// 0 - userid int(11)
		this->username = qd->getstr(1 + offset);																				// 1 - username varchar(50)
		this->password = qd->getstr(2 + offset);																				// 2 - password varchar(32)
		this->usertype = qd->getstr(3 + offset);																				// 3 - usertype enum('Admin','Control','Monitor')
		this->userfirstname = qd->getstr(4 + offset);																				// 4 - userfirstname varchar(100)
		this->userlastname = qd->getstr(5 + offset);																				// 5 - userlastname varchar(100)
		// 6 - userpicture mediumblob
		this->registerdate = qd->getstr(7 + offset);																				// 7 - registerdate timestamp
		this->status = qd->getstr(8 + offset);																				// 8 - status enum('Login','Logout')
	}


	// End of implementation of class 'Users'

} // End of namespace
